{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { parseDate, isNumeric, numericToNumber } from './number';\nimport { format as timeFormat, pad } from './time';\nimport { deprecateReplaceLog } from './log';\n/**\n * Add a comma each three digit.\n */\n\nexport function addCommas(x) {\n  if (!isNumeric(x)) {\n    return zrUtil.isString(x) ? x : '-';\n  }\n\n  var parts = (x + '').split('.');\n  return parts[0].replace(/(\\d{1,3})(?=(?:\\d{3})+(?!\\d))/g, '$1,') + (parts.length > 1 ? '.' + parts[1] : '');\n}\nexport function toCamelCase(str, upperCaseFirst) {\n  str = (str || '').toLowerCase().replace(/-(.)/g, function (match, group1) {\n    return group1.toUpperCase();\n  });\n\n  if (upperCaseFirst && str) {\n    str = str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  return str;\n}\nexport var normalizeCssArray = zrUtil.normalizeCssArray;\nvar replaceReg = /([&<>\"'])/g;\nvar replaceMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  '\\'': '&#39;'\n};\nexport function encodeHTML(source) {\n  return source == null ? '' : (source + '').replace(replaceReg, function (str, c) {\n    return replaceMap[c];\n  });\n}\n/**\n * Make value user readable for tooltip and label.\n * \"User readable\":\n *     Try to not print programmer-specific text like NaN, Infinity, null, undefined.\n *     Avoid to display an empty string, which users can not recognize there is\n *     a value and it might look like a bug.\n */\n\nexport function makeValueReadable(value, valueType, useUTC) {\n  var USER_READABLE_DEFUALT_TIME_PATTERN = '{yyyy}-{MM}-{dd} {hh}:{mm}:{ss}';\n\n  function stringToUserReadable(str) {\n    return str && zrUtil.trim(str) ? str : '-';\n  }\n\n  function isNumberUserReadable(num) {\n    return !!(num != null && !isNaN(num) && isFinite(num));\n  }\n\n  var isTypeTime = valueType === 'time';\n  var isValueDate = value instanceof Date;\n\n  if (isTypeTime || isValueDate) {\n    var date = isTypeTime ? parseDate(value) : value;\n\n    if (!isNaN(+date)) {\n      return timeFormat(date, USER_READABLE_DEFUALT_TIME_PATTERN, useUTC);\n    } else if (isValueDate) {\n      return '-';\n    } // In other cases, continue to try to display the value in the following code.\n\n  }\n\n  if (valueType === 'ordinal') {\n    return zrUtil.isStringSafe(value) ? stringToUserReadable(value) : zrUtil.isNumber(value) ? isNumberUserReadable(value) ? value + '' : '-' : '-';\n  } // By default.\n\n\n  var numericResult = numericToNumber(value);\n  return isNumberUserReadable(numericResult) ? addCommas(numericResult) : zrUtil.isStringSafe(value) ? stringToUserReadable(value) : '-';\n}\nvar TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n\nvar wrapVar = function (varName, seriesIdx) {\n  return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';\n};\n/**\n * Template formatter\n * @param {Array.<Object>|Object} paramsList\n */\n\n\nexport function formatTpl(tpl, paramsList, encode) {\n  if (!zrUtil.isArray(paramsList)) {\n    paramsList = [paramsList];\n  }\n\n  var seriesLen = paramsList.length;\n\n  if (!seriesLen) {\n    return '';\n  }\n\n  var $vars = paramsList[0].$vars || [];\n\n  for (var i = 0; i < $vars.length; i++) {\n    var alias = TPL_VAR_ALIAS[i];\n    tpl = tpl.replace(wrapVar(alias), wrapVar(alias, 0));\n  }\n\n  for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {\n    for (var k = 0; k < $vars.length; k++) {\n      var val = paramsList[seriesIdx][$vars[k]];\n      tpl = tpl.replace(wrapVar(TPL_VAR_ALIAS[k], seriesIdx), encode ? encodeHTML(val) : val);\n    }\n  }\n\n  return tpl;\n}\n/**\n * simple Template formatter\n */\n\nexport function formatTplSimple(tpl, param, encode) {\n  zrUtil.each(param, function (value, key) {\n    tpl = tpl.replace('{' + key + '}', encode ? encodeHTML(value) : value);\n  });\n  return tpl;\n}\nexport function getTooltipMarker(inOpt, extraCssText) {\n  var opt = zrUtil.isString(inOpt) ? {\n    color: inOpt,\n    extraCssText: extraCssText\n  } : inOpt || {};\n  var color = opt.color;\n  var type = opt.type;\n  extraCssText = opt.extraCssText;\n  var renderMode = opt.renderMode || 'html';\n\n  if (!color) {\n    return '';\n  }\n\n  if (renderMode === 'html') {\n    return type === 'subItem' ? '<span style=\"display:inline-block;vertical-align:middle;margin-right:8px;margin-left:3px;' + 'border-radius:4px;width:4px;height:4px;background-color:' // Only support string\n    + encodeHTML(color) + ';' + (extraCssText || '') + '\"></span>' : '<span style=\"display:inline-block;margin-right:4px;' + 'border-radius:10px;width:10px;height:10px;background-color:' + encodeHTML(color) + ';' + (extraCssText || '') + '\"></span>';\n  } else {\n    // Should better not to auto generate style name by auto-increment number here.\n    // Because this util is usually called in tooltip formatter, which is probably\n    // called repeatly when mouse move and the auto-increment number increases fast.\n    // Users can make their own style name by theirselves, make it unique and readable.\n    var markerId = opt.markerId || 'markerX';\n    return {\n      renderMode: renderMode,\n      content: '{' + markerId + '|}  ',\n      style: type === 'subItem' ? {\n        width: 4,\n        height: 4,\n        borderRadius: 2,\n        backgroundColor: color\n      } : {\n        width: 10,\n        height: 10,\n        borderRadius: 5,\n        backgroundColor: color\n      }\n    };\n  }\n}\n/**\n * @deprecated Use `time/format` instead.\n * ISO Date format\n * @param {string} tpl\n * @param {number} value\n * @param {boolean} [isUTC=false] Default in local time.\n *           see `module:echarts/scale/Time`\n *           and `module:echarts/util/number#parseDate`.\n * @inner\n */\n\nexport function formatTime(tpl, value, isUTC) {\n  if (process.env.NODE_ENV !== 'production') {\n    deprecateReplaceLog('echarts.format.formatTime', 'echarts.time.format');\n  }\n\n  if (tpl === 'week' || tpl === 'month' || tpl === 'quarter' || tpl === 'half-year' || tpl === 'year') {\n    tpl = 'MM-dd\\nyyyy';\n  }\n\n  var date = parseDate(value);\n  var utc = isUTC ? 'UTC' : '';\n  var y = date['get' + utc + 'FullYear']();\n  var M = date['get' + utc + 'Month']() + 1;\n  var d = date['get' + utc + 'Date']();\n  var h = date['get' + utc + 'Hours']();\n  var m = date['get' + utc + 'Minutes']();\n  var s = date['get' + utc + 'Seconds']();\n  var S = date['get' + utc + 'Milliseconds']();\n  tpl = tpl.replace('MM', pad(M, 2)).replace('M', M).replace('yyyy', y).replace('yy', y % 100 + '').replace('dd', pad(d, 2)).replace('d', d).replace('hh', pad(h, 2)).replace('h', h).replace('mm', pad(m, 2)).replace('m', m).replace('ss', pad(s, 2)).replace('s', s).replace('SSS', pad(S, 3));\n  return tpl;\n}\n/**\n * Capital first\n * @param {string} str\n * @return {string}\n */\n\nexport function capitalFirst(str) {\n  return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;\n}\n/**\n * @return Never be null/undefined.\n */\n\nexport function convertToColorString(color, defaultColor) {\n  defaultColor = defaultColor || 'transparent';\n  return zrUtil.isString(color) ? color : zrUtil.isObject(color) ? color.colorStops && (color.colorStops[0] || {}).color || defaultColor : defaultColor;\n}\nexport { truncateText } from 'zrender/lib/graphic/helper/parseText';\n/**\n * open new tab\n * @param link url\n * @param target blank or self\n */\n\nexport function windowOpen(link, target) {\n  /* global window */\n  if (target === '_blank' || target === 'blank') {\n    var blank = window.open();\n    blank.opener = null;\n    blank.location.href = link;\n  } else {\n    window.open(link, target);\n  }\n}\nexport { getTextRect } from '../legacy/getTextRect';","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/util/format.js"],"names":["zrUtil","parseDate","isNumeric","numericToNumber","format","timeFormat","pad","deprecateReplaceLog","addCommas","x","isString","parts","split","replace","length","toCamelCase","str","upperCaseFirst","toLowerCase","match","group1","toUpperCase","charAt","slice","normalizeCssArray","replaceReg","replaceMap","encodeHTML","source","c","makeValueReadable","value","valueType","useUTC","USER_READABLE_DEFUALT_TIME_PATTERN","stringToUserReadable","trim","isNumberUserReadable","num","isNaN","isFinite","isTypeTime","isValueDate","Date","date","isStringSafe","isNumber","numericResult","TPL_VAR_ALIAS","wrapVar","varName","seriesIdx","formatTpl","tpl","paramsList","encode","isArray","seriesLen","$vars","i","alias","k","val","formatTplSimple","param","each","key","getTooltipMarker","inOpt","extraCssText","opt","color","type","renderMode","markerId","content","style","width","height","borderRadius","backgroundColor","formatTime","isUTC","process","env","NODE_ENV","utc","y","M","d","h","m","s","S","capitalFirst","substr","convertToColorString","defaultColor","isObject","colorStops","truncateText","windowOpen","link","target","blank","window","open","opener","location","href","getTextRect"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { parseDate, isNumeric, numericToNumber } from './number';\nimport { format as timeFormat, pad } from './time';\nimport { deprecateReplaceLog } from './log';\n/**\n * Add a comma each three digit.\n */\n\nexport function addCommas(x) {\n  if (!isNumeric(x)) {\n    return zrUtil.isString(x) ? x : '-';\n  }\n\n  var parts = (x + '').split('.');\n  return parts[0].replace(/(\\d{1,3})(?=(?:\\d{3})+(?!\\d))/g, '$1,') + (parts.length > 1 ? '.' + parts[1] : '');\n}\nexport function toCamelCase(str, upperCaseFirst) {\n  str = (str || '').toLowerCase().replace(/-(.)/g, function (match, group1) {\n    return group1.toUpperCase();\n  });\n\n  if (upperCaseFirst && str) {\n    str = str.charAt(0).toUpperCase() + str.slice(1);\n  }\n\n  return str;\n}\nexport var normalizeCssArray = zrUtil.normalizeCssArray;\nvar replaceReg = /([&<>\"'])/g;\nvar replaceMap = {\n  '&': '&amp;',\n  '<': '&lt;',\n  '>': '&gt;',\n  '\"': '&quot;',\n  '\\'': '&#39;'\n};\nexport function encodeHTML(source) {\n  return source == null ? '' : (source + '').replace(replaceReg, function (str, c) {\n    return replaceMap[c];\n  });\n}\n/**\n * Make value user readable for tooltip and label.\n * \"User readable\":\n *     Try to not print programmer-specific text like NaN, Infinity, null, undefined.\n *     Avoid to display an empty string, which users can not recognize there is\n *     a value and it might look like a bug.\n */\n\nexport function makeValueReadable(value, valueType, useUTC) {\n  var USER_READABLE_DEFUALT_TIME_PATTERN = '{yyyy}-{MM}-{dd} {hh}:{mm}:{ss}';\n\n  function stringToUserReadable(str) {\n    return str && zrUtil.trim(str) ? str : '-';\n  }\n\n  function isNumberUserReadable(num) {\n    return !!(num != null && !isNaN(num) && isFinite(num));\n  }\n\n  var isTypeTime = valueType === 'time';\n  var isValueDate = value instanceof Date;\n\n  if (isTypeTime || isValueDate) {\n    var date = isTypeTime ? parseDate(value) : value;\n\n    if (!isNaN(+date)) {\n      return timeFormat(date, USER_READABLE_DEFUALT_TIME_PATTERN, useUTC);\n    } else if (isValueDate) {\n      return '-';\n    } // In other cases, continue to try to display the value in the following code.\n\n  }\n\n  if (valueType === 'ordinal') {\n    return zrUtil.isStringSafe(value) ? stringToUserReadable(value) : zrUtil.isNumber(value) ? isNumberUserReadable(value) ? value + '' : '-' : '-';\n  } // By default.\n\n\n  var numericResult = numericToNumber(value);\n  return isNumberUserReadable(numericResult) ? addCommas(numericResult) : zrUtil.isStringSafe(value) ? stringToUserReadable(value) : '-';\n}\nvar TPL_VAR_ALIAS = ['a', 'b', 'c', 'd', 'e', 'f', 'g'];\n\nvar wrapVar = function (varName, seriesIdx) {\n  return '{' + varName + (seriesIdx == null ? '' : seriesIdx) + '}';\n};\n/**\n * Template formatter\n * @param {Array.<Object>|Object} paramsList\n */\n\n\nexport function formatTpl(tpl, paramsList, encode) {\n  if (!zrUtil.isArray(paramsList)) {\n    paramsList = [paramsList];\n  }\n\n  var seriesLen = paramsList.length;\n\n  if (!seriesLen) {\n    return '';\n  }\n\n  var $vars = paramsList[0].$vars || [];\n\n  for (var i = 0; i < $vars.length; i++) {\n    var alias = TPL_VAR_ALIAS[i];\n    tpl = tpl.replace(wrapVar(alias), wrapVar(alias, 0));\n  }\n\n  for (var seriesIdx = 0; seriesIdx < seriesLen; seriesIdx++) {\n    for (var k = 0; k < $vars.length; k++) {\n      var val = paramsList[seriesIdx][$vars[k]];\n      tpl = tpl.replace(wrapVar(TPL_VAR_ALIAS[k], seriesIdx), encode ? encodeHTML(val) : val);\n    }\n  }\n\n  return tpl;\n}\n/**\n * simple Template formatter\n */\n\nexport function formatTplSimple(tpl, param, encode) {\n  zrUtil.each(param, function (value, key) {\n    tpl = tpl.replace('{' + key + '}', encode ? encodeHTML(value) : value);\n  });\n  return tpl;\n}\nexport function getTooltipMarker(inOpt, extraCssText) {\n  var opt = zrUtil.isString(inOpt) ? {\n    color: inOpt,\n    extraCssText: extraCssText\n  } : inOpt || {};\n  var color = opt.color;\n  var type = opt.type;\n  extraCssText = opt.extraCssText;\n  var renderMode = opt.renderMode || 'html';\n\n  if (!color) {\n    return '';\n  }\n\n  if (renderMode === 'html') {\n    return type === 'subItem' ? '<span style=\"display:inline-block;vertical-align:middle;margin-right:8px;margin-left:3px;' + 'border-radius:4px;width:4px;height:4px;background-color:' // Only support string\n    + encodeHTML(color) + ';' + (extraCssText || '') + '\"></span>' : '<span style=\"display:inline-block;margin-right:4px;' + 'border-radius:10px;width:10px;height:10px;background-color:' + encodeHTML(color) + ';' + (extraCssText || '') + '\"></span>';\n  } else {\n    // Should better not to auto generate style name by auto-increment number here.\n    // Because this util is usually called in tooltip formatter, which is probably\n    // called repeatly when mouse move and the auto-increment number increases fast.\n    // Users can make their own style name by theirselves, make it unique and readable.\n    var markerId = opt.markerId || 'markerX';\n    return {\n      renderMode: renderMode,\n      content: '{' + markerId + '|}  ',\n      style: type === 'subItem' ? {\n        width: 4,\n        height: 4,\n        borderRadius: 2,\n        backgroundColor: color\n      } : {\n        width: 10,\n        height: 10,\n        borderRadius: 5,\n        backgroundColor: color\n      }\n    };\n  }\n}\n/**\n * @deprecated Use `time/format` instead.\n * ISO Date format\n * @param {string} tpl\n * @param {number} value\n * @param {boolean} [isUTC=false] Default in local time.\n *           see `module:echarts/scale/Time`\n *           and `module:echarts/util/number#parseDate`.\n * @inner\n */\n\nexport function formatTime(tpl, value, isUTC) {\n  if (process.env.NODE_ENV !== 'production') {\n    deprecateReplaceLog('echarts.format.formatTime', 'echarts.time.format');\n  }\n\n  if (tpl === 'week' || tpl === 'month' || tpl === 'quarter' || tpl === 'half-year' || tpl === 'year') {\n    tpl = 'MM-dd\\nyyyy';\n  }\n\n  var date = parseDate(value);\n  var utc = isUTC ? 'UTC' : '';\n  var y = date['get' + utc + 'FullYear']();\n  var M = date['get' + utc + 'Month']() + 1;\n  var d = date['get' + utc + 'Date']();\n  var h = date['get' + utc + 'Hours']();\n  var m = date['get' + utc + 'Minutes']();\n  var s = date['get' + utc + 'Seconds']();\n  var S = date['get' + utc + 'Milliseconds']();\n  tpl = tpl.replace('MM', pad(M, 2)).replace('M', M).replace('yyyy', y).replace('yy', y % 100 + '').replace('dd', pad(d, 2)).replace('d', d).replace('hh', pad(h, 2)).replace('h', h).replace('mm', pad(m, 2)).replace('m', m).replace('ss', pad(s, 2)).replace('s', s).replace('SSS', pad(S, 3));\n  return tpl;\n}\n/**\n * Capital first\n * @param {string} str\n * @return {string}\n */\n\nexport function capitalFirst(str) {\n  return str ? str.charAt(0).toUpperCase() + str.substr(1) : str;\n}\n/**\n * @return Never be null/undefined.\n */\n\nexport function convertToColorString(color, defaultColor) {\n  defaultColor = defaultColor || 'transparent';\n  return zrUtil.isString(color) ? color : zrUtil.isObject(color) ? color.colorStops && (color.colorStops[0] || {}).color || defaultColor : defaultColor;\n}\nexport { truncateText } from 'zrender/lib/graphic/helper/parseText';\n/**\n * open new tab\n * @param link url\n * @param target blank or self\n */\n\nexport function windowOpen(link, target) {\n  /* global window */\n  if (target === '_blank' || target === 'blank') {\n    var blank = window.open();\n    blank.opener = null;\n    blank.location.href = link;\n  } else {\n    window.open(link, target);\n  }\n}\nexport { getTextRect } from '../legacy/getTextRect';"]},"metadata":{},"sourceType":"module"}