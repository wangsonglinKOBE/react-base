{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport SymbolDraw from '../helper/SymbolDraw';\nimport LargeSymbolDraw from '../helper/LargeSymbolDraw';\nimport pointsLayout from '../../layout/points';\nimport ChartView from '../../view/Chart';\n\nvar ScatterView =\n/** @class */\nfunction (_super) {\n  __extends(ScatterView, _super);\n\n  function ScatterView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = ScatterView.type;\n    return _this;\n  }\n\n  ScatterView.prototype.render = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    var symbolDraw = this._updateSymbolDraw(data, seriesModel);\n\n    symbolDraw.updateData(data, {\n      // TODO\n      // If this parameter should be a shape or a bounding volume\n      // shape will be more general.\n      // But bounding volume like bounding rect will be much faster in the contain calculation\n      clipShape: this._getClipShape(seriesModel)\n    });\n    this._finished = true;\n  };\n\n  ScatterView.prototype.incrementalPrepareRender = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    var symbolDraw = this._updateSymbolDraw(data, seriesModel);\n\n    symbolDraw.incrementalPrepareUpdate(data);\n    this._finished = false;\n  };\n\n  ScatterView.prototype.incrementalRender = function (taskParams, seriesModel, ecModel) {\n    this._symbolDraw.incrementalUpdate(taskParams, seriesModel.getData(), {\n      clipShape: this._getClipShape(seriesModel)\n    });\n\n    this._finished = taskParams.end === seriesModel.getData().count();\n  };\n\n  ScatterView.prototype.updateTransform = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData(); // Must mark group dirty and make sure the incremental layer will be cleared\n    // PENDING\n\n    this.group.dirty();\n\n    if (!this._finished || data.count() > 1e4 || !this._symbolDraw.isPersistent()) {\n      return {\n        update: true\n      };\n    } else {\n      var res = pointsLayout('').reset(seriesModel, ecModel, api);\n\n      if (res.progress) {\n        res.progress({\n          start: 0,\n          end: data.count(),\n          count: data.count()\n        }, data);\n      }\n\n      this._symbolDraw.updateLayout(data);\n    }\n  };\n\n  ScatterView.prototype._getClipShape = function (seriesModel) {\n    var coordSys = seriesModel.coordinateSystem;\n    var clipArea = coordSys && coordSys.getArea && coordSys.getArea();\n    return seriesModel.get('clip', true) ? clipArea : null;\n  };\n\n  ScatterView.prototype._updateSymbolDraw = function (data, seriesModel) {\n    var symbolDraw = this._symbolDraw;\n    var pipelineContext = seriesModel.pipelineContext;\n    var isLargeDraw = pipelineContext.large;\n\n    if (!symbolDraw || isLargeDraw !== this._isLargeDraw) {\n      symbolDraw && symbolDraw.remove();\n      symbolDraw = this._symbolDraw = isLargeDraw ? new LargeSymbolDraw() : new SymbolDraw();\n      this._isLargeDraw = isLargeDraw;\n      this.group.removeAll();\n    }\n\n    this.group.add(symbolDraw.group);\n    return symbolDraw;\n  };\n\n  ScatterView.prototype.remove = function (ecModel, api) {\n    this._symbolDraw && this._symbolDraw.remove(true);\n    this._symbolDraw = null;\n  };\n\n  ScatterView.prototype.dispose = function () {};\n\n  ScatterView.type = 'scatter';\n  return ScatterView;\n}(ChartView);\n\nexport default ScatterView;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/chart/scatter/ScatterView.js"],"names":["__extends","SymbolDraw","LargeSymbolDraw","pointsLayout","ChartView","ScatterView","_super","_this","apply","arguments","type","prototype","render","seriesModel","ecModel","api","data","getData","symbolDraw","_updateSymbolDraw","updateData","clipShape","_getClipShape","_finished","incrementalPrepareRender","incrementalPrepareUpdate","incrementalRender","taskParams","_symbolDraw","incrementalUpdate","end","count","updateTransform","group","dirty","isPersistent","update","res","reset","progress","start","updateLayout","coordSys","coordinateSystem","clipArea","getArea","get","pipelineContext","isLargeDraw","large","_isLargeDraw","remove","removeAll","add","dispose"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport SymbolDraw from '../helper/SymbolDraw';\nimport LargeSymbolDraw from '../helper/LargeSymbolDraw';\nimport pointsLayout from '../../layout/points';\nimport ChartView from '../../view/Chart';\n\nvar ScatterView =\n/** @class */\nfunction (_super) {\n  __extends(ScatterView, _super);\n\n  function ScatterView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = ScatterView.type;\n    return _this;\n  }\n\n  ScatterView.prototype.render = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    var symbolDraw = this._updateSymbolDraw(data, seriesModel);\n\n    symbolDraw.updateData(data, {\n      // TODO\n      // If this parameter should be a shape or a bounding volume\n      // shape will be more general.\n      // But bounding volume like bounding rect will be much faster in the contain calculation\n      clipShape: this._getClipShape(seriesModel)\n    });\n    this._finished = true;\n  };\n\n  ScatterView.prototype.incrementalPrepareRender = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n\n    var symbolDraw = this._updateSymbolDraw(data, seriesModel);\n\n    symbolDraw.incrementalPrepareUpdate(data);\n    this._finished = false;\n  };\n\n  ScatterView.prototype.incrementalRender = function (taskParams, seriesModel, ecModel) {\n    this._symbolDraw.incrementalUpdate(taskParams, seriesModel.getData(), {\n      clipShape: this._getClipShape(seriesModel)\n    });\n\n    this._finished = taskParams.end === seriesModel.getData().count();\n  };\n\n  ScatterView.prototype.updateTransform = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData(); // Must mark group dirty and make sure the incremental layer will be cleared\n    // PENDING\n\n    this.group.dirty();\n\n    if (!this._finished || data.count() > 1e4 || !this._symbolDraw.isPersistent()) {\n      return {\n        update: true\n      };\n    } else {\n      var res = pointsLayout('').reset(seriesModel, ecModel, api);\n\n      if (res.progress) {\n        res.progress({\n          start: 0,\n          end: data.count(),\n          count: data.count()\n        }, data);\n      }\n\n      this._symbolDraw.updateLayout(data);\n    }\n  };\n\n  ScatterView.prototype._getClipShape = function (seriesModel) {\n    var coordSys = seriesModel.coordinateSystem;\n    var clipArea = coordSys && coordSys.getArea && coordSys.getArea();\n    return seriesModel.get('clip', true) ? clipArea : null;\n  };\n\n  ScatterView.prototype._updateSymbolDraw = function (data, seriesModel) {\n    var symbolDraw = this._symbolDraw;\n    var pipelineContext = seriesModel.pipelineContext;\n    var isLargeDraw = pipelineContext.large;\n\n    if (!symbolDraw || isLargeDraw !== this._isLargeDraw) {\n      symbolDraw && symbolDraw.remove();\n      symbolDraw = this._symbolDraw = isLargeDraw ? new LargeSymbolDraw() : new SymbolDraw();\n      this._isLargeDraw = isLargeDraw;\n      this.group.removeAll();\n    }\n\n    this.group.add(symbolDraw.group);\n    return symbolDraw;\n  };\n\n  ScatterView.prototype.remove = function (ecModel, api) {\n    this._symbolDraw && this._symbolDraw.remove(true);\n    this._symbolDraw = null;\n  };\n\n  ScatterView.prototype.dispose = function () {};\n\n  ScatterView.type = 'scatter';\n  return ScatterView;\n}(ChartView);\n\nexport default ScatterView;"]},"metadata":{},"sourceType":"module"}