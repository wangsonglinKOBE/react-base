{"ast":null,"code":"import _classCallCheck from\"D:/\\u684C\\u9762/react\\u57FA\\u7840\\u539F\\u7406\\u5206\\u6790/react_extension/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import _createClass from\"D:/\\u684C\\u9762/react\\u57FA\\u7840\\u539F\\u7406\\u5206\\u6790/react_extension/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";import _inherits from\"D:/\\u684C\\u9762/react\\u57FA\\u7840\\u539F\\u7406\\u5206\\u6790/react_extension/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";import _createSuper from\"D:/\\u684C\\u9762/react\\u57FA\\u7840\\u539F\\u7406\\u5206\\u6790/react_extension/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createSuper\";import React,{Component}from'react';import Child from'./Child';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";var Parent=/*#__PURE__*/function(_Component){_inherits(Parent,_Component);var _super=_createSuper(Parent);function Parent(){var _this;_classCallCheck(this,Parent);for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}_this=_super.call.apply(_super,[this].concat(args));_this.state={hasError:''//用于标识子组件是否产生错误\n// 当子组件产生错误，则携带错误调用下面的钩子函数，\n// 钩子函数返回一个新的状态对象，新的状态对象直接更新状态\n};return _this;}_createClass(Parent,[{key:\"componentDidCatch\",value:// 当子组件在渲染过程中出现错误则会调用该钩子函数\nfunction componentDidCatch(){console.log('渲染组件时出错');}},{key:\"render\",value:function render(){return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"\\u6211\\u662FParent\\u7EC4\\u4EF6\"}),this.state.hasError?/*#__PURE__*/_jsx(\"h4\",{children:\"\\u7F51\\u7EDC\\u7E41\\u5FD9\\uFF0C\\u8BF7\\u7A0D\\u540E\\u518D\\u8BD5\"}):/*#__PURE__*/_jsx(Child,{})]});}}],[{key:\"getDerivedStateFromError\",value:// 当Parent组件的子组件出现报错则会调用该钩子函数并携带错误信息\nfunction getDerivedStateFromError(error){console.log(error);// 注意这里返回一个状态对象\nreturn{hasError:error};}}]);return Parent;}(Component);export{Parent as default};","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/src/components/9_ErrorBoundary错误边界/Parent.jsx"],"names":["React","Component","Child","Parent","state","hasError","console","log","error"],"mappings":"gvBAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,C,2FAEqBC,CAAAA,M,2TAEjBC,K,CAAQ,CACJC,QAAQ,CAAE,EAAG;AACb;AACA;AAHI,C,mEAaR;AACA,4BAAoB,CAChBC,OAAO,CAACC,GAAR,CAAY,SAAZ,EACH,C,sBAED,iBAAS,CACL,mBACI,oCACI,sDADJ,CAGM,KAAKH,KAAL,CAAWC,QAAX,cAAsB,oFAAtB,cAA4C,KAAC,KAAD,IAHlD,GADJ,CAOH,C,0CApBD;AACA,kCAAgCG,KAAhC,CAAuC,CACnCF,OAAO,CAACC,GAAR,CAAYC,KAAZ,EACA;AACA,MAAO,CAACH,QAAQ,CAAEG,KAAX,CAAP,CACH,C,oBAb+BP,S,SAAfE,M","sourcesContent":["import React, { Component } from 'react'\r\nimport Child from './Child'\r\n\r\nexport default class Parent extends Component {\r\n\r\n    state = {\r\n        hasError: '' //用于标识子组件是否产生错误\r\n        // 当子组件产生错误，则携带错误调用下面的钩子函数，\r\n        // 钩子函数返回一个新的状态对象，新的状态对象直接更新状态\r\n    }\r\n\r\n    // 当Parent组件的子组件出现报错则会调用该钩子函数并携带错误信息\r\n    static getDerivedStateFromError(error) {\r\n        console.log(error)\r\n        // 注意这里返回一个状态对象\r\n        return {hasError: error}\r\n    }\r\n\r\n    // 当子组件在渲染过程中出现错误则会调用该钩子函数\r\n    componentDidCatch() {\r\n        console.log('渲染组件时出错')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>我是Parent组件</h2>\r\n                {/* 这里判断一下错误状态是否为真 */}\r\n                { this.state.hasError ? <h4>网络繁忙，请稍后再试</h4> : <Child /> }\r\n            </div>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}