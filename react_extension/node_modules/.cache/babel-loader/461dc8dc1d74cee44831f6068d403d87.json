{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport createSeriesDataSimply from './createSeriesDataSimply';\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { getDimensionTypeByAxis } from '../../data/helper/dimensionHelper';\nimport { makeSeriesEncodeForAxisCoordSys } from '../../data/helper/sourceHelper';\n\nvar WhiskerBoxCommonMixin =\n/** @class */\nfunction () {\n  function WhiskerBoxCommonMixin() {}\n  /**\n   * @override\n   */\n\n\n  WhiskerBoxCommonMixin.prototype.getInitialData = function (option, ecModel) {\n    // When both types of xAxis and yAxis are 'value', layout is\n    // needed to be specified by user. Otherwise, layout can be\n    // judged by which axis is category.\n    var ordinalMeta;\n    var xAxisModel = ecModel.getComponent('xAxis', this.get('xAxisIndex'));\n    var yAxisModel = ecModel.getComponent('yAxis', this.get('yAxisIndex'));\n    var xAxisType = xAxisModel.get('type');\n    var yAxisType = yAxisModel.get('type');\n    var addOrdinal; // FIXME\n    // Consider time axis.\n\n    if (xAxisType === 'category') {\n      option.layout = 'horizontal';\n      ordinalMeta = xAxisModel.getOrdinalMeta();\n      addOrdinal = true;\n    } else if (yAxisType === 'category') {\n      option.layout = 'vertical';\n      ordinalMeta = yAxisModel.getOrdinalMeta();\n      addOrdinal = true;\n    } else {\n      option.layout = option.layout || 'horizontal';\n    }\n\n    var coordDims = ['x', 'y'];\n    var baseAxisDimIndex = option.layout === 'horizontal' ? 0 : 1;\n    var baseAxisDim = this._baseAxisDim = coordDims[baseAxisDimIndex];\n    var otherAxisDim = coordDims[1 - baseAxisDimIndex];\n    var axisModels = [xAxisModel, yAxisModel];\n    var baseAxisType = axisModels[baseAxisDimIndex].get('type');\n    var otherAxisType = axisModels[1 - baseAxisDimIndex].get('type');\n    var data = option.data; // Clone a new data for next setOption({}) usage.\n    // Avoid modifying current data will affect further update.\n\n    if (data && addOrdinal) {\n      var newOptionData_1 = [];\n      zrUtil.each(data, function (item, index) {\n        var newItem;\n\n        if (zrUtil.isArray(item)) {\n          newItem = item.slice(); // Modify current using data.\n\n          item.unshift(index);\n        } else if (zrUtil.isArray(item.value)) {\n          newItem = zrUtil.extend({}, item);\n          newItem.value = newItem.value.slice(); // Modify current using data.\n\n          item.value.unshift(index);\n        } else {\n          newItem = item;\n        }\n\n        newOptionData_1.push(newItem);\n      });\n      option.data = newOptionData_1;\n    }\n\n    var defaultValueDimensions = this.defaultValueDimensions;\n    var coordDimensions = [{\n      name: baseAxisDim,\n      type: getDimensionTypeByAxis(baseAxisType),\n      ordinalMeta: ordinalMeta,\n      otherDims: {\n        tooltip: false,\n        itemName: 0\n      },\n      dimsDef: ['base']\n    }, {\n      name: otherAxisDim,\n      type: getDimensionTypeByAxis(otherAxisType),\n      dimsDef: defaultValueDimensions.slice()\n    }];\n    return createSeriesDataSimply(this, {\n      coordDimensions: coordDimensions,\n      dimensionsCount: defaultValueDimensions.length + 1,\n      encodeDefaulter: zrUtil.curry(makeSeriesEncodeForAxisCoordSys, coordDimensions, this)\n    });\n  };\n  /**\n   * If horizontal, base axis is x, otherwise y.\n   * @override\n   */\n\n\n  WhiskerBoxCommonMixin.prototype.getBaseAxis = function () {\n    var dim = this._baseAxisDim;\n    return this.ecModel.getComponent(dim + 'Axis', this.get(dim + 'AxisIndex')).axis;\n  };\n\n  return WhiskerBoxCommonMixin;\n}();\n\n;\nexport { WhiskerBoxCommonMixin };","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/chart/helper/whiskerBoxCommon.js"],"names":["createSeriesDataSimply","zrUtil","getDimensionTypeByAxis","makeSeriesEncodeForAxisCoordSys","WhiskerBoxCommonMixin","prototype","getInitialData","option","ecModel","ordinalMeta","xAxisModel","getComponent","get","yAxisModel","xAxisType","yAxisType","addOrdinal","layout","getOrdinalMeta","coordDims","baseAxisDimIndex","baseAxisDim","_baseAxisDim","otherAxisDim","axisModels","baseAxisType","otherAxisType","data","newOptionData_1","each","item","index","newItem","isArray","slice","unshift","value","extend","push","defaultValueDimensions","coordDimensions","name","type","otherDims","tooltip","itemName","dimsDef","dimensionsCount","length","encodeDefaulter","curry","getBaseAxis","dim","axis"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,sBAAP,MAAmC,0BAAnC;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,SAASC,sBAAT,QAAuC,mCAAvC;AACA,SAASC,+BAAT,QAAgD,gCAAhD;;AAEA,IAAIC,qBAAqB;AACzB;AACA,YAAY;AACV,WAASA,qBAAT,GAAiC,CAAE;AACnC;AACF;AACA;;;AAGEA,EAAAA,qBAAqB,CAACC,SAAtB,CAAgCC,cAAhC,GAAiD,UAAUC,MAAV,EAAkBC,OAAlB,EAA2B;AAC1E;AACA;AACA;AACA,QAAIC,WAAJ;AACA,QAAIC,UAAU,GAAGF,OAAO,CAACG,YAAR,CAAqB,OAArB,EAA8B,KAAKC,GAAL,CAAS,YAAT,CAA9B,CAAjB;AACA,QAAIC,UAAU,GAAGL,OAAO,CAACG,YAAR,CAAqB,OAArB,EAA8B,KAAKC,GAAL,CAAS,YAAT,CAA9B,CAAjB;AACA,QAAIE,SAAS,GAAGJ,UAAU,CAACE,GAAX,CAAe,MAAf,CAAhB;AACA,QAAIG,SAAS,GAAGF,UAAU,CAACD,GAAX,CAAe,MAAf,CAAhB;AACA,QAAII,UAAJ,CAT0E,CAS1D;AAChB;;AAEA,QAAIF,SAAS,KAAK,UAAlB,EAA8B;AAC5BP,MAAAA,MAAM,CAACU,MAAP,GAAgB,YAAhB;AACAR,MAAAA,WAAW,GAAGC,UAAU,CAACQ,cAAX,EAAd;AACAF,MAAAA,UAAU,GAAG,IAAb;AACD,KAJD,MAIO,IAAID,SAAS,KAAK,UAAlB,EAA8B;AACnCR,MAAAA,MAAM,CAACU,MAAP,GAAgB,UAAhB;AACAR,MAAAA,WAAW,GAAGI,UAAU,CAACK,cAAX,EAAd;AACAF,MAAAA,UAAU,GAAG,IAAb;AACD,KAJM,MAIA;AACLT,MAAAA,MAAM,CAACU,MAAP,GAAgBV,MAAM,CAACU,MAAP,IAAiB,YAAjC;AACD;;AAED,QAAIE,SAAS,GAAG,CAAC,GAAD,EAAM,GAAN,CAAhB;AACA,QAAIC,gBAAgB,GAAGb,MAAM,CAACU,MAAP,KAAkB,YAAlB,GAAiC,CAAjC,GAAqC,CAA5D;AACA,QAAII,WAAW,GAAG,KAAKC,YAAL,GAAoBH,SAAS,CAACC,gBAAD,CAA/C;AACA,QAAIG,YAAY,GAAGJ,SAAS,CAAC,IAAIC,gBAAL,CAA5B;AACA,QAAII,UAAU,GAAG,CAACd,UAAD,EAAaG,UAAb,CAAjB;AACA,QAAIY,YAAY,GAAGD,UAAU,CAACJ,gBAAD,CAAV,CAA6BR,GAA7B,CAAiC,MAAjC,CAAnB;AACA,QAAIc,aAAa,GAAGF,UAAU,CAAC,IAAIJ,gBAAL,CAAV,CAAiCR,GAAjC,CAAqC,MAArC,CAApB;AACA,QAAIe,IAAI,GAAGpB,MAAM,CAACoB,IAAlB,CA/B0E,CA+BlD;AACxB;;AAEA,QAAIA,IAAI,IAAIX,UAAZ,EAAwB;AACtB,UAAIY,eAAe,GAAG,EAAtB;AACA3B,MAAAA,MAAM,CAAC4B,IAAP,CAAYF,IAAZ,EAAkB,UAAUG,IAAV,EAAgBC,KAAhB,EAAuB;AACvC,YAAIC,OAAJ;;AAEA,YAAI/B,MAAM,CAACgC,OAAP,CAAeH,IAAf,CAAJ,EAA0B;AACxBE,UAAAA,OAAO,GAAGF,IAAI,CAACI,KAAL,EAAV,CADwB,CACA;;AAExBJ,UAAAA,IAAI,CAACK,OAAL,CAAaJ,KAAb;AACD,SAJD,MAIO,IAAI9B,MAAM,CAACgC,OAAP,CAAeH,IAAI,CAACM,KAApB,CAAJ,EAAgC;AACrCJ,UAAAA,OAAO,GAAG/B,MAAM,CAACoC,MAAP,CAAc,EAAd,EAAkBP,IAAlB,CAAV;AACAE,UAAAA,OAAO,CAACI,KAAR,GAAgBJ,OAAO,CAACI,KAAR,CAAcF,KAAd,EAAhB,CAFqC,CAEE;;AAEvCJ,UAAAA,IAAI,CAACM,KAAL,CAAWD,OAAX,CAAmBJ,KAAnB;AACD,SALM,MAKA;AACLC,UAAAA,OAAO,GAAGF,IAAV;AACD;;AAEDF,QAAAA,eAAe,CAACU,IAAhB,CAAqBN,OAArB;AACD,OAjBD;AAkBAzB,MAAAA,MAAM,CAACoB,IAAP,GAAcC,eAAd;AACD;;AAED,QAAIW,sBAAsB,GAAG,KAAKA,sBAAlC;AACA,QAAIC,eAAe,GAAG,CAAC;AACrBC,MAAAA,IAAI,EAAEpB,WADe;AAErBqB,MAAAA,IAAI,EAAExC,sBAAsB,CAACuB,YAAD,CAFP;AAGrBhB,MAAAA,WAAW,EAAEA,WAHQ;AAIrBkC,MAAAA,SAAS,EAAE;AACTC,QAAAA,OAAO,EAAE,KADA;AAETC,QAAAA,QAAQ,EAAE;AAFD,OAJU;AAQrBC,MAAAA,OAAO,EAAE,CAAC,MAAD;AARY,KAAD,EASnB;AACDL,MAAAA,IAAI,EAAElB,YADL;AAEDmB,MAAAA,IAAI,EAAExC,sBAAsB,CAACwB,aAAD,CAF3B;AAGDoB,MAAAA,OAAO,EAAEP,sBAAsB,CAACL,KAAvB;AAHR,KATmB,CAAtB;AAcA,WAAOlC,sBAAsB,CAAC,IAAD,EAAO;AAClCwC,MAAAA,eAAe,EAAEA,eADiB;AAElCO,MAAAA,eAAe,EAAER,sBAAsB,CAACS,MAAvB,GAAgC,CAFf;AAGlCC,MAAAA,eAAe,EAAEhD,MAAM,CAACiD,KAAP,CAAa/C,+BAAb,EAA8CqC,eAA9C,EAA+D,IAA/D;AAHiB,KAAP,CAA7B;AAKD,GA7ED;AA8EA;AACF;AACA;AACA;;;AAGEpC,EAAAA,qBAAqB,CAACC,SAAtB,CAAgC8C,WAAhC,GAA8C,YAAY;AACxD,QAAIC,GAAG,GAAG,KAAK9B,YAAf;AACA,WAAO,KAAKd,OAAL,CAAaG,YAAb,CAA0ByC,GAAG,GAAG,MAAhC,EAAwC,KAAKxC,GAAL,CAASwC,GAAG,GAAG,WAAf,CAAxC,EAAqEC,IAA5E;AACD,GAHD;;AAKA,SAAOjD,qBAAP;AACD,CAjGD,EAFA;;AAqGA;AACA,SAASA,qBAAT","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport createSeriesDataSimply from './createSeriesDataSimply';\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { getDimensionTypeByAxis } from '../../data/helper/dimensionHelper';\nimport { makeSeriesEncodeForAxisCoordSys } from '../../data/helper/sourceHelper';\n\nvar WhiskerBoxCommonMixin =\n/** @class */\nfunction () {\n  function WhiskerBoxCommonMixin() {}\n  /**\n   * @override\n   */\n\n\n  WhiskerBoxCommonMixin.prototype.getInitialData = function (option, ecModel) {\n    // When both types of xAxis and yAxis are 'value', layout is\n    // needed to be specified by user. Otherwise, layout can be\n    // judged by which axis is category.\n    var ordinalMeta;\n    var xAxisModel = ecModel.getComponent('xAxis', this.get('xAxisIndex'));\n    var yAxisModel = ecModel.getComponent('yAxis', this.get('yAxisIndex'));\n    var xAxisType = xAxisModel.get('type');\n    var yAxisType = yAxisModel.get('type');\n    var addOrdinal; // FIXME\n    // Consider time axis.\n\n    if (xAxisType === 'category') {\n      option.layout = 'horizontal';\n      ordinalMeta = xAxisModel.getOrdinalMeta();\n      addOrdinal = true;\n    } else if (yAxisType === 'category') {\n      option.layout = 'vertical';\n      ordinalMeta = yAxisModel.getOrdinalMeta();\n      addOrdinal = true;\n    } else {\n      option.layout = option.layout || 'horizontal';\n    }\n\n    var coordDims = ['x', 'y'];\n    var baseAxisDimIndex = option.layout === 'horizontal' ? 0 : 1;\n    var baseAxisDim = this._baseAxisDim = coordDims[baseAxisDimIndex];\n    var otherAxisDim = coordDims[1 - baseAxisDimIndex];\n    var axisModels = [xAxisModel, yAxisModel];\n    var baseAxisType = axisModels[baseAxisDimIndex].get('type');\n    var otherAxisType = axisModels[1 - baseAxisDimIndex].get('type');\n    var data = option.data; // Clone a new data for next setOption({}) usage.\n    // Avoid modifying current data will affect further update.\n\n    if (data && addOrdinal) {\n      var newOptionData_1 = [];\n      zrUtil.each(data, function (item, index) {\n        var newItem;\n\n        if (zrUtil.isArray(item)) {\n          newItem = item.slice(); // Modify current using data.\n\n          item.unshift(index);\n        } else if (zrUtil.isArray(item.value)) {\n          newItem = zrUtil.extend({}, item);\n          newItem.value = newItem.value.slice(); // Modify current using data.\n\n          item.value.unshift(index);\n        } else {\n          newItem = item;\n        }\n\n        newOptionData_1.push(newItem);\n      });\n      option.data = newOptionData_1;\n    }\n\n    var defaultValueDimensions = this.defaultValueDimensions;\n    var coordDimensions = [{\n      name: baseAxisDim,\n      type: getDimensionTypeByAxis(baseAxisType),\n      ordinalMeta: ordinalMeta,\n      otherDims: {\n        tooltip: false,\n        itemName: 0\n      },\n      dimsDef: ['base']\n    }, {\n      name: otherAxisDim,\n      type: getDimensionTypeByAxis(otherAxisType),\n      dimsDef: defaultValueDimensions.slice()\n    }];\n    return createSeriesDataSimply(this, {\n      coordDimensions: coordDimensions,\n      dimensionsCount: defaultValueDimensions.length + 1,\n      encodeDefaulter: zrUtil.curry(makeSeriesEncodeForAxisCoordSys, coordDimensions, this)\n    });\n  };\n  /**\n   * If horizontal, base axis is x, otherwise y.\n   * @override\n   */\n\n\n  WhiskerBoxCommonMixin.prototype.getBaseAxis = function () {\n    var dim = this._baseAxisDim;\n    return this.ecModel.getComponent(dim + 'Axis', this.get(dim + 'AxisIndex')).axis;\n  };\n\n  return WhiskerBoxCommonMixin;\n}();\n\n;\nexport { WhiskerBoxCommonMixin };"]},"metadata":{},"sourceType":"module"}