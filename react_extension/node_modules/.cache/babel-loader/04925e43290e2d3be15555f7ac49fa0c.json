{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport VisualMapping from '../../visual/VisualMapping';\nimport { each, extend, isArray } from 'zrender/lib/core/util';\nimport { modifyHSL, modifyAlpha } from 'zrender/lib/tool/color';\nimport { makeInner } from '../../util/model';\nvar ITEM_STYLE_NORMAL = 'itemStyle';\nvar inner = makeInner();\nexport default {\n  seriesType: 'treemap',\n  reset: function (seriesModel) {\n    var tree = seriesModel.getData().tree;\n    var root = tree.root;\n\n    if (root.isRemoved()) {\n      return;\n    }\n\n    travelTree(root, // Visual should calculate from tree root but not view root.\n    {}, seriesModel.getViewRoot().getAncestors(), seriesModel);\n  }\n};\n\nfunction travelTree(node, designatedVisual, viewRootAncestors, seriesModel) {\n  var nodeModel = node.getModel();\n  var nodeLayout = node.getLayout();\n  var data = node.hostTree.data; // Optimize\n\n  if (!nodeLayout || nodeLayout.invisible || !nodeLayout.isInView) {\n    return;\n  }\n\n  var nodeItemStyleModel = nodeModel.getModel(ITEM_STYLE_NORMAL);\n  var visuals = buildVisuals(nodeItemStyleModel, designatedVisual, seriesModel);\n  var existsStyle = data.ensureUniqueItemVisual(node.dataIndex, 'style'); // calculate border color\n\n  var borderColor = nodeItemStyleModel.get('borderColor');\n  var borderColorSaturation = nodeItemStyleModel.get('borderColorSaturation');\n  var thisNodeColor;\n\n  if (borderColorSaturation != null) {\n    // For performance, do not always execute 'calculateColor'.\n    thisNodeColor = calculateColor(visuals);\n    borderColor = calculateBorderColor(borderColorSaturation, thisNodeColor);\n  }\n\n  existsStyle.stroke = borderColor;\n  var viewChildren = node.viewChildren;\n\n  if (!viewChildren || !viewChildren.length) {\n    thisNodeColor = calculateColor(visuals); // Apply visual to this node.\n\n    existsStyle.fill = thisNodeColor;\n  } else {\n    var mapping_1 = buildVisualMapping(node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren); // Designate visual to children.\n\n    each(viewChildren, function (child, index) {\n      // If higher than viewRoot, only ancestors of viewRoot is needed to visit.\n      if (child.depth >= viewRootAncestors.length || child === viewRootAncestors[child.depth]) {\n        var childVisual = mapVisual(nodeModel, visuals, child, index, mapping_1, seriesModel);\n        travelTree(child, childVisual, viewRootAncestors, seriesModel);\n      }\n    });\n  }\n}\n\nfunction buildVisuals(nodeItemStyleModel, designatedVisual, seriesModel) {\n  var visuals = extend({}, designatedVisual);\n  var designatedVisualItemStyle = seriesModel.designatedVisualItemStyle;\n  each(['color', 'colorAlpha', 'colorSaturation'], function (visualName) {\n    // Priority: thisNode > thisLevel > parentNodeDesignated > seriesModel\n    designatedVisualItemStyle[visualName] = designatedVisual[visualName];\n    var val = nodeItemStyleModel.get(visualName);\n    designatedVisualItemStyle[visualName] = null;\n    val != null && (visuals[visualName] = val);\n  });\n  return visuals;\n}\n\nfunction calculateColor(visuals) {\n  var color = getValueVisualDefine(visuals, 'color');\n\n  if (color) {\n    var colorAlpha = getValueVisualDefine(visuals, 'colorAlpha');\n    var colorSaturation = getValueVisualDefine(visuals, 'colorSaturation');\n\n    if (colorSaturation) {\n      color = modifyHSL(color, null, null, colorSaturation);\n    }\n\n    if (colorAlpha) {\n      color = modifyAlpha(color, colorAlpha);\n    }\n\n    return color;\n  }\n}\n\nfunction calculateBorderColor(borderColorSaturation, thisNodeColor) {\n  return thisNodeColor != null // Can only be string\n  ? modifyHSL(thisNodeColor, null, null, borderColorSaturation) : null;\n}\n\nfunction getValueVisualDefine(visuals, name) {\n  var value = visuals[name];\n\n  if (value != null && value !== 'none') {\n    return value;\n  }\n}\n\nfunction buildVisualMapping(node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren) {\n  if (!viewChildren || !viewChildren.length) {\n    return;\n  }\n\n  var rangeVisual = getRangeVisual(nodeModel, 'color') || visuals.color != null && visuals.color !== 'none' && (getRangeVisual(nodeModel, 'colorAlpha') || getRangeVisual(nodeModel, 'colorSaturation'));\n\n  if (!rangeVisual) {\n    return;\n  }\n\n  var visualMin = nodeModel.get('visualMin');\n  var visualMax = nodeModel.get('visualMax');\n  var dataExtent = nodeLayout.dataExtent.slice();\n  visualMin != null && visualMin < dataExtent[0] && (dataExtent[0] = visualMin);\n  visualMax != null && visualMax > dataExtent[1] && (dataExtent[1] = visualMax);\n  var colorMappingBy = nodeModel.get('colorMappingBy');\n  var opt = {\n    type: rangeVisual.name,\n    dataExtent: dataExtent,\n    visual: rangeVisual.range\n  };\n\n  if (opt.type === 'color' && (colorMappingBy === 'index' || colorMappingBy === 'id')) {\n    opt.mappingMethod = 'category';\n    opt.loop = true; // categories is ordinal, so do not set opt.categories.\n  } else {\n    opt.mappingMethod = 'linear';\n  }\n\n  var mapping = new VisualMapping(opt);\n  inner(mapping).drColorMappingBy = colorMappingBy;\n  return mapping;\n} // Notice: If we dont have the attribute 'colorRange', but only use\n// attribute 'color' to represent both concepts of 'colorRange' and 'color',\n// (It means 'colorRange' when 'color' is Array, means 'color' when not array),\n// this problem will be encountered:\n// If a level-1 node dont have children, and its siblings has children,\n// and colorRange is set on level-1, then the node can not be colored.\n// So we separate 'colorRange' and 'color' to different attributes.\n\n\nfunction getRangeVisual(nodeModel, name) {\n  // 'colorRange', 'colorARange', 'colorSRange'.\n  // If not exsits on this node, fetch from levels and series.\n  var range = nodeModel.get(name);\n  return isArray(range) && range.length ? {\n    name: name,\n    range: range\n  } : null;\n}\n\nfunction mapVisual(nodeModel, visuals, child, index, mapping, seriesModel) {\n  var childVisuals = extend({}, visuals);\n\n  if (mapping) {\n    // Only support color, colorAlpha, colorSaturation.\n    var mappingType = mapping.type;\n    var colorMappingBy = mappingType === 'color' && inner(mapping).drColorMappingBy;\n    var value = colorMappingBy === 'index' ? index : colorMappingBy === 'id' ? seriesModel.mapIdToIndex(child.getId()) : child.getValue(nodeModel.get('visualDimension'));\n    childVisuals[mappingType] = mapping.mapValueToVisual(value);\n  }\n\n  return childVisuals;\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/chart/treemap/treemapVisual.js"],"names":["VisualMapping","each","extend","isArray","modifyHSL","modifyAlpha","makeInner","ITEM_STYLE_NORMAL","inner","seriesType","reset","seriesModel","tree","getData","root","isRemoved","travelTree","getViewRoot","getAncestors","node","designatedVisual","viewRootAncestors","nodeModel","getModel","nodeLayout","getLayout","data","hostTree","invisible","isInView","nodeItemStyleModel","visuals","buildVisuals","existsStyle","ensureUniqueItemVisual","dataIndex","borderColor","get","borderColorSaturation","thisNodeColor","calculateColor","calculateBorderColor","stroke","viewChildren","length","fill","mapping_1","buildVisualMapping","child","index","depth","childVisual","mapVisual","designatedVisualItemStyle","visualName","val","color","getValueVisualDefine","colorAlpha","colorSaturation","name","value","rangeVisual","getRangeVisual","visualMin","visualMax","dataExtent","slice","colorMappingBy","opt","type","visual","range","mappingMethod","loop","mapping","drColorMappingBy","childVisuals","mappingType","mapIdToIndex","getId","getValue","mapValueToVisual"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAOA,aAAP,MAA0B,4BAA1B;AACA,SAASC,IAAT,EAAeC,MAAf,EAAuBC,OAAvB,QAAsC,uBAAtC;AACA,SAASC,SAAT,EAAoBC,WAApB,QAAuC,wBAAvC;AACA,SAASC,SAAT,QAA0B,kBAA1B;AACA,IAAIC,iBAAiB,GAAG,WAAxB;AACA,IAAIC,KAAK,GAAGF,SAAS,EAArB;AACA,eAAe;AACbG,EAAAA,UAAU,EAAE,SADC;AAEbC,EAAAA,KAAK,EAAE,UAAUC,WAAV,EAAuB;AAC5B,QAAIC,IAAI,GAAGD,WAAW,CAACE,OAAZ,GAAsBD,IAAjC;AACA,QAAIE,IAAI,GAAGF,IAAI,CAACE,IAAhB;;AAEA,QAAIA,IAAI,CAACC,SAAL,EAAJ,EAAsB;AACpB;AACD;;AAEDC,IAAAA,UAAU,CAACF,IAAD,EAAO;AACjB,MADU,EACNH,WAAW,CAACM,WAAZ,GAA0BC,YAA1B,EADM,EACoCP,WADpC,CAAV;AAED;AAZY,CAAf;;AAeA,SAASK,UAAT,CAAoBG,IAApB,EAA0BC,gBAA1B,EAA4CC,iBAA5C,EAA+DV,WAA/D,EAA4E;AAC1E,MAAIW,SAAS,GAAGH,IAAI,CAACI,QAAL,EAAhB;AACA,MAAIC,UAAU,GAAGL,IAAI,CAACM,SAAL,EAAjB;AACA,MAAIC,IAAI,GAAGP,IAAI,CAACQ,QAAL,CAAcD,IAAzB,CAH0E,CAG3C;;AAE/B,MAAI,CAACF,UAAD,IAAeA,UAAU,CAACI,SAA1B,IAAuC,CAACJ,UAAU,CAACK,QAAvD,EAAiE;AAC/D;AACD;;AAED,MAAIC,kBAAkB,GAAGR,SAAS,CAACC,QAAV,CAAmBhB,iBAAnB,CAAzB;AACA,MAAIwB,OAAO,GAAGC,YAAY,CAACF,kBAAD,EAAqBV,gBAArB,EAAuCT,WAAvC,CAA1B;AACA,MAAIsB,WAAW,GAAGP,IAAI,CAACQ,sBAAL,CAA4Bf,IAAI,CAACgB,SAAjC,EAA4C,OAA5C,CAAlB,CAX0E,CAWF;;AAExE,MAAIC,WAAW,GAAGN,kBAAkB,CAACO,GAAnB,CAAuB,aAAvB,CAAlB;AACA,MAAIC,qBAAqB,GAAGR,kBAAkB,CAACO,GAAnB,CAAuB,uBAAvB,CAA5B;AACA,MAAIE,aAAJ;;AAEA,MAAID,qBAAqB,IAAI,IAA7B,EAAmC;AACjC;AACAC,IAAAA,aAAa,GAAGC,cAAc,CAACT,OAAD,CAA9B;AACAK,IAAAA,WAAW,GAAGK,oBAAoB,CAACH,qBAAD,EAAwBC,aAAxB,CAAlC;AACD;;AAEDN,EAAAA,WAAW,CAACS,MAAZ,GAAqBN,WAArB;AACA,MAAIO,YAAY,GAAGxB,IAAI,CAACwB,YAAxB;;AAEA,MAAI,CAACA,YAAD,IAAiB,CAACA,YAAY,CAACC,MAAnC,EAA2C;AACzCL,IAAAA,aAAa,GAAGC,cAAc,CAACT,OAAD,CAA9B,CADyC,CACA;;AAEzCE,IAAAA,WAAW,CAACY,IAAZ,GAAmBN,aAAnB;AACD,GAJD,MAIO;AACL,QAAIO,SAAS,GAAGC,kBAAkB,CAAC5B,IAAD,EAAOG,SAAP,EAAkBE,UAAlB,EAA8BM,kBAA9B,EAAkDC,OAAlD,EAA2DY,YAA3D,CAAlC,CADK,CACuG;;AAE5G1C,IAAAA,IAAI,CAAC0C,YAAD,EAAe,UAAUK,KAAV,EAAiBC,KAAjB,EAAwB;AACzC;AACA,UAAID,KAAK,CAACE,KAAN,IAAe7B,iBAAiB,CAACuB,MAAjC,IAA2CI,KAAK,KAAK3B,iBAAiB,CAAC2B,KAAK,CAACE,KAAP,CAA1E,EAAyF;AACvF,YAAIC,WAAW,GAAGC,SAAS,CAAC9B,SAAD,EAAYS,OAAZ,EAAqBiB,KAArB,EAA4BC,KAA5B,EAAmCH,SAAnC,EAA8CnC,WAA9C,CAA3B;AACAK,QAAAA,UAAU,CAACgC,KAAD,EAAQG,WAAR,EAAqB9B,iBAArB,EAAwCV,WAAxC,CAAV;AACD;AACF,KANG,CAAJ;AAOD;AACF;;AAED,SAASqB,YAAT,CAAsBF,kBAAtB,EAA0CV,gBAA1C,EAA4DT,WAA5D,EAAyE;AACvE,MAAIoB,OAAO,GAAG7B,MAAM,CAAC,EAAD,EAAKkB,gBAAL,CAApB;AACA,MAAIiC,yBAAyB,GAAG1C,WAAW,CAAC0C,yBAA5C;AACApD,EAAAA,IAAI,CAAC,CAAC,OAAD,EAAU,YAAV,EAAwB,iBAAxB,CAAD,EAA6C,UAAUqD,UAAV,EAAsB;AACrE;AACAD,IAAAA,yBAAyB,CAACC,UAAD,CAAzB,GAAwClC,gBAAgB,CAACkC,UAAD,CAAxD;AACA,QAAIC,GAAG,GAAGzB,kBAAkB,CAACO,GAAnB,CAAuBiB,UAAvB,CAAV;AACAD,IAAAA,yBAAyB,CAACC,UAAD,CAAzB,GAAwC,IAAxC;AACAC,IAAAA,GAAG,IAAI,IAAP,KAAgBxB,OAAO,CAACuB,UAAD,CAAP,GAAsBC,GAAtC;AACD,GANG,CAAJ;AAOA,SAAOxB,OAAP;AACD;;AAED,SAASS,cAAT,CAAwBT,OAAxB,EAAiC;AAC/B,MAAIyB,KAAK,GAAGC,oBAAoB,CAAC1B,OAAD,EAAU,OAAV,CAAhC;;AAEA,MAAIyB,KAAJ,EAAW;AACT,QAAIE,UAAU,GAAGD,oBAAoB,CAAC1B,OAAD,EAAU,YAAV,CAArC;AACA,QAAI4B,eAAe,GAAGF,oBAAoB,CAAC1B,OAAD,EAAU,iBAAV,CAA1C;;AAEA,QAAI4B,eAAJ,EAAqB;AACnBH,MAAAA,KAAK,GAAGpD,SAAS,CAACoD,KAAD,EAAQ,IAAR,EAAc,IAAd,EAAoBG,eAApB,CAAjB;AACD;;AAED,QAAID,UAAJ,EAAgB;AACdF,MAAAA,KAAK,GAAGnD,WAAW,CAACmD,KAAD,EAAQE,UAAR,CAAnB;AACD;;AAED,WAAOF,KAAP;AACD;AACF;;AAED,SAASf,oBAAT,CAA8BH,qBAA9B,EAAqDC,aAArD,EAAoE;AAClE,SAAOA,aAAa,IAAI,IAAjB,CAAsB;AAAtB,IACLnC,SAAS,CAACmC,aAAD,EAAgB,IAAhB,EAAsB,IAAtB,EAA4BD,qBAA5B,CADJ,GACyD,IADhE;AAED;;AAED,SAASmB,oBAAT,CAA8B1B,OAA9B,EAAuC6B,IAAvC,EAA6C;AAC3C,MAAIC,KAAK,GAAG9B,OAAO,CAAC6B,IAAD,CAAnB;;AAEA,MAAIC,KAAK,IAAI,IAAT,IAAiBA,KAAK,KAAK,MAA/B,EAAuC;AACrC,WAAOA,KAAP;AACD;AACF;;AAED,SAASd,kBAAT,CAA4B5B,IAA5B,EAAkCG,SAAlC,EAA6CE,UAA7C,EAAyDM,kBAAzD,EAA6EC,OAA7E,EAAsFY,YAAtF,EAAoG;AAClG,MAAI,CAACA,YAAD,IAAiB,CAACA,YAAY,CAACC,MAAnC,EAA2C;AACzC;AACD;;AAED,MAAIkB,WAAW,GAAGC,cAAc,CAACzC,SAAD,EAAY,OAAZ,CAAd,IAAsCS,OAAO,CAACyB,KAAR,IAAiB,IAAjB,IAAyBzB,OAAO,CAACyB,KAAR,KAAkB,MAA3C,KAAsDO,cAAc,CAACzC,SAAD,EAAY,YAAZ,CAAd,IAA2CyC,cAAc,CAACzC,SAAD,EAAY,iBAAZ,CAA/G,CAAxD;;AAEA,MAAI,CAACwC,WAAL,EAAkB;AAChB;AACD;;AAED,MAAIE,SAAS,GAAG1C,SAAS,CAACe,GAAV,CAAc,WAAd,CAAhB;AACA,MAAI4B,SAAS,GAAG3C,SAAS,CAACe,GAAV,CAAc,WAAd,CAAhB;AACA,MAAI6B,UAAU,GAAG1C,UAAU,CAAC0C,UAAX,CAAsBC,KAAtB,EAAjB;AACAH,EAAAA,SAAS,IAAI,IAAb,IAAqBA,SAAS,GAAGE,UAAU,CAAC,CAAD,CAA3C,KAAmDA,UAAU,CAAC,CAAD,CAAV,GAAgBF,SAAnE;AACAC,EAAAA,SAAS,IAAI,IAAb,IAAqBA,SAAS,GAAGC,UAAU,CAAC,CAAD,CAA3C,KAAmDA,UAAU,CAAC,CAAD,CAAV,GAAgBD,SAAnE;AACA,MAAIG,cAAc,GAAG9C,SAAS,CAACe,GAAV,CAAc,gBAAd,CAArB;AACA,MAAIgC,GAAG,GAAG;AACRC,IAAAA,IAAI,EAAER,WAAW,CAACF,IADV;AAERM,IAAAA,UAAU,EAAEA,UAFJ;AAGRK,IAAAA,MAAM,EAAET,WAAW,CAACU;AAHZ,GAAV;;AAMA,MAAIH,GAAG,CAACC,IAAJ,KAAa,OAAb,KAAyBF,cAAc,KAAK,OAAnB,IAA8BA,cAAc,KAAK,IAA1E,CAAJ,EAAqF;AACnFC,IAAAA,GAAG,CAACI,aAAJ,GAAoB,UAApB;AACAJ,IAAAA,GAAG,CAACK,IAAJ,GAAW,IAAX,CAFmF,CAElE;AAClB,GAHD,MAGO;AACLL,IAAAA,GAAG,CAACI,aAAJ,GAAoB,QAApB;AACD;;AAED,MAAIE,OAAO,GAAG,IAAI3E,aAAJ,CAAkBqE,GAAlB,CAAd;AACA7D,EAAAA,KAAK,CAACmE,OAAD,CAAL,CAAeC,gBAAf,GAAkCR,cAAlC;AACA,SAAOO,OAAP;AACD,C,CAAC;AACF;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASZ,cAAT,CAAwBzC,SAAxB,EAAmCsC,IAAnC,EAAyC;AACvC;AACA;AACA,MAAIY,KAAK,GAAGlD,SAAS,CAACe,GAAV,CAAcuB,IAAd,CAAZ;AACA,SAAOzD,OAAO,CAACqE,KAAD,CAAP,IAAkBA,KAAK,CAAC5B,MAAxB,GAAiC;AACtCgB,IAAAA,IAAI,EAAEA,IADgC;AAEtCY,IAAAA,KAAK,EAAEA;AAF+B,GAAjC,GAGH,IAHJ;AAID;;AAED,SAASpB,SAAT,CAAmB9B,SAAnB,EAA8BS,OAA9B,EAAuCiB,KAAvC,EAA8CC,KAA9C,EAAqD0B,OAArD,EAA8DhE,WAA9D,EAA2E;AACzE,MAAIkE,YAAY,GAAG3E,MAAM,CAAC,EAAD,EAAK6B,OAAL,CAAzB;;AAEA,MAAI4C,OAAJ,EAAa;AACX;AACA,QAAIG,WAAW,GAAGH,OAAO,CAACL,IAA1B;AACA,QAAIF,cAAc,GAAGU,WAAW,KAAK,OAAhB,IAA2BtE,KAAK,CAACmE,OAAD,CAAL,CAAeC,gBAA/D;AACA,QAAIf,KAAK,GAAGO,cAAc,KAAK,OAAnB,GAA6BnB,KAA7B,GAAqCmB,cAAc,KAAK,IAAnB,GAA0BzD,WAAW,CAACoE,YAAZ,CAAyB/B,KAAK,CAACgC,KAAN,EAAzB,CAA1B,GAAoEhC,KAAK,CAACiC,QAAN,CAAe3D,SAAS,CAACe,GAAV,CAAc,iBAAd,CAAf,CAArH;AACAwC,IAAAA,YAAY,CAACC,WAAD,CAAZ,GAA4BH,OAAO,CAACO,gBAAR,CAAyBrB,KAAzB,CAA5B;AACD;;AAED,SAAOgB,YAAP;AACD","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport VisualMapping from '../../visual/VisualMapping';\nimport { each, extend, isArray } from 'zrender/lib/core/util';\nimport { modifyHSL, modifyAlpha } from 'zrender/lib/tool/color';\nimport { makeInner } from '../../util/model';\nvar ITEM_STYLE_NORMAL = 'itemStyle';\nvar inner = makeInner();\nexport default {\n  seriesType: 'treemap',\n  reset: function (seriesModel) {\n    var tree = seriesModel.getData().tree;\n    var root = tree.root;\n\n    if (root.isRemoved()) {\n      return;\n    }\n\n    travelTree(root, // Visual should calculate from tree root but not view root.\n    {}, seriesModel.getViewRoot().getAncestors(), seriesModel);\n  }\n};\n\nfunction travelTree(node, designatedVisual, viewRootAncestors, seriesModel) {\n  var nodeModel = node.getModel();\n  var nodeLayout = node.getLayout();\n  var data = node.hostTree.data; // Optimize\n\n  if (!nodeLayout || nodeLayout.invisible || !nodeLayout.isInView) {\n    return;\n  }\n\n  var nodeItemStyleModel = nodeModel.getModel(ITEM_STYLE_NORMAL);\n  var visuals = buildVisuals(nodeItemStyleModel, designatedVisual, seriesModel);\n  var existsStyle = data.ensureUniqueItemVisual(node.dataIndex, 'style'); // calculate border color\n\n  var borderColor = nodeItemStyleModel.get('borderColor');\n  var borderColorSaturation = nodeItemStyleModel.get('borderColorSaturation');\n  var thisNodeColor;\n\n  if (borderColorSaturation != null) {\n    // For performance, do not always execute 'calculateColor'.\n    thisNodeColor = calculateColor(visuals);\n    borderColor = calculateBorderColor(borderColorSaturation, thisNodeColor);\n  }\n\n  existsStyle.stroke = borderColor;\n  var viewChildren = node.viewChildren;\n\n  if (!viewChildren || !viewChildren.length) {\n    thisNodeColor = calculateColor(visuals); // Apply visual to this node.\n\n    existsStyle.fill = thisNodeColor;\n  } else {\n    var mapping_1 = buildVisualMapping(node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren); // Designate visual to children.\n\n    each(viewChildren, function (child, index) {\n      // If higher than viewRoot, only ancestors of viewRoot is needed to visit.\n      if (child.depth >= viewRootAncestors.length || child === viewRootAncestors[child.depth]) {\n        var childVisual = mapVisual(nodeModel, visuals, child, index, mapping_1, seriesModel);\n        travelTree(child, childVisual, viewRootAncestors, seriesModel);\n      }\n    });\n  }\n}\n\nfunction buildVisuals(nodeItemStyleModel, designatedVisual, seriesModel) {\n  var visuals = extend({}, designatedVisual);\n  var designatedVisualItemStyle = seriesModel.designatedVisualItemStyle;\n  each(['color', 'colorAlpha', 'colorSaturation'], function (visualName) {\n    // Priority: thisNode > thisLevel > parentNodeDesignated > seriesModel\n    designatedVisualItemStyle[visualName] = designatedVisual[visualName];\n    var val = nodeItemStyleModel.get(visualName);\n    designatedVisualItemStyle[visualName] = null;\n    val != null && (visuals[visualName] = val);\n  });\n  return visuals;\n}\n\nfunction calculateColor(visuals) {\n  var color = getValueVisualDefine(visuals, 'color');\n\n  if (color) {\n    var colorAlpha = getValueVisualDefine(visuals, 'colorAlpha');\n    var colorSaturation = getValueVisualDefine(visuals, 'colorSaturation');\n\n    if (colorSaturation) {\n      color = modifyHSL(color, null, null, colorSaturation);\n    }\n\n    if (colorAlpha) {\n      color = modifyAlpha(color, colorAlpha);\n    }\n\n    return color;\n  }\n}\n\nfunction calculateBorderColor(borderColorSaturation, thisNodeColor) {\n  return thisNodeColor != null // Can only be string\n  ? modifyHSL(thisNodeColor, null, null, borderColorSaturation) : null;\n}\n\nfunction getValueVisualDefine(visuals, name) {\n  var value = visuals[name];\n\n  if (value != null && value !== 'none') {\n    return value;\n  }\n}\n\nfunction buildVisualMapping(node, nodeModel, nodeLayout, nodeItemStyleModel, visuals, viewChildren) {\n  if (!viewChildren || !viewChildren.length) {\n    return;\n  }\n\n  var rangeVisual = getRangeVisual(nodeModel, 'color') || visuals.color != null && visuals.color !== 'none' && (getRangeVisual(nodeModel, 'colorAlpha') || getRangeVisual(nodeModel, 'colorSaturation'));\n\n  if (!rangeVisual) {\n    return;\n  }\n\n  var visualMin = nodeModel.get('visualMin');\n  var visualMax = nodeModel.get('visualMax');\n  var dataExtent = nodeLayout.dataExtent.slice();\n  visualMin != null && visualMin < dataExtent[0] && (dataExtent[0] = visualMin);\n  visualMax != null && visualMax > dataExtent[1] && (dataExtent[1] = visualMax);\n  var colorMappingBy = nodeModel.get('colorMappingBy');\n  var opt = {\n    type: rangeVisual.name,\n    dataExtent: dataExtent,\n    visual: rangeVisual.range\n  };\n\n  if (opt.type === 'color' && (colorMappingBy === 'index' || colorMappingBy === 'id')) {\n    opt.mappingMethod = 'category';\n    opt.loop = true; // categories is ordinal, so do not set opt.categories.\n  } else {\n    opt.mappingMethod = 'linear';\n  }\n\n  var mapping = new VisualMapping(opt);\n  inner(mapping).drColorMappingBy = colorMappingBy;\n  return mapping;\n} // Notice: If we dont have the attribute 'colorRange', but only use\n// attribute 'color' to represent both concepts of 'colorRange' and 'color',\n// (It means 'colorRange' when 'color' is Array, means 'color' when not array),\n// this problem will be encountered:\n// If a level-1 node dont have children, and its siblings has children,\n// and colorRange is set on level-1, then the node can not be colored.\n// So we separate 'colorRange' and 'color' to different attributes.\n\n\nfunction getRangeVisual(nodeModel, name) {\n  // 'colorRange', 'colorARange', 'colorSRange'.\n  // If not exsits on this node, fetch from levels and series.\n  var range = nodeModel.get(name);\n  return isArray(range) && range.length ? {\n    name: name,\n    range: range\n  } : null;\n}\n\nfunction mapVisual(nodeModel, visuals, child, index, mapping, seriesModel) {\n  var childVisuals = extend({}, visuals);\n\n  if (mapping) {\n    // Only support color, colorAlpha, colorSaturation.\n    var mappingType = mapping.type;\n    var colorMappingBy = mappingType === 'color' && inner(mapping).drColorMappingBy;\n    var value = colorMappingBy === 'index' ? index : colorMappingBy === 'id' ? seriesModel.mapIdToIndex(child.getId()) : child.getValue(nodeModel.get('visualDimension'));\n    childVisuals[mappingType] = mapping.mapValueToVisual(value);\n  }\n\n  return childVisuals;\n}"]},"metadata":{},"sourceType":"module"}