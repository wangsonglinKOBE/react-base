{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { forceLayout } from './forceHelper';\nimport { simpleLayout } from './simpleLayoutHelper';\nimport { circularLayout } from './circularLayoutHelper';\nimport { linearMap } from '../../util/number';\nimport * as vec2 from 'zrender/lib/core/vector';\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { getCurvenessForEdge } from '../helper/multipleGraphEdgeHelper';\nexport default function graphForceLayout(ecModel) {\n  ecModel.eachSeriesByType('graph', function (graphSeries) {\n    var coordSys = graphSeries.coordinateSystem;\n\n    if (coordSys && coordSys.type !== 'view') {\n      return;\n    }\n\n    if (graphSeries.get('layout') === 'force') {\n      var preservedPoints_1 = graphSeries.preservedPoints || {};\n      var graph_1 = graphSeries.getGraph();\n      var nodeData_1 = graph_1.data;\n      var edgeData = graph_1.edgeData;\n      var forceModel = graphSeries.getModel('force');\n      var initLayout = forceModel.get('initLayout');\n\n      if (graphSeries.preservedPoints) {\n        nodeData_1.each(function (idx) {\n          var id = nodeData_1.getId(idx);\n          nodeData_1.setItemLayout(idx, preservedPoints_1[id] || [NaN, NaN]);\n        });\n      } else if (!initLayout || initLayout === 'none') {\n        simpleLayout(graphSeries);\n      } else if (initLayout === 'circular') {\n        circularLayout(graphSeries, 'value');\n      }\n\n      var nodeDataExtent_1 = nodeData_1.getDataExtent('value');\n      var edgeDataExtent_1 = edgeData.getDataExtent('value'); // let edgeDataExtent = edgeData.getDataExtent('value');\n\n      var repulsion = forceModel.get('repulsion');\n      var edgeLength = forceModel.get('edgeLength');\n      var repulsionArr_1 = zrUtil.isArray(repulsion) ? repulsion : [repulsion, repulsion];\n      var edgeLengthArr_1 = zrUtil.isArray(edgeLength) ? edgeLength : [edgeLength, edgeLength]; // Larger value has smaller length\n\n      edgeLengthArr_1 = [edgeLengthArr_1[1], edgeLengthArr_1[0]];\n      var nodes_1 = nodeData_1.mapArray('value', function (value, idx) {\n        var point = nodeData_1.getItemLayout(idx);\n        var rep = linearMap(value, nodeDataExtent_1, repulsionArr_1);\n\n        if (isNaN(rep)) {\n          rep = (repulsionArr_1[0] + repulsionArr_1[1]) / 2;\n        }\n\n        return {\n          w: rep,\n          rep: rep,\n          fixed: nodeData_1.getItemModel(idx).get('fixed'),\n          p: !point || isNaN(point[0]) || isNaN(point[1]) ? null : point\n        };\n      });\n      var edges = edgeData.mapArray('value', function (value, idx) {\n        var edge = graph_1.getEdgeByIndex(idx);\n        var d = linearMap(value, edgeDataExtent_1, edgeLengthArr_1);\n\n        if (isNaN(d)) {\n          d = (edgeLengthArr_1[0] + edgeLengthArr_1[1]) / 2;\n        }\n\n        var edgeModel = edge.getModel();\n        var curveness = zrUtil.retrieve3(edge.getModel().get(['lineStyle', 'curveness']), -getCurvenessForEdge(edge, graphSeries, idx, true), 0);\n        return {\n          n1: nodes_1[edge.node1.dataIndex],\n          n2: nodes_1[edge.node2.dataIndex],\n          d: d,\n          curveness: curveness,\n          ignoreForceLayout: edgeModel.get('ignoreForceLayout')\n        };\n      }); // let coordSys = graphSeries.coordinateSystem;\n\n      var rect = coordSys.getBoundingRect();\n      var forceInstance = forceLayout(nodes_1, edges, {\n        rect: rect,\n        gravity: forceModel.get('gravity'),\n        friction: forceModel.get('friction')\n      });\n      forceInstance.beforeStep(function (nodes, edges) {\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          if (nodes[i].fixed) {\n            // Write back to layout instance\n            vec2.copy(nodes[i].p, graph_1.getNodeByIndex(i).getLayout());\n          }\n        }\n      });\n      forceInstance.afterStep(function (nodes, edges, stopped) {\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          if (!nodes[i].fixed) {\n            graph_1.getNodeByIndex(i).setLayout(nodes[i].p);\n          }\n\n          preservedPoints_1[nodeData_1.getId(i)] = nodes[i].p;\n        }\n\n        for (var i = 0, l = edges.length; i < l; i++) {\n          var e = edges[i];\n          var edge = graph_1.getEdgeByIndex(i);\n          var p1 = e.n1.p;\n          var p2 = e.n2.p;\n          var points = edge.getLayout();\n          points = points ? points.slice() : [];\n          points[0] = points[0] || [];\n          points[1] = points[1] || [];\n          vec2.copy(points[0], p1);\n          vec2.copy(points[1], p2);\n\n          if (+e.curveness) {\n            points[2] = [(p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * e.curveness, (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * e.curveness];\n          }\n\n          edge.setLayout(points);\n        }\n      });\n      graphSeries.forceLayout = forceInstance;\n      graphSeries.preservedPoints = preservedPoints_1; // Step to get the layout\n\n      forceInstance.step();\n    } else {\n      // Remove prev injected forceLayout instance\n      graphSeries.forceLayout = null;\n    }\n  });\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/chart/graph/forceLayout.js"],"names":["forceLayout","simpleLayout","circularLayout","linearMap","vec2","zrUtil","getCurvenessForEdge","graphForceLayout","ecModel","eachSeriesByType","graphSeries","coordSys","coordinateSystem","type","get","preservedPoints_1","preservedPoints","graph_1","getGraph","nodeData_1","data","edgeData","forceModel","getModel","initLayout","each","idx","id","getId","setItemLayout","NaN","nodeDataExtent_1","getDataExtent","edgeDataExtent_1","repulsion","edgeLength","repulsionArr_1","isArray","edgeLengthArr_1","nodes_1","mapArray","value","point","getItemLayout","rep","isNaN","w","fixed","getItemModel","p","edges","edge","getEdgeByIndex","d","edgeModel","curveness","retrieve3","n1","node1","dataIndex","n2","node2","ignoreForceLayout","rect","getBoundingRect","forceInstance","gravity","friction","beforeStep","nodes","i","l","length","copy","getNodeByIndex","getLayout","afterStep","stopped","setLayout","e","p1","p2","points","slice","step"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { forceLayout } from './forceHelper';\nimport { simpleLayout } from './simpleLayoutHelper';\nimport { circularLayout } from './circularLayoutHelper';\nimport { linearMap } from '../../util/number';\nimport * as vec2 from 'zrender/lib/core/vector';\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { getCurvenessForEdge } from '../helper/multipleGraphEdgeHelper';\nexport default function graphForceLayout(ecModel) {\n  ecModel.eachSeriesByType('graph', function (graphSeries) {\n    var coordSys = graphSeries.coordinateSystem;\n\n    if (coordSys && coordSys.type !== 'view') {\n      return;\n    }\n\n    if (graphSeries.get('layout') === 'force') {\n      var preservedPoints_1 = graphSeries.preservedPoints || {};\n      var graph_1 = graphSeries.getGraph();\n      var nodeData_1 = graph_1.data;\n      var edgeData = graph_1.edgeData;\n      var forceModel = graphSeries.getModel('force');\n      var initLayout = forceModel.get('initLayout');\n\n      if (graphSeries.preservedPoints) {\n        nodeData_1.each(function (idx) {\n          var id = nodeData_1.getId(idx);\n          nodeData_1.setItemLayout(idx, preservedPoints_1[id] || [NaN, NaN]);\n        });\n      } else if (!initLayout || initLayout === 'none') {\n        simpleLayout(graphSeries);\n      } else if (initLayout === 'circular') {\n        circularLayout(graphSeries, 'value');\n      }\n\n      var nodeDataExtent_1 = nodeData_1.getDataExtent('value');\n      var edgeDataExtent_1 = edgeData.getDataExtent('value'); // let edgeDataExtent = edgeData.getDataExtent('value');\n\n      var repulsion = forceModel.get('repulsion');\n      var edgeLength = forceModel.get('edgeLength');\n      var repulsionArr_1 = zrUtil.isArray(repulsion) ? repulsion : [repulsion, repulsion];\n      var edgeLengthArr_1 = zrUtil.isArray(edgeLength) ? edgeLength : [edgeLength, edgeLength]; // Larger value has smaller length\n\n      edgeLengthArr_1 = [edgeLengthArr_1[1], edgeLengthArr_1[0]];\n      var nodes_1 = nodeData_1.mapArray('value', function (value, idx) {\n        var point = nodeData_1.getItemLayout(idx);\n        var rep = linearMap(value, nodeDataExtent_1, repulsionArr_1);\n\n        if (isNaN(rep)) {\n          rep = (repulsionArr_1[0] + repulsionArr_1[1]) / 2;\n        }\n\n        return {\n          w: rep,\n          rep: rep,\n          fixed: nodeData_1.getItemModel(idx).get('fixed'),\n          p: !point || isNaN(point[0]) || isNaN(point[1]) ? null : point\n        };\n      });\n      var edges = edgeData.mapArray('value', function (value, idx) {\n        var edge = graph_1.getEdgeByIndex(idx);\n        var d = linearMap(value, edgeDataExtent_1, edgeLengthArr_1);\n\n        if (isNaN(d)) {\n          d = (edgeLengthArr_1[0] + edgeLengthArr_1[1]) / 2;\n        }\n\n        var edgeModel = edge.getModel();\n        var curveness = zrUtil.retrieve3(edge.getModel().get(['lineStyle', 'curveness']), -getCurvenessForEdge(edge, graphSeries, idx, true), 0);\n        return {\n          n1: nodes_1[edge.node1.dataIndex],\n          n2: nodes_1[edge.node2.dataIndex],\n          d: d,\n          curveness: curveness,\n          ignoreForceLayout: edgeModel.get('ignoreForceLayout')\n        };\n      }); // let coordSys = graphSeries.coordinateSystem;\n\n      var rect = coordSys.getBoundingRect();\n      var forceInstance = forceLayout(nodes_1, edges, {\n        rect: rect,\n        gravity: forceModel.get('gravity'),\n        friction: forceModel.get('friction')\n      });\n      forceInstance.beforeStep(function (nodes, edges) {\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          if (nodes[i].fixed) {\n            // Write back to layout instance\n            vec2.copy(nodes[i].p, graph_1.getNodeByIndex(i).getLayout());\n          }\n        }\n      });\n      forceInstance.afterStep(function (nodes, edges, stopped) {\n        for (var i = 0, l = nodes.length; i < l; i++) {\n          if (!nodes[i].fixed) {\n            graph_1.getNodeByIndex(i).setLayout(nodes[i].p);\n          }\n\n          preservedPoints_1[nodeData_1.getId(i)] = nodes[i].p;\n        }\n\n        for (var i = 0, l = edges.length; i < l; i++) {\n          var e = edges[i];\n          var edge = graph_1.getEdgeByIndex(i);\n          var p1 = e.n1.p;\n          var p2 = e.n2.p;\n          var points = edge.getLayout();\n          points = points ? points.slice() : [];\n          points[0] = points[0] || [];\n          points[1] = points[1] || [];\n          vec2.copy(points[0], p1);\n          vec2.copy(points[1], p2);\n\n          if (+e.curveness) {\n            points[2] = [(p1[0] + p2[0]) / 2 - (p1[1] - p2[1]) * e.curveness, (p1[1] + p2[1]) / 2 - (p2[0] - p1[0]) * e.curveness];\n          }\n\n          edge.setLayout(points);\n        }\n      });\n      graphSeries.forceLayout = forceInstance;\n      graphSeries.preservedPoints = preservedPoints_1; // Step to get the layout\n\n      forceInstance.step();\n    } else {\n      // Remove prev injected forceLayout instance\n      graphSeries.forceLayout = null;\n    }\n  });\n}"]},"metadata":{},"sourceType":"module"}