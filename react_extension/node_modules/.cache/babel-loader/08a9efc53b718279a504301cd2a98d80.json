{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// @ts-nocheck\nimport { curry, each } from 'zrender/lib/core/util';\n\nfunction legendSelectActionHandler(methodName, payload, ecModel) {\n  var selectedMap = {};\n  var isToggleSelect = methodName === 'toggleSelected';\n  var isSelected; // Update all legend components\n\n  ecModel.eachComponent('legend', function (legendModel) {\n    if (isToggleSelect && isSelected != null) {\n      // Force other legend has same selected status\n      // Or the first is toggled to true and other are toggled to false\n      // In the case one legend has some item unSelected in option. And if other legend\n      // doesn't has the item, they will assume it is selected.\n      legendModel[isSelected ? 'select' : 'unSelect'](payload.name);\n    } else if (methodName === 'allSelect' || methodName === 'inverseSelect') {\n      legendModel[methodName]();\n    } else {\n      legendModel[methodName](payload.name);\n      isSelected = legendModel.isSelected(payload.name);\n    }\n\n    var legendData = legendModel.getData();\n    each(legendData, function (model) {\n      var name = model.get('name'); // Wrap element\n\n      if (name === '\\n' || name === '') {\n        return;\n      }\n\n      var isItemSelected = legendModel.isSelected(name);\n\n      if (selectedMap.hasOwnProperty(name)) {\n        // Unselected if any legend is unselected\n        selectedMap[name] = selectedMap[name] && isItemSelected;\n      } else {\n        selectedMap[name] = isItemSelected;\n      }\n    });\n  }); // Return the event explicitly\n\n  return methodName === 'allSelect' || methodName === 'inverseSelect' ? {\n    selected: selectedMap\n  } : {\n    name: payload.name,\n    selected: selectedMap\n  };\n}\n\nexport function installLegendAction(registers) {\n  /**\n   * @event legendToggleSelect\n   * @type {Object}\n   * @property {string} type 'legendToggleSelect'\n   * @property {string} [from]\n   * @property {string} name Series name or data item name\n   */\n  registers.registerAction('legendToggleSelect', 'legendselectchanged', curry(legendSelectActionHandler, 'toggleSelected'));\n  registers.registerAction('legendAllSelect', 'legendselectall', curry(legendSelectActionHandler, 'allSelect'));\n  registers.registerAction('legendInverseSelect', 'legendinverseselect', curry(legendSelectActionHandler, 'inverseSelect'));\n  /**\n   * @event legendSelect\n   * @type {Object}\n   * @property {string} type 'legendSelect'\n   * @property {string} name Series name or data item name\n   */\n\n  registers.registerAction('legendSelect', 'legendselected', curry(legendSelectActionHandler, 'select'));\n  /**\n   * @event legendUnSelect\n   * @type {Object}\n   * @property {string} type 'legendUnSelect'\n   * @property {string} name Series name or data item name\n   */\n\n  registers.registerAction('legendUnSelect', 'legendunselected', curry(legendSelectActionHandler, 'unSelect'));\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/component/legend/legendAction.js"],"names":["curry","each","legendSelectActionHandler","methodName","payload","ecModel","selectedMap","isToggleSelect","isSelected","eachComponent","legendModel","name","legendData","getData","model","get","isItemSelected","hasOwnProperty","selected","installLegendAction","registers","registerAction"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// @ts-nocheck\nimport { curry, each } from 'zrender/lib/core/util';\n\nfunction legendSelectActionHandler(methodName, payload, ecModel) {\n  var selectedMap = {};\n  var isToggleSelect = methodName === 'toggleSelected';\n  var isSelected; // Update all legend components\n\n  ecModel.eachComponent('legend', function (legendModel) {\n    if (isToggleSelect && isSelected != null) {\n      // Force other legend has same selected status\n      // Or the first is toggled to true and other are toggled to false\n      // In the case one legend has some item unSelected in option. And if other legend\n      // doesn't has the item, they will assume it is selected.\n      legendModel[isSelected ? 'select' : 'unSelect'](payload.name);\n    } else if (methodName === 'allSelect' || methodName === 'inverseSelect') {\n      legendModel[methodName]();\n    } else {\n      legendModel[methodName](payload.name);\n      isSelected = legendModel.isSelected(payload.name);\n    }\n\n    var legendData = legendModel.getData();\n    each(legendData, function (model) {\n      var name = model.get('name'); // Wrap element\n\n      if (name === '\\n' || name === '') {\n        return;\n      }\n\n      var isItemSelected = legendModel.isSelected(name);\n\n      if (selectedMap.hasOwnProperty(name)) {\n        // Unselected if any legend is unselected\n        selectedMap[name] = selectedMap[name] && isItemSelected;\n      } else {\n        selectedMap[name] = isItemSelected;\n      }\n    });\n  }); // Return the event explicitly\n\n  return methodName === 'allSelect' || methodName === 'inverseSelect' ? {\n    selected: selectedMap\n  } : {\n    name: payload.name,\n    selected: selectedMap\n  };\n}\n\nexport function installLegendAction(registers) {\n  /**\n   * @event legendToggleSelect\n   * @type {Object}\n   * @property {string} type 'legendToggleSelect'\n   * @property {string} [from]\n   * @property {string} name Series name or data item name\n   */\n  registers.registerAction('legendToggleSelect', 'legendselectchanged', curry(legendSelectActionHandler, 'toggleSelected'));\n  registers.registerAction('legendAllSelect', 'legendselectall', curry(legendSelectActionHandler, 'allSelect'));\n  registers.registerAction('legendInverseSelect', 'legendinverseselect', curry(legendSelectActionHandler, 'inverseSelect'));\n  /**\n   * @event legendSelect\n   * @type {Object}\n   * @property {string} type 'legendSelect'\n   * @property {string} name Series name or data item name\n   */\n\n  registers.registerAction('legendSelect', 'legendselected', curry(legendSelectActionHandler, 'select'));\n  /**\n   * @event legendUnSelect\n   * @type {Object}\n   * @property {string} type 'legendUnSelect'\n   * @property {string} name Series name or data item name\n   */\n\n  registers.registerAction('legendUnSelect', 'legendunselected', curry(legendSelectActionHandler, 'unSelect'));\n}"]},"metadata":{},"sourceType":"module"}