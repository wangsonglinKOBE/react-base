{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport * as modelUtil from '../../util/model';\n/**\n * @param finder contains {seriesIndex, dataIndex, dataIndexInside}\n * @param ecModel\n * @return  {point: [x, y], el: ...} point Will not be null.\n */\n\nexport default function findPointFromSeries(finder, ecModel) {\n  var point = [];\n  var seriesIndex = finder.seriesIndex;\n  var seriesModel;\n\n  if (seriesIndex == null || !(seriesModel = ecModel.getSeriesByIndex(seriesIndex))) {\n    return {\n      point: []\n    };\n  }\n\n  var data = seriesModel.getData();\n  var dataIndex = modelUtil.queryDataIndex(data, finder);\n\n  if (dataIndex == null || dataIndex < 0 || zrUtil.isArray(dataIndex)) {\n    return {\n      point: []\n    };\n  }\n\n  var el = data.getItemGraphicEl(dataIndex);\n  var coordSys = seriesModel.coordinateSystem;\n\n  if (seriesModel.getTooltipPosition) {\n    point = seriesModel.getTooltipPosition(dataIndex) || [];\n  } else if (coordSys && coordSys.dataToPoint) {\n    if (finder.isStacked) {\n      var baseAxis = coordSys.getBaseAxis();\n      var valueAxis = coordSys.getOtherAxis(baseAxis);\n      var valueAxisDim = valueAxis.dim;\n      var baseAxisDim = baseAxis.dim;\n      var baseDataOffset = valueAxisDim === 'x' || valueAxisDim === 'radius' ? 1 : 0;\n      var baseDim = data.mapDimension(baseAxisDim);\n      var stackedData = [];\n      stackedData[baseDataOffset] = data.get(baseDim, dataIndex);\n      stackedData[1 - baseDataOffset] = data.get(data.getCalculationInfo('stackResultDimension'), dataIndex);\n      point = coordSys.dataToPoint(stackedData) || [];\n    } else {\n      point = coordSys.dataToPoint(data.getValues(zrUtil.map(coordSys.dimensions, function (dim) {\n        return data.mapDimension(dim);\n      }), dataIndex)) || [];\n    }\n  } else if (el) {\n    // Use graphic bounding rect\n    var rect = el.getBoundingRect().clone();\n    rect.applyTransform(el.transform);\n    point = [rect.x + rect.width / 2, rect.y + rect.height / 2];\n  }\n\n  return {\n    point: point,\n    el: el\n  };\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/component/axisPointer/findPointFromSeries.js"],"names":["zrUtil","modelUtil","findPointFromSeries","finder","ecModel","point","seriesIndex","seriesModel","getSeriesByIndex","data","getData","dataIndex","queryDataIndex","isArray","el","getItemGraphicEl","coordSys","coordinateSystem","getTooltipPosition","dataToPoint","isStacked","baseAxis","getBaseAxis","valueAxis","getOtherAxis","valueAxisDim","dim","baseAxisDim","baseDataOffset","baseDim","mapDimension","stackedData","get","getCalculationInfo","getValues","map","dimensions","rect","getBoundingRect","clone","applyTransform","transform","x","width","y","height"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport * as modelUtil from '../../util/model';\n/**\n * @param finder contains {seriesIndex, dataIndex, dataIndexInside}\n * @param ecModel\n * @return  {point: [x, y], el: ...} point Will not be null.\n */\n\nexport default function findPointFromSeries(finder, ecModel) {\n  var point = [];\n  var seriesIndex = finder.seriesIndex;\n  var seriesModel;\n\n  if (seriesIndex == null || !(seriesModel = ecModel.getSeriesByIndex(seriesIndex))) {\n    return {\n      point: []\n    };\n  }\n\n  var data = seriesModel.getData();\n  var dataIndex = modelUtil.queryDataIndex(data, finder);\n\n  if (dataIndex == null || dataIndex < 0 || zrUtil.isArray(dataIndex)) {\n    return {\n      point: []\n    };\n  }\n\n  var el = data.getItemGraphicEl(dataIndex);\n  var coordSys = seriesModel.coordinateSystem;\n\n  if (seriesModel.getTooltipPosition) {\n    point = seriesModel.getTooltipPosition(dataIndex) || [];\n  } else if (coordSys && coordSys.dataToPoint) {\n    if (finder.isStacked) {\n      var baseAxis = coordSys.getBaseAxis();\n      var valueAxis = coordSys.getOtherAxis(baseAxis);\n      var valueAxisDim = valueAxis.dim;\n      var baseAxisDim = baseAxis.dim;\n      var baseDataOffset = valueAxisDim === 'x' || valueAxisDim === 'radius' ? 1 : 0;\n      var baseDim = data.mapDimension(baseAxisDim);\n      var stackedData = [];\n      stackedData[baseDataOffset] = data.get(baseDim, dataIndex);\n      stackedData[1 - baseDataOffset] = data.get(data.getCalculationInfo('stackResultDimension'), dataIndex);\n      point = coordSys.dataToPoint(stackedData) || [];\n    } else {\n      point = coordSys.dataToPoint(data.getValues(zrUtil.map(coordSys.dimensions, function (dim) {\n        return data.mapDimension(dim);\n      }), dataIndex)) || [];\n    }\n  } else if (el) {\n    // Use graphic bounding rect\n    var rect = el.getBoundingRect().clone();\n    rect.applyTransform(el.transform);\n    point = [rect.x + rect.width / 2, rect.y + rect.height / 2];\n  }\n\n  return {\n    point: point,\n    el: el\n  };\n}"]},"metadata":{},"sourceType":"module"}