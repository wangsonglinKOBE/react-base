{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u684C\\u9762\\\\react\\u57FA\\u7840\\u539F\\u7406\\u5206\\u6790\\\\react_extension\\\\src\\\\components\\\\001_hooks\\u521D\\u8BC6\\\\index.jsx\";\nimport React, { Component, createRef, createContext, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Foo extends Component {\n  constructor(...args) {\n    super(...args);\n    this.ccc = /*#__PURE__*/createRef();\n\n    this.onClick = () => {\n      // 这里注意.current拿到的才是inpput节点\n      this.ccc.current.focus();\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        ref: this.ccc\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.onClick,\n        children: \"\\u805A\\u7126\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 12,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nconst App = () => {\n  const onClick = () => {\n    console.log(ccc);\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Foo, {\n      ref: ccc\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: onClick,\n      children: \"\\u805A\\u7126\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n\n_c = App;\nexport default App; // // 创建一个Context对象\n// const AppContext = createContext()\n// // 最外层组件(祖父组件) App \n// const App = () => {\n//     return (\n//         // 使用AppContext.Provider包裹父组件，并且传值\n//         <AppContext.Provider value=\"kobe-bryant\">\n//             <Middle />\n//         </AppContext.Provider>\n//     )\n// }\n// // 父组件 Middle\n// const Middle = () => {\n//     return (<> <Foo /> <Bar /> <Baz /> </>)\n// }\n// // 类 孙子 组件 Foo\n// class Foo extends Component {\n//     render() {\n//         return (\n//             // 使用AppContext.Consumer在类组件中接收值(较老的方式，不是很友好)\n//             <AppContext.Consumer>\n//                 { value => <div>{value}</div> }\n//             </AppContext.Consumer>\n//         )\n//     }\n// }\n// // 类 孙子 组件 Bar\n// class Bar extends Component {\n//     // 在类组价的静态属性上绑定contextType并赋值为创建的Context对象\n//     static contextType = AppContext\n//     render() {\n//         // 通过this.context拿到传递过来的value(较新的方法，推荐)\n//         return (<div>{this.context}</div>)\n//     }\n// }\n// // 函数 孙子 组件 Baz\n// const Baz = () => {\n//     // 在函数组件中通过useContext Hook来使用Context,useContext函数中传入创建好的Context对象,\n//     // 返回值就是传递过来的value\n//     const value = useContext(AppContext)\n//     return (<div>{value}</div>)\n// }\n// export default App\n// const FriendStatus = props => {\n//     // 调用自定义的HOOK => useExample\n//     const isOnline = useExample(props.friend.id)\n//     if (isOnline === null) {\n//         return 'Loading...'\n//     }\n//     return isOnline ? 'Online' : 'Offline'\n// }\n// const FriendListItem = props => {\n//     // 调用自定义的HOOK => useExample\n//     const isOnline = useExample(props.friend.id)\n//     return (\n//         <li style={{color: isOnline ? 'green' : 'black'}}>\n//             {props.friend.name}\n//         </li>\n//     )\n// }\n// export default FriendListItem\n// export const useExample = friendID => {\n//     const [isOnline, setIsOnline] = useState(null)\n//     handleStatusChange = status => {\n//         setIsOnline(status.isOnline)\n//     }\n//     useEffect(() => {\n//         ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange)\n//         return () => {\n//             ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);\n//         }\n//     })\n//     return isOnline\n// }\n// export default function Example(props) {\n//     const [count, setCount] = useState(0)\n//     useEffect(() => {\n//         document.title = `你点击了 ${count} 次按钮`\n//     })\n//     const [isOnline, setIsOnline] = useState(null)\n//     useEffect(() => {\n//         ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange)\n//         return () => {\n//             ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange)\n//         }\n//     })\n//     handleStatusChange = status => {\n//         setIsOnline(status.isOnline)\n//     }\n//     return (\n//         <div>\n//             <p>你点击了 {count} 次按钮</p>\n//             <button onClick={() => setCount(count + 1)} > 点我 </button>\n//         </div>\n//     )\n// }\n// export default function Example(props) {\n//     const [isOnline, setIsOnline] = useState(null)\n//     handleStatusChange = status => {\n//         setIsOnline(status.isOnline)\n//     }\n//     useEffect(() => {\n//         ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange)\n//         return () => {\n//             ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange)\n//         }\n//     }, [props.friend.id])\n//     if (isOnline === null) {\n//         return 'Loading...'\n//     }\n//     return isOnline ? 'Online' : 'Offline'\n// }\n// export default function Example() {\n//     const [count, setCount] = useState(0)\n//     // 相当于 componentDidMount 和 componentDidUpdate\n//     useEffect(() => {\n//         // 使用浏览器的API更新页面标题\n//         document.title = `你点击了 ${count} 次按钮`\n//     })\n//     return (\n//         <div>\n//             <p>你点击了 {count} 次按钮</p>\n//             <button onClick={() => setCount(count + 1)} > 点我 </button>\n//         </div>\n//     )\n// }\n// export default function Example() {\n//     // 声明一个新的 \"state\"变量 “count” \n//     const [count, setCount] = useState(0)\n//     return (\n//         <div>\n//             <p>你点击了 {count} 次按钮</p>\n//             <button onClick={() => setCount(count + 1)} > 点我 </button>\n//         </div>\n//     )\n// }\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/src/components/001_hooks初识/index.jsx"],"names":["React","Component","createRef","createContext","useContext","Foo","ccc","onClick","current","focus","render","App","console","log"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,SAA3B,EAAsCC,aAAtC,EAAqDC,UAArD,QAAuE,OAAvE;;;AACA,MAAMC,GAAN,SAAkBJ,SAAlB,CAA4B;AAAA;AAAA;AAAA,SACxBK,GADwB,gBAClBJ,SAAS,EADS;;AAAA,SAExBK,OAFwB,GAEd,MAAM;AACZ;AACA,WAAKD,GAAL,CAASE,OAAT,CAAiBC,KAAjB;AACH,KALuB;AAAA;;AAMxBC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA,8BACI;AAAO,QAAA,IAAI,EAAC,MAAZ;AAAmB,QAAA,GAAG,EAAE,KAAKJ;AAA7B;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAQ,QAAA,OAAO,EAAE,KAAKC,OAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAbuB;;AAe5B,MAAMI,GAAG,GAAG,MAAM;AACd,QAAMJ,OAAO,GAAG,MAAM;AAClBK,IAAAA,OAAO,CAACC,GAAR,CAAYP,GAAZ;AACH,GAFD;;AAGA,sBACI;AAAA,4BACI,QAAC,GAAD;AAAK,MAAA,GAAG,EAAEA;AAAV;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAQ,MAAA,OAAO,EAAEC,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH,CAVD;;KAAMI,G;AAWN,eAAeA,GAAfsourcesContent":["import React, { Component, createRef, createContext, useContext } from 'react'\r\nclass Foo extends Component {\r\n    ccc = createRef()\r\n    onClick = () => {\r\n        // 这里注意.current拿到的才是inpput节点\r\n        this.ccc.current.focus()\r\n    }\r\n    render() {\r\n        return (\r\n            <div>\r\n                <input type=\"text\" ref={this.ccc} />\r\n                <button onClick={this.onClick}>聚焦</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst App = () => {\r\n    const onClick = () => {\r\n        console.log(ccc)\r\n    }\r\n    return (\r\n        <div>\r\n            <Foo ref={ccc} />\r\n            <button onClick={onClick}>聚焦</button>\r\n        </div>\r\n    )\r\n}\r\nexport default App\r\n\r\n\r\n\r\n// // 创建一个Context对象\r\n// const AppContext = createContext()\r\n\r\n// // 最外层组件(祖父组件) App \r\n// const App = () => {\r\n//     return (\r\n//         // 使用AppContext.Provider包裹父组件，并且传值\r\n//         <AppContext.Provider value=\"kobe-bryant\">\r\n//             <Middle />\r\n//         </AppContext.Provider>\r\n//     )\r\n// }\r\n\r\n// // 父组件 Middle\r\n// const Middle = () => {\r\n//     return (<> <Foo /> <Bar /> <Baz /> </>)\r\n// }\r\n\r\n// // 类 孙子 组件 Foo\r\n// class Foo extends Component {\r\n//     render() {\r\n//         return (\r\n//             // 使用AppContext.Consumer在类组件中接收值(较老的方式，不是很友好)\r\n//             <AppContext.Consumer>\r\n//                 { value => <div>{value}</div> }\r\n//             </AppContext.Consumer>\r\n//         )\r\n//     }\r\n// }\r\n\r\n// // 类 孙子 组件 Bar\r\n// class Bar extends Component {\r\n//     // 在类组价的静态属性上绑定contextType并赋值为创建的Context对象\r\n//     static contextType = AppContext\r\n//     render() {\r\n//         // 通过this.context拿到传递过来的value(较新的方法，推荐)\r\n//         return (<div>{this.context}</div>)\r\n//     }\r\n// }\r\n\r\n// // 函数 孙子 组件 Baz\r\n// const Baz = () => {\r\n//     // 在函数组件中通过useContext Hook来使用Context,useContext函数中传入创建好的Context对象,\r\n//     // 返回值就是传递过来的value\r\n//     const value = useContext(AppContext)\r\n//     return (<div>{value}</div>)\r\n// }\r\n// export default App\r\n\r\n\r\n\r\n\r\n// const FriendStatus = props => {\r\n//     // 调用自定义的HOOK => useExample\r\n//     const isOnline = useExample(props.friend.id)\r\n\r\n//     if (isOnline === null) {\r\n//         return 'Loading...'\r\n//     }\r\n//     return isOnline ? 'Online' : 'Offline'\r\n// }\r\n\r\n// const FriendListItem = props => {\r\n//     // 调用自定义的HOOK => useExample\r\n//     const isOnline = useExample(props.friend.id)\r\n\r\n//     return (\r\n//         <li style={{color: isOnline ? 'green' : 'black'}}>\r\n//             {props.friend.name}\r\n//         </li>\r\n//     )\r\n// }\r\n\r\n// export default FriendListItem\r\n\r\n// export const useExample = friendID => {\r\n//     const [isOnline, setIsOnline] = useState(null)\r\n//     handleStatusChange = status => {\r\n//         setIsOnline(status.isOnline)\r\n//     }\r\n\r\n//     useEffect(() => {\r\n//         ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange)\r\n//         return () => {\r\n//             ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);\r\n//         }\r\n//     })\r\n//     return isOnline\r\n// }\r\n\r\n// export default function Example(props) {\r\n\r\n//     const [count, setCount] = useState(0)\r\n//     useEffect(() => {\r\n//         document.title = `你点击了 ${count} 次按钮`\r\n//     })\r\n\r\n//     const [isOnline, setIsOnline] = useState(null)\r\n//     useEffect(() => {\r\n//         ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange)\r\n//         return () => {\r\n//             ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange)\r\n//         }\r\n//     })\r\n\r\n//     handleStatusChange = status => {\r\n//         setIsOnline(status.isOnline)\r\n//     }\r\n\r\n//     return (\r\n//         <div>\r\n//             <p>你点击了 {count} 次按钮</p>\r\n//             <button onClick={() => setCount(count + 1)} > 点我 </button>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default function Example(props) {\r\n//     const [isOnline, setIsOnline] = useState(null)\r\n\r\n//     handleStatusChange = status => {\r\n//         setIsOnline(status.isOnline)\r\n//     }\r\n\r\n//     useEffect(() => {\r\n//         ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange)\r\n//         return () => {\r\n//             ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange)\r\n//         }\r\n//     }, [props.friend.id])\r\n\r\n//     if (isOnline === null) {\r\n//         return 'Loading...'\r\n//     }\r\n\r\n//     return isOnline ? 'Online' : 'Offline'\r\n// }\r\n\r\n// export default function Example() {\r\n//     const [count, setCount] = useState(0)\r\n\r\n//     // 相当于 componentDidMount 和 componentDidUpdate\r\n//     useEffect(() => {\r\n//         // 使用浏览器的API更新页面标题\r\n//         document.title = `你点击了 ${count} 次按钮`\r\n//     })\r\n\r\n//     return (\r\n//         <div>\r\n//             <p>你点击了 {count} 次按钮</p>\r\n//             <button onClick={() => setCount(count + 1)} > 点我 </button>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default function Example() {\r\n\r\n//     // 声明一个新的 \"state\"变量 “count” \r\n//     const [count, setCount] = useState(0)\r\n//     return (\r\n//         <div>\r\n//             <p>你点击了 {count} 次按钮</p>\r\n//             <button onClick={() => setCount(count + 1)} > 点我 </button>\r\n//         </div>\r\n//     )\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}