{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport AxisBuilder from './AxisBuilder';\nimport BrushController from '../helper/BrushController';\nimport * as brushHelper from '../helper/brushHelper';\nimport * as graphic from '../../util/graphic';\nimport ComponentView from '../../view/Component';\nvar elementList = ['axisLine', 'axisTickLabel', 'axisName'];\n\nvar ParallelAxisView =\n/** @class */\nfunction (_super) {\n  __extends(ParallelAxisView, _super);\n\n  function ParallelAxisView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = ParallelAxisView.type;\n    return _this;\n  }\n\n  ParallelAxisView.prototype.init = function (ecModel, api) {\n    _super.prototype.init.apply(this, arguments);\n\n    (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this));\n  };\n\n  ParallelAxisView.prototype.render = function (axisModel, ecModel, api, payload) {\n    if (fromAxisAreaSelect(axisModel, ecModel, payload)) {\n      return;\n    }\n\n    this.axisModel = axisModel;\n    this.api = api;\n    this.group.removeAll();\n    var oldAxisGroup = this._axisGroup;\n    this._axisGroup = new graphic.Group();\n    this.group.add(this._axisGroup);\n\n    if (!axisModel.get('show')) {\n      return;\n    }\n\n    var coordSysModel = getCoordSysModel(axisModel, ecModel);\n    var coordSys = coordSysModel.coordinateSystem;\n    var areaSelectStyle = axisModel.getAreaSelectStyle();\n    var areaWidth = areaSelectStyle.width;\n    var dim = axisModel.axis.dim;\n    var axisLayout = coordSys.getAxisLayout(dim);\n    var builderOpt = zrUtil.extend({\n      strokeContainThreshold: areaWidth\n    }, axisLayout);\n    var axisBuilder = new AxisBuilder(axisModel, builderOpt);\n    zrUtil.each(elementList, axisBuilder.add, axisBuilder);\n\n    this._axisGroup.add(axisBuilder.getGroup());\n\n    this._refreshBrushController(builderOpt, areaSelectStyle, axisModel, coordSysModel, areaWidth, api);\n\n    graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n  }; // /**\n  //  * @override\n  //  */\n  // updateVisual(axisModel, ecModel, api, payload) {\n  //     this._brushController && this._brushController\n  //         .updateCovers(getCoverInfoList(axisModel));\n  // }\n\n\n  ParallelAxisView.prototype._refreshBrushController = function (builderOpt, areaSelectStyle, axisModel, coordSysModel, areaWidth, api) {\n    // After filtering, axis may change, select area needs to be update.\n    var extent = axisModel.axis.getExtent();\n    var extentLen = extent[1] - extent[0];\n    var extra = Math.min(30, Math.abs(extentLen) * 0.1); // Arbitrary value.\n    // width/height might be negative, which will be\n    // normalized in BoundingRect.\n\n    var rect = graphic.BoundingRect.create({\n      x: extent[0],\n      y: -areaWidth / 2,\n      width: extentLen,\n      height: areaWidth\n    });\n    rect.x -= extra;\n    rect.width += 2 * extra;\n\n    this._brushController.mount({\n      enableGlobalPan: true,\n      rotation: builderOpt.rotation,\n      x: builderOpt.position[0],\n      y: builderOpt.position[1]\n    }).setPanels([{\n      panelId: 'pl',\n      clipPath: brushHelper.makeRectPanelClipPath(rect),\n      isTargetByCursor: brushHelper.makeRectIsTargetByCursor(rect, api, coordSysModel),\n      getLinearBrushOtherExtent: brushHelper.makeLinearBrushOtherExtent(rect, 0)\n    }]).enableBrush({\n      brushType: 'lineX',\n      brushStyle: areaSelectStyle,\n      removeOnClick: true\n    }).updateCovers(getCoverInfoList(axisModel));\n  };\n\n  ParallelAxisView.prototype._onBrush = function (eventParam) {\n    var coverInfoList = eventParam.areas; // Do not cache these object, because the mey be changed.\n\n    var axisModel = this.axisModel;\n    var axis = axisModel.axis;\n    var intervals = zrUtil.map(coverInfoList, function (coverInfo) {\n      return [axis.coordToData(coverInfo.range[0], true), axis.coordToData(coverInfo.range[1], true)];\n    }); // If realtime is true, action is not dispatched on drag end, because\n    // the drag end emits the same params with the last drag move event,\n    // and may have some delay when using touch pad.\n\n    if (!axisModel.option.realtime === eventParam.isEnd || eventParam.removeOnClick) {\n      // jshint ignore:line\n      this.api.dispatchAction({\n        type: 'axisAreaSelect',\n        parallelAxisId: axisModel.id,\n        intervals: intervals\n      });\n    }\n  };\n\n  ParallelAxisView.prototype.dispose = function () {\n    this._brushController.dispose();\n  };\n\n  ParallelAxisView.type = 'parallelAxis';\n  return ParallelAxisView;\n}(ComponentView);\n\nfunction fromAxisAreaSelect(axisModel, ecModel, payload) {\n  return payload && payload.type === 'axisAreaSelect' && ecModel.findComponents({\n    mainType: 'parallelAxis',\n    query: payload\n  })[0] === axisModel;\n}\n\nfunction getCoverInfoList(axisModel) {\n  var axis = axisModel.axis;\n  return zrUtil.map(axisModel.activeIntervals, function (interval) {\n    return {\n      brushType: 'lineX',\n      panelId: 'pl',\n      range: [axis.dataToCoord(interval[0], true), axis.dataToCoord(interval[1], true)]\n    };\n  });\n}\n\nfunction getCoordSysModel(axisModel, ecModel) {\n  return ecModel.getComponent('parallel', axisModel.get('parallelIndex'));\n}\n\nexport default ParallelAxisView;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/component/axis/ParallelAxisView.js"],"names":["__extends","zrUtil","AxisBuilder","BrushController","brushHelper","graphic","ComponentView","elementList","ParallelAxisView","_super","_this","apply","arguments","type","prototype","init","ecModel","api","_brushController","getZr","on","bind","_onBrush","render","axisModel","payload","fromAxisAreaSelect","group","removeAll","oldAxisGroup","_axisGroup","Group","add","get","coordSysModel","getCoordSysModel","coordSys","coordinateSystem","areaSelectStyle","getAreaSelectStyle","areaWidth","width","dim","axis","axisLayout","getAxisLayout","builderOpt","extend","strokeContainThreshold","axisBuilder","each","getGroup","_refreshBrushController","groupTransition","extent","getExtent","extentLen","extra","Math","min","abs","rect","BoundingRect","create","x","y","height","mount","enableGlobalPan","rotation","position","setPanels","panelId","clipPath","makeRectPanelClipPath","isTargetByCursor","makeRectIsTargetByCursor","getLinearBrushOtherExtent","makeLinearBrushOtherExtent","enableBrush","brushType","brushStyle","removeOnClick","updateCovers","getCoverInfoList","eventParam","coverInfoList","areas","intervals","map","coverInfo","coordToData","range","option","realtime","isEnd","dispatchAction","parallelAxisId","id","dispose","findComponents","mainType","query","activeIntervals","interval","dataToCoord","getComponent"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport AxisBuilder from './AxisBuilder';\nimport BrushController from '../helper/BrushController';\nimport * as brushHelper from '../helper/brushHelper';\nimport * as graphic from '../../util/graphic';\nimport ComponentView from '../../view/Component';\nvar elementList = ['axisLine', 'axisTickLabel', 'axisName'];\n\nvar ParallelAxisView =\n/** @class */\nfunction (_super) {\n  __extends(ParallelAxisView, _super);\n\n  function ParallelAxisView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = ParallelAxisView.type;\n    return _this;\n  }\n\n  ParallelAxisView.prototype.init = function (ecModel, api) {\n    _super.prototype.init.apply(this, arguments);\n\n    (this._brushController = new BrushController(api.getZr())).on('brush', zrUtil.bind(this._onBrush, this));\n  };\n\n  ParallelAxisView.prototype.render = function (axisModel, ecModel, api, payload) {\n    if (fromAxisAreaSelect(axisModel, ecModel, payload)) {\n      return;\n    }\n\n    this.axisModel = axisModel;\n    this.api = api;\n    this.group.removeAll();\n    var oldAxisGroup = this._axisGroup;\n    this._axisGroup = new graphic.Group();\n    this.group.add(this._axisGroup);\n\n    if (!axisModel.get('show')) {\n      return;\n    }\n\n    var coordSysModel = getCoordSysModel(axisModel, ecModel);\n    var coordSys = coordSysModel.coordinateSystem;\n    var areaSelectStyle = axisModel.getAreaSelectStyle();\n    var areaWidth = areaSelectStyle.width;\n    var dim = axisModel.axis.dim;\n    var axisLayout = coordSys.getAxisLayout(dim);\n    var builderOpt = zrUtil.extend({\n      strokeContainThreshold: areaWidth\n    }, axisLayout);\n    var axisBuilder = new AxisBuilder(axisModel, builderOpt);\n    zrUtil.each(elementList, axisBuilder.add, axisBuilder);\n\n    this._axisGroup.add(axisBuilder.getGroup());\n\n    this._refreshBrushController(builderOpt, areaSelectStyle, axisModel, coordSysModel, areaWidth, api);\n\n    graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n  }; // /**\n  //  * @override\n  //  */\n  // updateVisual(axisModel, ecModel, api, payload) {\n  //     this._brushController && this._brushController\n  //         .updateCovers(getCoverInfoList(axisModel));\n  // }\n\n\n  ParallelAxisView.prototype._refreshBrushController = function (builderOpt, areaSelectStyle, axisModel, coordSysModel, areaWidth, api) {\n    // After filtering, axis may change, select area needs to be update.\n    var extent = axisModel.axis.getExtent();\n    var extentLen = extent[1] - extent[0];\n    var extra = Math.min(30, Math.abs(extentLen) * 0.1); // Arbitrary value.\n    // width/height might be negative, which will be\n    // normalized in BoundingRect.\n\n    var rect = graphic.BoundingRect.create({\n      x: extent[0],\n      y: -areaWidth / 2,\n      width: extentLen,\n      height: areaWidth\n    });\n    rect.x -= extra;\n    rect.width += 2 * extra;\n\n    this._brushController.mount({\n      enableGlobalPan: true,\n      rotation: builderOpt.rotation,\n      x: builderOpt.position[0],\n      y: builderOpt.position[1]\n    }).setPanels([{\n      panelId: 'pl',\n      clipPath: brushHelper.makeRectPanelClipPath(rect),\n      isTargetByCursor: brushHelper.makeRectIsTargetByCursor(rect, api, coordSysModel),\n      getLinearBrushOtherExtent: brushHelper.makeLinearBrushOtherExtent(rect, 0)\n    }]).enableBrush({\n      brushType: 'lineX',\n      brushStyle: areaSelectStyle,\n      removeOnClick: true\n    }).updateCovers(getCoverInfoList(axisModel));\n  };\n\n  ParallelAxisView.prototype._onBrush = function (eventParam) {\n    var coverInfoList = eventParam.areas; // Do not cache these object, because the mey be changed.\n\n    var axisModel = this.axisModel;\n    var axis = axisModel.axis;\n    var intervals = zrUtil.map(coverInfoList, function (coverInfo) {\n      return [axis.coordToData(coverInfo.range[0], true), axis.coordToData(coverInfo.range[1], true)];\n    }); // If realtime is true, action is not dispatched on drag end, because\n    // the drag end emits the same params with the last drag move event,\n    // and may have some delay when using touch pad.\n\n    if (!axisModel.option.realtime === eventParam.isEnd || eventParam.removeOnClick) {\n      // jshint ignore:line\n      this.api.dispatchAction({\n        type: 'axisAreaSelect',\n        parallelAxisId: axisModel.id,\n        intervals: intervals\n      });\n    }\n  };\n\n  ParallelAxisView.prototype.dispose = function () {\n    this._brushController.dispose();\n  };\n\n  ParallelAxisView.type = 'parallelAxis';\n  return ParallelAxisView;\n}(ComponentView);\n\nfunction fromAxisAreaSelect(axisModel, ecModel, payload) {\n  return payload && payload.type === 'axisAreaSelect' && ecModel.findComponents({\n    mainType: 'parallelAxis',\n    query: payload\n  })[0] === axisModel;\n}\n\nfunction getCoverInfoList(axisModel) {\n  var axis = axisModel.axis;\n  return zrUtil.map(axisModel.activeIntervals, function (interval) {\n    return {\n      brushType: 'lineX',\n      panelId: 'pl',\n      range: [axis.dataToCoord(interval[0], true), axis.dataToCoord(interval[1], true)]\n    };\n  });\n}\n\nfunction getCoordSysModel(axisModel, ecModel) {\n  return ecModel.getComponent('parallel', axisModel.get('parallelIndex'));\n}\n\nexport default ParallelAxisView;"]},"metadata":{},"sourceType":"module"}