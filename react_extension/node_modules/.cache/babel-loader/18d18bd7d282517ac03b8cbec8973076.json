{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Tree data structure\n */\nimport * as zrUtil from 'zrender/lib/core/util';\nimport linkSeriesData from './helper/linkSeriesData';\nimport SeriesData from './SeriesData';\nimport prepareSeriesDataSchema from './helper/createDimensions';\nimport { convertOptionIdName } from '../util/model';\n\nvar TreeNode =\n/** @class */\nfunction () {\n  function TreeNode(name, hostTree) {\n    this.depth = 0;\n    this.height = 0;\n    /**\n     * Reference to list item.\n     * Do not persistent dataIndex outside,\n     * besause it may be changed by list.\n     * If dataIndex -1,\n     * this node is logical deleted (filtered) in list.\n     */\n\n    this.dataIndex = -1;\n    this.children = [];\n    this.viewChildren = [];\n    this.isExpand = false;\n    this.name = name || '';\n    this.hostTree = hostTree;\n  }\n  /**\n   * The node is removed.\n   */\n\n\n  TreeNode.prototype.isRemoved = function () {\n    return this.dataIndex < 0;\n  };\n\n  TreeNode.prototype.eachNode = function (options, cb, context) {\n    if (typeof options === 'function') {\n      context = cb;\n      cb = options;\n      options = null;\n    }\n\n    options = options || {};\n\n    if (zrUtil.isString(options)) {\n      options = {\n        order: options\n      };\n    }\n\n    var order = options.order || 'preorder';\n    var children = this[options.attr || 'children'];\n    var suppressVisitSub;\n    order === 'preorder' && (suppressVisitSub = cb.call(context, this));\n\n    for (var i = 0; !suppressVisitSub && i < children.length; i++) {\n      children[i].eachNode(options, cb, context);\n    }\n\n    order === 'postorder' && cb.call(context, this);\n  };\n  /**\n   * Update depth and height of this subtree.\n   */\n\n\n  TreeNode.prototype.updateDepthAndHeight = function (depth) {\n    var height = 0;\n    this.depth = depth;\n\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      child.updateDepthAndHeight(depth + 1);\n\n      if (child.height > height) {\n        height = child.height;\n      }\n    }\n\n    this.height = height + 1;\n  };\n\n  TreeNode.prototype.getNodeById = function (id) {\n    if (this.getId() === id) {\n      return this;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].getNodeById(id);\n\n      if (res) {\n        return res;\n      }\n    }\n  };\n\n  TreeNode.prototype.contains = function (node) {\n    if (node === this) {\n      return true;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].contains(node);\n\n      if (res) {\n        return res;\n      }\n    }\n  };\n  /**\n   * @param includeSelf Default false.\n   * @return order: [root, child, grandchild, ...]\n   */\n\n\n  TreeNode.prototype.getAncestors = function (includeSelf) {\n    var ancestors = [];\n    var node = includeSelf ? this : this.parentNode;\n\n    while (node) {\n      ancestors.push(node);\n      node = node.parentNode;\n    }\n\n    ancestors.reverse();\n    return ancestors;\n  };\n\n  TreeNode.prototype.getAncestorsIndices = function () {\n    var indices = [];\n    var currNode = this;\n\n    while (currNode) {\n      indices.push(currNode.dataIndex);\n      currNode = currNode.parentNode;\n    }\n\n    indices.reverse();\n    return indices;\n  };\n\n  TreeNode.prototype.getDescendantIndices = function () {\n    var indices = [];\n    this.eachNode(function (childNode) {\n      indices.push(childNode.dataIndex);\n    });\n    return indices;\n  };\n\n  TreeNode.prototype.getValue = function (dimension) {\n    var data = this.hostTree.data;\n    return data.getStore().get(data.getDimensionIndex(dimension || 'value'), this.dataIndex);\n  };\n\n  TreeNode.prototype.setLayout = function (layout, merge) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\n  };\n  /**\n   * @return {Object} layout\n   */\n\n\n  TreeNode.prototype.getLayout = function () {\n    return this.hostTree.data.getItemLayout(this.dataIndex);\n  }; // @depcrecated\n  // getModel<T = unknown, S extends keyof T = keyof T>(path: S): Model<T[S]>\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  TreeNode.prototype.getModel = function (path) {\n    if (this.dataIndex < 0) {\n      return;\n    }\n\n    var hostTree = this.hostTree;\n    var itemModel = hostTree.data.getItemModel(this.dataIndex);\n    return itemModel.getModel(path);\n  }; // TODO: TYPE More specific model\n\n\n  TreeNode.prototype.getLevelModel = function () {\n    return (this.hostTree.levelModels || [])[this.depth];\n  };\n\n  TreeNode.prototype.setVisual = function (key, value) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\n  };\n  /**\n   * Get item visual\n   * FIXME: make return type better\n   */\n\n\n  TreeNode.prototype.getVisual = function (key) {\n    return this.hostTree.data.getItemVisual(this.dataIndex, key);\n  };\n\n  TreeNode.prototype.getRawIndex = function () {\n    return this.hostTree.data.getRawIndex(this.dataIndex);\n  };\n\n  TreeNode.prototype.getId = function () {\n    return this.hostTree.data.getId(this.dataIndex);\n  };\n  /**\n   * index in parent's children\n   */\n\n\n  TreeNode.prototype.getChildIndex = function () {\n    if (this.parentNode) {\n      var children = this.parentNode.children;\n\n      for (var i = 0; i < children.length; ++i) {\n        if (children[i] === this) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n\n    return -1;\n  };\n  /**\n   * if this is an ancestor of another node\n   *\n   * @param node another node\n   * @return if is ancestor\n   */\n\n\n  TreeNode.prototype.isAncestorOf = function (node) {\n    var parent = node.parentNode;\n\n    while (parent) {\n      if (parent === this) {\n        return true;\n      }\n\n      parent = parent.parentNode;\n    }\n\n    return false;\n  };\n  /**\n   * if this is an descendant of another node\n   *\n   * @param node another node\n   * @return if is descendant\n   */\n\n\n  TreeNode.prototype.isDescendantOf = function (node) {\n    return node !== this && node.isAncestorOf(this);\n  };\n\n  return TreeNode;\n}();\n\nexport { TreeNode };\n;\n\nvar Tree =\n/** @class */\nfunction () {\n  function Tree(hostModel) {\n    this.type = 'tree';\n    this._nodes = [];\n    this.hostModel = hostModel;\n  }\n\n  Tree.prototype.eachNode = function (options, cb, context) {\n    this.root.eachNode(options, cb, context);\n  };\n\n  Tree.prototype.getNodeByDataIndex = function (dataIndex) {\n    var rawIndex = this.data.getRawIndex(dataIndex);\n    return this._nodes[rawIndex];\n  };\n\n  Tree.prototype.getNodeById = function (name) {\n    return this.root.getNodeById(name);\n  };\n  /**\n   * Update item available by list,\n   * when list has been performed options like 'filterSelf' or 'map'.\n   */\n\n\n  Tree.prototype.update = function () {\n    var data = this.data;\n    var nodes = this._nodes;\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      nodes[i].dataIndex = -1;\n    }\n\n    for (var i = 0, len = data.count(); i < len; i++) {\n      nodes[data.getRawIndex(i)].dataIndex = i;\n    }\n  };\n  /**\n   * Clear all layouts\n   */\n\n\n  Tree.prototype.clearLayouts = function () {\n    this.data.clearItemLayouts();\n  };\n  /**\n   * data node format:\n   * {\n   *     name: ...\n   *     value: ...\n   *     children: [\n   *         {\n   *             name: ...\n   *             value: ...\n   *             children: ...\n   *         },\n   *         ...\n   *     ]\n   * }\n   */\n\n\n  Tree.createTree = function (dataRoot, hostModel, beforeLink) {\n    var tree = new Tree(hostModel);\n    var listData = [];\n    var dimMax = 1;\n    buildHierarchy(dataRoot);\n\n    function buildHierarchy(dataNode, parentNode) {\n      var value = dataNode.value;\n      dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);\n      listData.push(dataNode);\n      var node = new TreeNode(convertOptionIdName(dataNode.name, ''), tree);\n      parentNode ? addChild(node, parentNode) : tree.root = node;\n\n      tree._nodes.push(node);\n\n      var children = dataNode.children;\n\n      if (children) {\n        for (var i = 0; i < children.length; i++) {\n          buildHierarchy(children[i], node);\n        }\n      }\n    }\n\n    tree.root.updateDepthAndHeight(0);\n    var dimensions = prepareSeriesDataSchema(listData, {\n      coordDimensions: ['value'],\n      dimensionsCount: dimMax\n    }).dimensions;\n    var list = new SeriesData(dimensions, hostModel);\n    list.initData(listData);\n    beforeLink && beforeLink(list);\n    linkSeriesData({\n      mainData: list,\n      struct: tree,\n      structAttr: 'tree'\n    });\n    tree.update();\n    return tree;\n  };\n\n  return Tree;\n}();\n/**\n * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\n * so this function is not ready and not necessary to be public.\n */\n\n\nfunction addChild(child, node) {\n  var children = node.children;\n\n  if (child.parentNode === node) {\n    return;\n  }\n\n  children.push(child);\n  child.parentNode = node;\n}\n\nexport default Tree;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/data/Tree.js"],"names":["zrUtil","linkSeriesData","SeriesData","prepareSeriesDataSchema","convertOptionIdName","TreeNode","name","hostTree","depth","height","dataIndex","children","viewChildren","isExpand","prototype","isRemoved","eachNode","options","cb","context","isString","order","attr","suppressVisitSub","call","i","length","updateDepthAndHeight","child","getNodeById","id","getId","len","res","contains","node","getAncestors","includeSelf","ancestors","parentNode","push","reverse","getAncestorsIndices","indices","currNode","getDescendantIndices","childNode","getValue","dimension","data","getStore","get","getDimensionIndex","setLayout","layout","merge","setItemLayout","getLayout","getItemLayout","getModel","path","itemModel","getItemModel","getLevelModel","levelModels","setVisual","key","value","setItemVisual","getVisual","getItemVisual","getRawIndex","getChildIndex","isAncestorOf","parent","isDescendantOf","Tree","hostModel","type","_nodes","root","getNodeByDataIndex","rawIndex","update","nodes","count","clearLayouts","clearItemLayouts","createTree","dataRoot","beforeLink","tree","listData","dimMax","buildHierarchy","dataNode","Math","max","isArray","addChild","dimensions","coordDimensions","dimensionsCount","list","initData","mainData","struct","structAttr"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Tree data structure\n */\nimport * as zrUtil from 'zrender/lib/core/util';\nimport linkSeriesData from './helper/linkSeriesData';\nimport SeriesData from './SeriesData';\nimport prepareSeriesDataSchema from './helper/createDimensions';\nimport { convertOptionIdName } from '../util/model';\n\nvar TreeNode =\n/** @class */\nfunction () {\n  function TreeNode(name, hostTree) {\n    this.depth = 0;\n    this.height = 0;\n    /**\n     * Reference to list item.\n     * Do not persistent dataIndex outside,\n     * besause it may be changed by list.\n     * If dataIndex -1,\n     * this node is logical deleted (filtered) in list.\n     */\n\n    this.dataIndex = -1;\n    this.children = [];\n    this.viewChildren = [];\n    this.isExpand = false;\n    this.name = name || '';\n    this.hostTree = hostTree;\n  }\n  /**\n   * The node is removed.\n   */\n\n\n  TreeNode.prototype.isRemoved = function () {\n    return this.dataIndex < 0;\n  };\n\n  TreeNode.prototype.eachNode = function (options, cb, context) {\n    if (typeof options === 'function') {\n      context = cb;\n      cb = options;\n      options = null;\n    }\n\n    options = options || {};\n\n    if (zrUtil.isString(options)) {\n      options = {\n        order: options\n      };\n    }\n\n    var order = options.order || 'preorder';\n    var children = this[options.attr || 'children'];\n    var suppressVisitSub;\n    order === 'preorder' && (suppressVisitSub = cb.call(context, this));\n\n    for (var i = 0; !suppressVisitSub && i < children.length; i++) {\n      children[i].eachNode(options, cb, context);\n    }\n\n    order === 'postorder' && cb.call(context, this);\n  };\n  /**\n   * Update depth and height of this subtree.\n   */\n\n\n  TreeNode.prototype.updateDepthAndHeight = function (depth) {\n    var height = 0;\n    this.depth = depth;\n\n    for (var i = 0; i < this.children.length; i++) {\n      var child = this.children[i];\n      child.updateDepthAndHeight(depth + 1);\n\n      if (child.height > height) {\n        height = child.height;\n      }\n    }\n\n    this.height = height + 1;\n  };\n\n  TreeNode.prototype.getNodeById = function (id) {\n    if (this.getId() === id) {\n      return this;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].getNodeById(id);\n\n      if (res) {\n        return res;\n      }\n    }\n  };\n\n  TreeNode.prototype.contains = function (node) {\n    if (node === this) {\n      return true;\n    }\n\n    for (var i = 0, children = this.children, len = children.length; i < len; i++) {\n      var res = children[i].contains(node);\n\n      if (res) {\n        return res;\n      }\n    }\n  };\n  /**\n   * @param includeSelf Default false.\n   * @return order: [root, child, grandchild, ...]\n   */\n\n\n  TreeNode.prototype.getAncestors = function (includeSelf) {\n    var ancestors = [];\n    var node = includeSelf ? this : this.parentNode;\n\n    while (node) {\n      ancestors.push(node);\n      node = node.parentNode;\n    }\n\n    ancestors.reverse();\n    return ancestors;\n  };\n\n  TreeNode.prototype.getAncestorsIndices = function () {\n    var indices = [];\n    var currNode = this;\n\n    while (currNode) {\n      indices.push(currNode.dataIndex);\n      currNode = currNode.parentNode;\n    }\n\n    indices.reverse();\n    return indices;\n  };\n\n  TreeNode.prototype.getDescendantIndices = function () {\n    var indices = [];\n    this.eachNode(function (childNode) {\n      indices.push(childNode.dataIndex);\n    });\n    return indices;\n  };\n\n  TreeNode.prototype.getValue = function (dimension) {\n    var data = this.hostTree.data;\n    return data.getStore().get(data.getDimensionIndex(dimension || 'value'), this.dataIndex);\n  };\n\n  TreeNode.prototype.setLayout = function (layout, merge) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemLayout(this.dataIndex, layout, merge);\n  };\n  /**\n   * @return {Object} layout\n   */\n\n\n  TreeNode.prototype.getLayout = function () {\n    return this.hostTree.data.getItemLayout(this.dataIndex);\n  }; // @depcrecated\n  // getModel<T = unknown, S extends keyof T = keyof T>(path: S): Model<T[S]>\n  // eslint-disable-next-line @typescript-eslint/no-unused-vars\n\n\n  TreeNode.prototype.getModel = function (path) {\n    if (this.dataIndex < 0) {\n      return;\n    }\n\n    var hostTree = this.hostTree;\n    var itemModel = hostTree.data.getItemModel(this.dataIndex);\n    return itemModel.getModel(path);\n  }; // TODO: TYPE More specific model\n\n\n  TreeNode.prototype.getLevelModel = function () {\n    return (this.hostTree.levelModels || [])[this.depth];\n  };\n\n  TreeNode.prototype.setVisual = function (key, value) {\n    this.dataIndex >= 0 && this.hostTree.data.setItemVisual(this.dataIndex, key, value);\n  };\n  /**\n   * Get item visual\n   * FIXME: make return type better\n   */\n\n\n  TreeNode.prototype.getVisual = function (key) {\n    return this.hostTree.data.getItemVisual(this.dataIndex, key);\n  };\n\n  TreeNode.prototype.getRawIndex = function () {\n    return this.hostTree.data.getRawIndex(this.dataIndex);\n  };\n\n  TreeNode.prototype.getId = function () {\n    return this.hostTree.data.getId(this.dataIndex);\n  };\n  /**\n   * index in parent's children\n   */\n\n\n  TreeNode.prototype.getChildIndex = function () {\n    if (this.parentNode) {\n      var children = this.parentNode.children;\n\n      for (var i = 0; i < children.length; ++i) {\n        if (children[i] === this) {\n          return i;\n        }\n      }\n\n      return -1;\n    }\n\n    return -1;\n  };\n  /**\n   * if this is an ancestor of another node\n   *\n   * @param node another node\n   * @return if is ancestor\n   */\n\n\n  TreeNode.prototype.isAncestorOf = function (node) {\n    var parent = node.parentNode;\n\n    while (parent) {\n      if (parent === this) {\n        return true;\n      }\n\n      parent = parent.parentNode;\n    }\n\n    return false;\n  };\n  /**\n   * if this is an descendant of another node\n   *\n   * @param node another node\n   * @return if is descendant\n   */\n\n\n  TreeNode.prototype.isDescendantOf = function (node) {\n    return node !== this && node.isAncestorOf(this);\n  };\n\n  return TreeNode;\n}();\n\nexport { TreeNode };\n;\n\nvar Tree =\n/** @class */\nfunction () {\n  function Tree(hostModel) {\n    this.type = 'tree';\n    this._nodes = [];\n    this.hostModel = hostModel;\n  }\n\n  Tree.prototype.eachNode = function (options, cb, context) {\n    this.root.eachNode(options, cb, context);\n  };\n\n  Tree.prototype.getNodeByDataIndex = function (dataIndex) {\n    var rawIndex = this.data.getRawIndex(dataIndex);\n    return this._nodes[rawIndex];\n  };\n\n  Tree.prototype.getNodeById = function (name) {\n    return this.root.getNodeById(name);\n  };\n  /**\n   * Update item available by list,\n   * when list has been performed options like 'filterSelf' or 'map'.\n   */\n\n\n  Tree.prototype.update = function () {\n    var data = this.data;\n    var nodes = this._nodes;\n\n    for (var i = 0, len = nodes.length; i < len; i++) {\n      nodes[i].dataIndex = -1;\n    }\n\n    for (var i = 0, len = data.count(); i < len; i++) {\n      nodes[data.getRawIndex(i)].dataIndex = i;\n    }\n  };\n  /**\n   * Clear all layouts\n   */\n\n\n  Tree.prototype.clearLayouts = function () {\n    this.data.clearItemLayouts();\n  };\n  /**\n   * data node format:\n   * {\n   *     name: ...\n   *     value: ...\n   *     children: [\n   *         {\n   *             name: ...\n   *             value: ...\n   *             children: ...\n   *         },\n   *         ...\n   *     ]\n   * }\n   */\n\n\n  Tree.createTree = function (dataRoot, hostModel, beforeLink) {\n    var tree = new Tree(hostModel);\n    var listData = [];\n    var dimMax = 1;\n    buildHierarchy(dataRoot);\n\n    function buildHierarchy(dataNode, parentNode) {\n      var value = dataNode.value;\n      dimMax = Math.max(dimMax, zrUtil.isArray(value) ? value.length : 1);\n      listData.push(dataNode);\n      var node = new TreeNode(convertOptionIdName(dataNode.name, ''), tree);\n      parentNode ? addChild(node, parentNode) : tree.root = node;\n\n      tree._nodes.push(node);\n\n      var children = dataNode.children;\n\n      if (children) {\n        for (var i = 0; i < children.length; i++) {\n          buildHierarchy(children[i], node);\n        }\n      }\n    }\n\n    tree.root.updateDepthAndHeight(0);\n    var dimensions = prepareSeriesDataSchema(listData, {\n      coordDimensions: ['value'],\n      dimensionsCount: dimMax\n    }).dimensions;\n    var list = new SeriesData(dimensions, hostModel);\n    list.initData(listData);\n    beforeLink && beforeLink(list);\n    linkSeriesData({\n      mainData: list,\n      struct: tree,\n      structAttr: 'tree'\n    });\n    tree.update();\n    return tree;\n  };\n\n  return Tree;\n}();\n/**\n * It is needed to consider the mess of 'list', 'hostModel' when creating a TreeNote,\n * so this function is not ready and not necessary to be public.\n */\n\n\nfunction addChild(child, node) {\n  var children = node.children;\n\n  if (child.parentNode === node) {\n    return;\n  }\n\n  children.push(child);\n  child.parentNode = node;\n}\n\nexport default Tree;"]},"metadata":{},"sourceType":"module"}