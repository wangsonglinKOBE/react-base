{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport GeoModel from '../../coord/geo/GeoModel';\nimport geoCreator from '../../coord/geo/geoCreator';\nimport { each } from 'zrender/lib/core/util';\nimport { updateCenterAndZoom } from '../../action/roamHelper';\nimport GeoView from './GeoView';\nexport function install(registers) {\n  registers.registerCoordinateSystem('geo', geoCreator);\n  registers.registerComponentModel(GeoModel);\n  registers.registerComponentView(GeoView);\n\n  function makeAction(method, actionInfo) {\n    actionInfo.update = 'geo:updateSelectStatus';\n    registers.registerAction(actionInfo, function (payload, ecModel) {\n      var selected = {};\n      var allSelected = [];\n      ecModel.eachComponent({\n        mainType: 'geo',\n        query: payload\n      }, function (geoModel) {\n        geoModel[method](payload.name);\n        var geo = geoModel.coordinateSystem;\n        each(geo.regions, function (region) {\n          selected[region.name] = geoModel.isSelected(region.name) || false;\n        }); // Notice: there might be duplicated name in different regions.\n\n        var names = [];\n        each(selected, function (v, name) {\n          selected[name] && names.push(name);\n        });\n        allSelected.push({\n          geoIndex: geoModel.componentIndex,\n          // Use singular, the same naming convention as the event `selectchanged`.\n          name: names\n        });\n      });\n      return {\n        selected: selected,\n        allSelected: allSelected,\n        name: payload.name\n      };\n    });\n  }\n\n  makeAction('toggleSelected', {\n    type: 'geoToggleSelect',\n    event: 'geoselectchanged'\n  });\n  makeAction('select', {\n    type: 'geoSelect',\n    event: 'geoselected'\n  });\n  makeAction('unSelect', {\n    type: 'geoUnSelect',\n    event: 'geounselected'\n  });\n  /**\n   * @payload\n   * @property {string} [componentType=series]\n   * @property {number} [dx]\n   * @property {number} [dy]\n   * @property {number} [zoom]\n   * @property {number} [originX]\n   * @property {number} [originY]\n   */\n\n  registers.registerAction({\n    type: 'geoRoam',\n    event: 'geoRoam',\n    update: 'updateTransform'\n  }, function (payload, ecModel) {\n    var componentType = payload.componentType || 'series';\n    ecModel.eachComponent({\n      mainType: componentType,\n      query: payload\n    }, function (componentModel) {\n      var geo = componentModel.coordinateSystem;\n\n      if (geo.type !== 'geo') {\n        return;\n      }\n\n      var res = updateCenterAndZoom(geo, payload, componentModel.get('scaleLimit'));\n      componentModel.setCenter && componentModel.setCenter(res.center);\n      componentModel.setZoom && componentModel.setZoom(res.zoom); // All map series with same `map` use the same geo coordinate system\n      // So the center and zoom must be in sync. Include the series not selected by legend\n\n      if (componentType === 'series') {\n        each(componentModel.seriesGroup, function (seriesModel) {\n          seriesModel.setCenter(res.center);\n          seriesModel.setZoom(res.zoom);\n        });\n      }\n    });\n  });\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/component/geo/install.js"],"names":["GeoModel","geoCreator","each","updateCenterAndZoom","GeoView","install","registers","registerCoordinateSystem","registerComponentModel","registerComponentView","makeAction","method","actionInfo","update","registerAction","payload","ecModel","selected","allSelected","eachComponent","mainType","query","geoModel","name","geo","coordinateSystem","regions","region","isSelected","names","v","push","geoIndex","componentIndex","type","event","componentType","componentModel","res","get","setCenter","center","setZoom","zoom","seriesGroup","seriesModel"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport GeoModel from '../../coord/geo/GeoModel';\nimport geoCreator from '../../coord/geo/geoCreator';\nimport { each } from 'zrender/lib/core/util';\nimport { updateCenterAndZoom } from '../../action/roamHelper';\nimport GeoView from './GeoView';\nexport function install(registers) {\n  registers.registerCoordinateSystem('geo', geoCreator);\n  registers.registerComponentModel(GeoModel);\n  registers.registerComponentView(GeoView);\n\n  function makeAction(method, actionInfo) {\n    actionInfo.update = 'geo:updateSelectStatus';\n    registers.registerAction(actionInfo, function (payload, ecModel) {\n      var selected = {};\n      var allSelected = [];\n      ecModel.eachComponent({\n        mainType: 'geo',\n        query: payload\n      }, function (geoModel) {\n        geoModel[method](payload.name);\n        var geo = geoModel.coordinateSystem;\n        each(geo.regions, function (region) {\n          selected[region.name] = geoModel.isSelected(region.name) || false;\n        }); // Notice: there might be duplicated name in different regions.\n\n        var names = [];\n        each(selected, function (v, name) {\n          selected[name] && names.push(name);\n        });\n        allSelected.push({\n          geoIndex: geoModel.componentIndex,\n          // Use singular, the same naming convention as the event `selectchanged`.\n          name: names\n        });\n      });\n      return {\n        selected: selected,\n        allSelected: allSelected,\n        name: payload.name\n      };\n    });\n  }\n\n  makeAction('toggleSelected', {\n    type: 'geoToggleSelect',\n    event: 'geoselectchanged'\n  });\n  makeAction('select', {\n    type: 'geoSelect',\n    event: 'geoselected'\n  });\n  makeAction('unSelect', {\n    type: 'geoUnSelect',\n    event: 'geounselected'\n  });\n  /**\n   * @payload\n   * @property {string} [componentType=series]\n   * @property {number} [dx]\n   * @property {number} [dy]\n   * @property {number} [zoom]\n   * @property {number} [originX]\n   * @property {number} [originY]\n   */\n\n  registers.registerAction({\n    type: 'geoRoam',\n    event: 'geoRoam',\n    update: 'updateTransform'\n  }, function (payload, ecModel) {\n    var componentType = payload.componentType || 'series';\n    ecModel.eachComponent({\n      mainType: componentType,\n      query: payload\n    }, function (componentModel) {\n      var geo = componentModel.coordinateSystem;\n\n      if (geo.type !== 'geo') {\n        return;\n      }\n\n      var res = updateCenterAndZoom(geo, payload, componentModel.get('scaleLimit'));\n      componentModel.setCenter && componentModel.setCenter(res.center);\n      componentModel.setZoom && componentModel.setZoom(res.zoom); // All map series with same `map` use the same geo coordinate system\n      // So the center and zoom must be in sync. Include the series not selected by legend\n\n      if (componentType === 'series') {\n        each(componentModel.seriesGroup, function (seriesModel) {\n          seriesModel.setCenter(res.center);\n          seriesModel.setZoom(res.zoom);\n        });\n      }\n    });\n  });\n}"]},"metadata":{},"sourceType":"module"}