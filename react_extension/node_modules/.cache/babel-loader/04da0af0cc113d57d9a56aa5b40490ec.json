{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport Polyline from './Polyline';\nimport EffectLine from './EffectLine';\nimport * as vec2 from 'zrender/lib/core/vector';\n\nvar EffectPolyline =\n/** @class */\nfunction (_super) {\n  __extends(EffectPolyline, _super);\n\n  function EffectPolyline() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._lastFrame = 0;\n    _this._lastFramePercent = 0;\n    return _this;\n  } // Override\n\n\n  EffectPolyline.prototype.createLine = function (lineData, idx, seriesScope) {\n    return new Polyline(lineData, idx, seriesScope);\n  };\n\n  ; // Override\n\n  EffectPolyline.prototype._updateAnimationPoints = function (symbol, points) {\n    this._points = points;\n    var accLenArr = [0];\n    var len = 0;\n\n    for (var i = 1; i < points.length; i++) {\n      var p1 = points[i - 1];\n      var p2 = points[i];\n      len += vec2.dist(p1, p2);\n      accLenArr.push(len);\n    }\n\n    if (len === 0) {\n      this._length = 0;\n      return;\n    }\n\n    for (var i = 0; i < accLenArr.length; i++) {\n      accLenArr[i] /= len;\n    }\n\n    this._offsets = accLenArr;\n    this._length = len;\n  };\n\n  ; // Override\n\n  EffectPolyline.prototype._getLineLength = function () {\n    return this._length;\n  };\n\n  ; // Override\n\n  EffectPolyline.prototype._updateSymbolPosition = function (symbol) {\n    var t = symbol.__t;\n    var points = this._points;\n    var offsets = this._offsets;\n    var len = points.length;\n\n    if (!offsets) {\n      // Has length 0\n      return;\n    }\n\n    var lastFrame = this._lastFrame;\n    var frame;\n\n    if (t < this._lastFramePercent) {\n      // Start from the next frame\n      // PENDING start from lastFrame ?\n      var start = Math.min(lastFrame + 1, len - 1);\n\n      for (frame = start; frame >= 0; frame--) {\n        if (offsets[frame] <= t) {\n          break;\n        }\n      } // PENDING really need to do this ?\n\n\n      frame = Math.min(frame, len - 2);\n    } else {\n      for (frame = lastFrame; frame < len; frame++) {\n        if (offsets[frame] > t) {\n          break;\n        }\n      }\n\n      frame = Math.min(frame - 1, len - 2);\n    }\n\n    var p = (t - offsets[frame]) / (offsets[frame + 1] - offsets[frame]);\n    var p0 = points[frame];\n    var p1 = points[frame + 1];\n    symbol.x = p0[0] * (1 - p) + p * p1[0];\n    symbol.y = p0[1] * (1 - p) + p * p1[1];\n    var tx = p1[0] - p0[0];\n    var ty = p1[1] - p0[1];\n    symbol.rotation = -Math.atan2(ty, tx) - Math.PI / 2;\n    this._lastFrame = frame;\n    this._lastFramePercent = t;\n    symbol.ignore = false;\n  };\n\n  ;\n  return EffectPolyline;\n}(EffectLine);\n\nexport default EffectPolyline;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/chart/helper/EffectPolyline.js"],"names":["__extends","Polyline","EffectLine","vec2","EffectPolyline","_super","_this","apply","arguments","_lastFrame","_lastFramePercent","prototype","createLine","lineData","idx","seriesScope","_updateAnimationPoints","symbol","points","_points","accLenArr","len","i","length","p1","p2","dist","push","_length","_offsets","_getLineLength","_updateSymbolPosition","t","__t","offsets","lastFrame","frame","start","Math","min","p","p0","x","y","tx","ty","rotation","atan2","PI","ignore"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport Polyline from './Polyline';\nimport EffectLine from './EffectLine';\nimport * as vec2 from 'zrender/lib/core/vector';\n\nvar EffectPolyline =\n/** @class */\nfunction (_super) {\n  __extends(EffectPolyline, _super);\n\n  function EffectPolyline() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this._lastFrame = 0;\n    _this._lastFramePercent = 0;\n    return _this;\n  } // Override\n\n\n  EffectPolyline.prototype.createLine = function (lineData, idx, seriesScope) {\n    return new Polyline(lineData, idx, seriesScope);\n  };\n\n  ; // Override\n\n  EffectPolyline.prototype._updateAnimationPoints = function (symbol, points) {\n    this._points = points;\n    var accLenArr = [0];\n    var len = 0;\n\n    for (var i = 1; i < points.length; i++) {\n      var p1 = points[i - 1];\n      var p2 = points[i];\n      len += vec2.dist(p1, p2);\n      accLenArr.push(len);\n    }\n\n    if (len === 0) {\n      this._length = 0;\n      return;\n    }\n\n    for (var i = 0; i < accLenArr.length; i++) {\n      accLenArr[i] /= len;\n    }\n\n    this._offsets = accLenArr;\n    this._length = len;\n  };\n\n  ; // Override\n\n  EffectPolyline.prototype._getLineLength = function () {\n    return this._length;\n  };\n\n  ; // Override\n\n  EffectPolyline.prototype._updateSymbolPosition = function (symbol) {\n    var t = symbol.__t;\n    var points = this._points;\n    var offsets = this._offsets;\n    var len = points.length;\n\n    if (!offsets) {\n      // Has length 0\n      return;\n    }\n\n    var lastFrame = this._lastFrame;\n    var frame;\n\n    if (t < this._lastFramePercent) {\n      // Start from the next frame\n      // PENDING start from lastFrame ?\n      var start = Math.min(lastFrame + 1, len - 1);\n\n      for (frame = start; frame >= 0; frame--) {\n        if (offsets[frame] <= t) {\n          break;\n        }\n      } // PENDING really need to do this ?\n\n\n      frame = Math.min(frame, len - 2);\n    } else {\n      for (frame = lastFrame; frame < len; frame++) {\n        if (offsets[frame] > t) {\n          break;\n        }\n      }\n\n      frame = Math.min(frame - 1, len - 2);\n    }\n\n    var p = (t - offsets[frame]) / (offsets[frame + 1] - offsets[frame]);\n    var p0 = points[frame];\n    var p1 = points[frame + 1];\n    symbol.x = p0[0] * (1 - p) + p * p1[0];\n    symbol.y = p0[1] * (1 - p) + p * p1[1];\n    var tx = p1[0] - p0[0];\n    var ty = p1[1] - p0[1];\n    symbol.rotation = -Math.atan2(ty, tx) - Math.PI / 2;\n    this._lastFrame = frame;\n    this._lastFramePercent = t;\n    symbol.ignore = false;\n  };\n\n  ;\n  return EffectPolyline;\n}(EffectLine);\n\nexport default EffectPolyline;"]},"metadata":{},"sourceType":"module"}