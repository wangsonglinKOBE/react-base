{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// Layout helpers for each component positioning\nimport * as zrUtil from 'zrender/lib/core/util';\nimport BoundingRect from 'zrender/lib/core/BoundingRect';\nimport { parsePercent } from './number';\nimport * as formatUtil from './format';\nvar each = zrUtil.each;\n/**\n * @public\n */\n\nexport var LOCATION_PARAMS = ['left', 'right', 'top', 'bottom', 'width', 'height'];\n/**\n * @public\n */\n\nexport var HV_NAMES = [['width', 'left', 'right'], ['height', 'top', 'bottom']];\n\nfunction boxLayout(orient, group, gap, maxWidth, maxHeight) {\n  var x = 0;\n  var y = 0;\n\n  if (maxWidth == null) {\n    maxWidth = Infinity;\n  }\n\n  if (maxHeight == null) {\n    maxHeight = Infinity;\n  }\n\n  var currentLineMaxSize = 0;\n  group.eachChild(function (child, idx) {\n    var rect = child.getBoundingRect();\n    var nextChild = group.childAt(idx + 1);\n    var nextChildRect = nextChild && nextChild.getBoundingRect();\n    var nextX;\n    var nextY;\n\n    if (orient === 'horizontal') {\n      var moveX = rect.width + (nextChildRect ? -nextChildRect.x + rect.x : 0);\n      nextX = x + moveX; // Wrap when width exceeds maxWidth or meet a `newline` group\n      // FIXME compare before adding gap?\n\n      if (nextX > maxWidth || child.newline) {\n        x = 0;\n        nextX = moveX;\n        y += currentLineMaxSize + gap;\n        currentLineMaxSize = rect.height;\n      } else {\n        // FIXME: consider rect.y is not `0`?\n        currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);\n      }\n    } else {\n      var moveY = rect.height + (nextChildRect ? -nextChildRect.y + rect.y : 0);\n      nextY = y + moveY; // Wrap when width exceeds maxHeight or meet a `newline` group\n\n      if (nextY > maxHeight || child.newline) {\n        x += currentLineMaxSize + gap;\n        y = 0;\n        nextY = moveY;\n        currentLineMaxSize = rect.width;\n      } else {\n        currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);\n      }\n    }\n\n    if (child.newline) {\n      return;\n    }\n\n    child.x = x;\n    child.y = y;\n    child.markRedraw();\n    orient === 'horizontal' ? x = nextX + gap : y = nextY + gap;\n  });\n}\n/**\n * VBox or HBox layouting\n * @param {string} orient\n * @param {module:zrender/graphic/Group} group\n * @param {number} gap\n * @param {number} [width=Infinity]\n * @param {number} [height=Infinity]\n */\n\n\nexport var box = boxLayout;\n/**\n * VBox layouting\n * @param {module:zrender/graphic/Group} group\n * @param {number} gap\n * @param {number} [width=Infinity]\n * @param {number} [height=Infinity]\n */\n\nexport var vbox = zrUtil.curry(boxLayout, 'vertical');\n/**\n * HBox layouting\n * @param {module:zrender/graphic/Group} group\n * @param {number} gap\n * @param {number} [width=Infinity]\n * @param {number} [height=Infinity]\n */\n\nexport var hbox = zrUtil.curry(boxLayout, 'horizontal');\n/**\n * If x or x2 is not specified or 'center' 'left' 'right',\n * the width would be as long as possible.\n * If y or y2 is not specified or 'middle' 'top' 'bottom',\n * the height would be as long as possible.\n */\n\nexport function getAvailableSize(positionInfo, containerRect, margin) {\n  var containerWidth = containerRect.width;\n  var containerHeight = containerRect.height;\n  var x = parsePercent(positionInfo.left, containerWidth);\n  var y = parsePercent(positionInfo.top, containerHeight);\n  var x2 = parsePercent(positionInfo.right, containerWidth);\n  var y2 = parsePercent(positionInfo.bottom, containerHeight);\n  (isNaN(x) || isNaN(parseFloat(positionInfo.left))) && (x = 0);\n  (isNaN(x2) || isNaN(parseFloat(positionInfo.right))) && (x2 = containerWidth);\n  (isNaN(y) || isNaN(parseFloat(positionInfo.top))) && (y = 0);\n  (isNaN(y2) || isNaN(parseFloat(positionInfo.bottom))) && (y2 = containerHeight);\n  margin = formatUtil.normalizeCssArray(margin || 0);\n  return {\n    width: Math.max(x2 - x - margin[1] - margin[3], 0),\n    height: Math.max(y2 - y - margin[0] - margin[2], 0)\n  };\n}\n/**\n * Parse position info.\n */\n\nexport function getLayoutRect(positionInfo, containerRect, margin) {\n  margin = formatUtil.normalizeCssArray(margin || 0);\n  var containerWidth = containerRect.width;\n  var containerHeight = containerRect.height;\n  var left = parsePercent(positionInfo.left, containerWidth);\n  var top = parsePercent(positionInfo.top, containerHeight);\n  var right = parsePercent(positionInfo.right, containerWidth);\n  var bottom = parsePercent(positionInfo.bottom, containerHeight);\n  var width = parsePercent(positionInfo.width, containerWidth);\n  var height = parsePercent(positionInfo.height, containerHeight);\n  var verticalMargin = margin[2] + margin[0];\n  var horizontalMargin = margin[1] + margin[3];\n  var aspect = positionInfo.aspect; // If width is not specified, calculate width from left and right\n\n  if (isNaN(width)) {\n    width = containerWidth - right - horizontalMargin - left;\n  }\n\n  if (isNaN(height)) {\n    height = containerHeight - bottom - verticalMargin - top;\n  }\n\n  if (aspect != null) {\n    // If width and height are not given\n    // 1. Graph should not exceeds the container\n    // 2. Aspect must be keeped\n    // 3. Graph should take the space as more as possible\n    // FIXME\n    // Margin is not considered, because there is no case that both\n    // using margin and aspect so far.\n    if (isNaN(width) && isNaN(height)) {\n      if (aspect > containerWidth / containerHeight) {\n        width = containerWidth * 0.8;\n      } else {\n        height = containerHeight * 0.8;\n      }\n    } // Calculate width or height with given aspect\n\n\n    if (isNaN(width)) {\n      width = aspect * height;\n    }\n\n    if (isNaN(height)) {\n      height = width / aspect;\n    }\n  } // If left is not specified, calculate left from right and width\n\n\n  if (isNaN(left)) {\n    left = containerWidth - right - width - horizontalMargin;\n  }\n\n  if (isNaN(top)) {\n    top = containerHeight - bottom - height - verticalMargin;\n  } // Align left and top\n\n\n  switch (positionInfo.left || positionInfo.right) {\n    case 'center':\n      left = containerWidth / 2 - width / 2 - margin[3];\n      break;\n\n    case 'right':\n      left = containerWidth - width - horizontalMargin;\n      break;\n  }\n\n  switch (positionInfo.top || positionInfo.bottom) {\n    case 'middle':\n    case 'center':\n      top = containerHeight / 2 - height / 2 - margin[0];\n      break;\n\n    case 'bottom':\n      top = containerHeight - height - verticalMargin;\n      break;\n  } // If something is wrong and left, top, width, height are calculated as NaN\n\n\n  left = left || 0;\n  top = top || 0;\n\n  if (isNaN(width)) {\n    // Width may be NaN if only one value is given except width\n    width = containerWidth - horizontalMargin - left - (right || 0);\n  }\n\n  if (isNaN(height)) {\n    // Height may be NaN if only one value is given except height\n    height = containerHeight - verticalMargin - top - (bottom || 0);\n  }\n\n  var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);\n  rect.margin = margin;\n  return rect;\n}\n/**\n * Position a zr element in viewport\n *  Group position is specified by either\n *  {left, top}, {right, bottom}\n *  If all properties exists, right and bottom will be igonred.\n *\n * Logic:\n *     1. Scale (against origin point in parent coord)\n *     2. Rotate (against origin point in parent coord)\n *     3. Traslate (with el.position by this method)\n * So this method only fixes the last step 'Traslate', which does not affect\n * scaling and rotating.\n *\n * If be called repeatly with the same input el, the same result will be gotten.\n *\n * @param el Should have `getBoundingRect` method.\n * @param positionInfo\n * @param positionInfo.left\n * @param positionInfo.top\n * @param positionInfo.right\n * @param positionInfo.bottom\n * @param positionInfo.width Only for opt.boundingModel: 'raw'\n * @param positionInfo.height Only for opt.boundingModel: 'raw'\n * @param containerRect\n * @param margin\n * @param opt\n * @param opt.hv Only horizontal or only vertical. Default to be [1, 1]\n * @param opt.boundingMode\n *        Specify how to calculate boundingRect when locating.\n *        'all': Position the boundingRect that is transformed and uioned\n *               both itself and its descendants.\n *               This mode simplies confine the elements in the bounding\n *               of their container (e.g., using 'right: 0').\n *        'raw': Position the boundingRect that is not transformed and only itself.\n *               This mode is useful when you want a element can overflow its\n *               container. (Consider a rotated circle needs to be located in a corner.)\n *               In this mode positionInfo.width/height can only be number.\n */\n\nexport function positionElement(el, positionInfo, containerRect, margin, opt) {\n  var h = !opt || !opt.hv || opt.hv[0];\n  var v = !opt || !opt.hv || opt.hv[1];\n  var boundingMode = opt && opt.boundingMode || 'all';\n\n  if (!h && !v) {\n    return;\n  }\n\n  var rect;\n\n  if (boundingMode === 'raw') {\n    rect = el.type === 'group' ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0) : el.getBoundingRect();\n  } else {\n    rect = el.getBoundingRect();\n\n    if (el.needLocalTransform()) {\n      var transform = el.getLocalTransform(); // Notice: raw rect may be inner object of el,\n      // which should not be modified.\n\n      rect = rect.clone();\n      rect.applyTransform(transform);\n    }\n  } // The real width and height can not be specified but calculated by the given el.\n\n\n  var layoutRect = getLayoutRect(zrUtil.defaults({\n    width: rect.width,\n    height: rect.height\n  }, positionInfo), containerRect, margin); // Because 'tranlate' is the last step in transform\n  // (see zrender/core/Transformable#getLocalTransform),\n  // we can just only modify el.position to get final result.\n\n  var dx = h ? layoutRect.x - rect.x : 0;\n  var dy = v ? layoutRect.y - rect.y : 0;\n\n  if (boundingMode === 'raw') {\n    el.x = dx;\n    el.y = dy;\n  } else {\n    el.x += dx;\n    el.y += dy;\n  }\n\n  el.markRedraw();\n}\n/**\n * @param option Contains some of the properties in HV_NAMES.\n * @param hvIdx 0: horizontal; 1: vertical.\n */\n\nexport function sizeCalculable(option, hvIdx) {\n  return option[HV_NAMES[hvIdx][0]] != null || option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null;\n}\nexport function fetchLayoutMode(ins) {\n  var layoutMode = ins.layoutMode || ins.constructor.layoutMode;\n  return zrUtil.isObject(layoutMode) ? layoutMode : layoutMode ? {\n    type: layoutMode\n  } : null;\n}\n/**\n * Consider Case:\n * When default option has {left: 0, width: 100}, and we set {right: 0}\n * through setOption or media query, using normal zrUtil.merge will cause\n * {right: 0} does not take effect.\n *\n * @example\n * ComponentModel.extend({\n *     init: function () {\n *         ...\n *         let inputPositionParams = layout.getLayoutParams(option);\n *         this.mergeOption(inputPositionParams);\n *     },\n *     mergeOption: function (newOption) {\n *         newOption && zrUtil.merge(thisOption, newOption, true);\n *         layout.mergeLayoutParam(thisOption, newOption);\n *     }\n * });\n *\n * @param targetOption\n * @param newOption\n * @param opt\n */\n\nexport function mergeLayoutParam(targetOption, newOption, opt) {\n  var ignoreSize = opt && opt.ignoreSize;\n  !zrUtil.isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);\n  var hResult = merge(HV_NAMES[0], 0);\n  var vResult = merge(HV_NAMES[1], 1);\n  copy(HV_NAMES[0], targetOption, hResult);\n  copy(HV_NAMES[1], targetOption, vResult);\n\n  function merge(names, hvIdx) {\n    var newParams = {};\n    var newValueCount = 0;\n    var merged = {};\n    var mergedValueCount = 0;\n    var enoughParamNumber = 2;\n    each(names, function (name) {\n      merged[name] = targetOption[name];\n    });\n    each(names, function (name) {\n      // Consider case: newOption.width is null, which is\n      // set by user for removing width setting.\n      hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);\n      hasValue(newParams, name) && newValueCount++;\n      hasValue(merged, name) && mergedValueCount++;\n    });\n\n    if (ignoreSize[hvIdx]) {\n      // Only one of left/right is premitted to exist.\n      if (hasValue(newOption, names[1])) {\n        merged[names[2]] = null;\n      } else if (hasValue(newOption, names[2])) {\n        merged[names[1]] = null;\n      }\n\n      return merged;\n    } // Case: newOption: {width: ..., right: ...},\n    // or targetOption: {right: ...} and newOption: {width: ...},\n    // There is no conflict when merged only has params count\n    // little than enoughParamNumber.\n\n\n    if (mergedValueCount === enoughParamNumber || !newValueCount) {\n      return merged;\n    } // Case: newOption: {width: ..., right: ...},\n    // Than we can make sure user only want those two, and ignore\n    // all origin params in targetOption.\n    else if (newValueCount >= enoughParamNumber) {\n      return newParams;\n    } else {\n      // Chose another param from targetOption by priority.\n      for (var i = 0; i < names.length; i++) {\n        var name_1 = names[i];\n\n        if (!hasProp(newParams, name_1) && hasProp(targetOption, name_1)) {\n          newParams[name_1] = targetOption[name_1];\n          break;\n        }\n      }\n\n      return newParams;\n    }\n  }\n\n  function hasProp(obj, name) {\n    return obj.hasOwnProperty(name);\n  }\n\n  function hasValue(obj, name) {\n    return obj[name] != null && obj[name] !== 'auto';\n  }\n\n  function copy(names, target, source) {\n    each(names, function (name) {\n      target[name] = source[name];\n    });\n  }\n}\n/**\n * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n */\n\nexport function getLayoutParams(source) {\n  return copyLayoutParams({}, source);\n}\n/**\n * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n * @param {Object} source\n * @return {Object} Result contains those props.\n */\n\nexport function copyLayoutParams(target, source) {\n  source && target && each(LOCATION_PARAMS, function (name) {\n    source.hasOwnProperty(name) && (target[name] = source[name]);\n  });\n  return target;\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/util/layout.js"],"names":["zrUtil","BoundingRect","parsePercent","formatUtil","each","LOCATION_PARAMS","HV_NAMES","boxLayout","orient","group","gap","maxWidth","maxHeight","x","y","Infinity","currentLineMaxSize","eachChild","child","idx","rect","getBoundingRect","nextChild","childAt","nextChildRect","nextX","nextY","moveX","width","newline","height","Math","max","moveY","markRedraw","box","vbox","curry","hbox","getAvailableSize","positionInfo","containerRect","margin","containerWidth","containerHeight","left","top","x2","right","y2","bottom","isNaN","parseFloat","normalizeCssArray","getLayoutRect","verticalMargin","horizontalMargin","aspect","positionElement","el","opt","h","hv","v","boundingMode","type","needLocalTransform","transform","getLocalTransform","clone","applyTransform","layoutRect","defaults","dx","dy","sizeCalculable","option","hvIdx","fetchLayoutMode","ins","layoutMode","constructor","isObject","mergeLayoutParam","targetOption","newOption","ignoreSize","isArray","hResult","merge","vResult","copy","names","newParams","newValueCount","merged","mergedValueCount","enoughParamNumber","name","hasProp","hasValue","i","length","name_1","obj","hasOwnProperty","target","source","getLayoutParams","copyLayoutParams"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n// Layout helpers for each component positioning\nimport * as zrUtil from 'zrender/lib/core/util';\nimport BoundingRect from 'zrender/lib/core/BoundingRect';\nimport { parsePercent } from './number';\nimport * as formatUtil from './format';\nvar each = zrUtil.each;\n/**\n * @public\n */\n\nexport var LOCATION_PARAMS = ['left', 'right', 'top', 'bottom', 'width', 'height'];\n/**\n * @public\n */\n\nexport var HV_NAMES = [['width', 'left', 'right'], ['height', 'top', 'bottom']];\n\nfunction boxLayout(orient, group, gap, maxWidth, maxHeight) {\n  var x = 0;\n  var y = 0;\n\n  if (maxWidth == null) {\n    maxWidth = Infinity;\n  }\n\n  if (maxHeight == null) {\n    maxHeight = Infinity;\n  }\n\n  var currentLineMaxSize = 0;\n  group.eachChild(function (child, idx) {\n    var rect = child.getBoundingRect();\n    var nextChild = group.childAt(idx + 1);\n    var nextChildRect = nextChild && nextChild.getBoundingRect();\n    var nextX;\n    var nextY;\n\n    if (orient === 'horizontal') {\n      var moveX = rect.width + (nextChildRect ? -nextChildRect.x + rect.x : 0);\n      nextX = x + moveX; // Wrap when width exceeds maxWidth or meet a `newline` group\n      // FIXME compare before adding gap?\n\n      if (nextX > maxWidth || child.newline) {\n        x = 0;\n        nextX = moveX;\n        y += currentLineMaxSize + gap;\n        currentLineMaxSize = rect.height;\n      } else {\n        // FIXME: consider rect.y is not `0`?\n        currentLineMaxSize = Math.max(currentLineMaxSize, rect.height);\n      }\n    } else {\n      var moveY = rect.height + (nextChildRect ? -nextChildRect.y + rect.y : 0);\n      nextY = y + moveY; // Wrap when width exceeds maxHeight or meet a `newline` group\n\n      if (nextY > maxHeight || child.newline) {\n        x += currentLineMaxSize + gap;\n        y = 0;\n        nextY = moveY;\n        currentLineMaxSize = rect.width;\n      } else {\n        currentLineMaxSize = Math.max(currentLineMaxSize, rect.width);\n      }\n    }\n\n    if (child.newline) {\n      return;\n    }\n\n    child.x = x;\n    child.y = y;\n    child.markRedraw();\n    orient === 'horizontal' ? x = nextX + gap : y = nextY + gap;\n  });\n}\n/**\n * VBox or HBox layouting\n * @param {string} orient\n * @param {module:zrender/graphic/Group} group\n * @param {number} gap\n * @param {number} [width=Infinity]\n * @param {number} [height=Infinity]\n */\n\n\nexport var box = boxLayout;\n/**\n * VBox layouting\n * @param {module:zrender/graphic/Group} group\n * @param {number} gap\n * @param {number} [width=Infinity]\n * @param {number} [height=Infinity]\n */\n\nexport var vbox = zrUtil.curry(boxLayout, 'vertical');\n/**\n * HBox layouting\n * @param {module:zrender/graphic/Group} group\n * @param {number} gap\n * @param {number} [width=Infinity]\n * @param {number} [height=Infinity]\n */\n\nexport var hbox = zrUtil.curry(boxLayout, 'horizontal');\n/**\n * If x or x2 is not specified or 'center' 'left' 'right',\n * the width would be as long as possible.\n * If y or y2 is not specified or 'middle' 'top' 'bottom',\n * the height would be as long as possible.\n */\n\nexport function getAvailableSize(positionInfo, containerRect, margin) {\n  var containerWidth = containerRect.width;\n  var containerHeight = containerRect.height;\n  var x = parsePercent(positionInfo.left, containerWidth);\n  var y = parsePercent(positionInfo.top, containerHeight);\n  var x2 = parsePercent(positionInfo.right, containerWidth);\n  var y2 = parsePercent(positionInfo.bottom, containerHeight);\n  (isNaN(x) || isNaN(parseFloat(positionInfo.left))) && (x = 0);\n  (isNaN(x2) || isNaN(parseFloat(positionInfo.right))) && (x2 = containerWidth);\n  (isNaN(y) || isNaN(parseFloat(positionInfo.top))) && (y = 0);\n  (isNaN(y2) || isNaN(parseFloat(positionInfo.bottom))) && (y2 = containerHeight);\n  margin = formatUtil.normalizeCssArray(margin || 0);\n  return {\n    width: Math.max(x2 - x - margin[1] - margin[3], 0),\n    height: Math.max(y2 - y - margin[0] - margin[2], 0)\n  };\n}\n/**\n * Parse position info.\n */\n\nexport function getLayoutRect(positionInfo, containerRect, margin) {\n  margin = formatUtil.normalizeCssArray(margin || 0);\n  var containerWidth = containerRect.width;\n  var containerHeight = containerRect.height;\n  var left = parsePercent(positionInfo.left, containerWidth);\n  var top = parsePercent(positionInfo.top, containerHeight);\n  var right = parsePercent(positionInfo.right, containerWidth);\n  var bottom = parsePercent(positionInfo.bottom, containerHeight);\n  var width = parsePercent(positionInfo.width, containerWidth);\n  var height = parsePercent(positionInfo.height, containerHeight);\n  var verticalMargin = margin[2] + margin[0];\n  var horizontalMargin = margin[1] + margin[3];\n  var aspect = positionInfo.aspect; // If width is not specified, calculate width from left and right\n\n  if (isNaN(width)) {\n    width = containerWidth - right - horizontalMargin - left;\n  }\n\n  if (isNaN(height)) {\n    height = containerHeight - bottom - verticalMargin - top;\n  }\n\n  if (aspect != null) {\n    // If width and height are not given\n    // 1. Graph should not exceeds the container\n    // 2. Aspect must be keeped\n    // 3. Graph should take the space as more as possible\n    // FIXME\n    // Margin is not considered, because there is no case that both\n    // using margin and aspect so far.\n    if (isNaN(width) && isNaN(height)) {\n      if (aspect > containerWidth / containerHeight) {\n        width = containerWidth * 0.8;\n      } else {\n        height = containerHeight * 0.8;\n      }\n    } // Calculate width or height with given aspect\n\n\n    if (isNaN(width)) {\n      width = aspect * height;\n    }\n\n    if (isNaN(height)) {\n      height = width / aspect;\n    }\n  } // If left is not specified, calculate left from right and width\n\n\n  if (isNaN(left)) {\n    left = containerWidth - right - width - horizontalMargin;\n  }\n\n  if (isNaN(top)) {\n    top = containerHeight - bottom - height - verticalMargin;\n  } // Align left and top\n\n\n  switch (positionInfo.left || positionInfo.right) {\n    case 'center':\n      left = containerWidth / 2 - width / 2 - margin[3];\n      break;\n\n    case 'right':\n      left = containerWidth - width - horizontalMargin;\n      break;\n  }\n\n  switch (positionInfo.top || positionInfo.bottom) {\n    case 'middle':\n    case 'center':\n      top = containerHeight / 2 - height / 2 - margin[0];\n      break;\n\n    case 'bottom':\n      top = containerHeight - height - verticalMargin;\n      break;\n  } // If something is wrong and left, top, width, height are calculated as NaN\n\n\n  left = left || 0;\n  top = top || 0;\n\n  if (isNaN(width)) {\n    // Width may be NaN if only one value is given except width\n    width = containerWidth - horizontalMargin - left - (right || 0);\n  }\n\n  if (isNaN(height)) {\n    // Height may be NaN if only one value is given except height\n    height = containerHeight - verticalMargin - top - (bottom || 0);\n  }\n\n  var rect = new BoundingRect(left + margin[3], top + margin[0], width, height);\n  rect.margin = margin;\n  return rect;\n}\n/**\n * Position a zr element in viewport\n *  Group position is specified by either\n *  {left, top}, {right, bottom}\n *  If all properties exists, right and bottom will be igonred.\n *\n * Logic:\n *     1. Scale (against origin point in parent coord)\n *     2. Rotate (against origin point in parent coord)\n *     3. Traslate (with el.position by this method)\n * So this method only fixes the last step 'Traslate', which does not affect\n * scaling and rotating.\n *\n * If be called repeatly with the same input el, the same result will be gotten.\n *\n * @param el Should have `getBoundingRect` method.\n * @param positionInfo\n * @param positionInfo.left\n * @param positionInfo.top\n * @param positionInfo.right\n * @param positionInfo.bottom\n * @param positionInfo.width Only for opt.boundingModel: 'raw'\n * @param positionInfo.height Only for opt.boundingModel: 'raw'\n * @param containerRect\n * @param margin\n * @param opt\n * @param opt.hv Only horizontal or only vertical. Default to be [1, 1]\n * @param opt.boundingMode\n *        Specify how to calculate boundingRect when locating.\n *        'all': Position the boundingRect that is transformed and uioned\n *               both itself and its descendants.\n *               This mode simplies confine the elements in the bounding\n *               of their container (e.g., using 'right: 0').\n *        'raw': Position the boundingRect that is not transformed and only itself.\n *               This mode is useful when you want a element can overflow its\n *               container. (Consider a rotated circle needs to be located in a corner.)\n *               In this mode positionInfo.width/height can only be number.\n */\n\nexport function positionElement(el, positionInfo, containerRect, margin, opt) {\n  var h = !opt || !opt.hv || opt.hv[0];\n  var v = !opt || !opt.hv || opt.hv[1];\n  var boundingMode = opt && opt.boundingMode || 'all';\n\n  if (!h && !v) {\n    return;\n  }\n\n  var rect;\n\n  if (boundingMode === 'raw') {\n    rect = el.type === 'group' ? new BoundingRect(0, 0, +positionInfo.width || 0, +positionInfo.height || 0) : el.getBoundingRect();\n  } else {\n    rect = el.getBoundingRect();\n\n    if (el.needLocalTransform()) {\n      var transform = el.getLocalTransform(); // Notice: raw rect may be inner object of el,\n      // which should not be modified.\n\n      rect = rect.clone();\n      rect.applyTransform(transform);\n    }\n  } // The real width and height can not be specified but calculated by the given el.\n\n\n  var layoutRect = getLayoutRect(zrUtil.defaults({\n    width: rect.width,\n    height: rect.height\n  }, positionInfo), containerRect, margin); // Because 'tranlate' is the last step in transform\n  // (see zrender/core/Transformable#getLocalTransform),\n  // we can just only modify el.position to get final result.\n\n  var dx = h ? layoutRect.x - rect.x : 0;\n  var dy = v ? layoutRect.y - rect.y : 0;\n\n  if (boundingMode === 'raw') {\n    el.x = dx;\n    el.y = dy;\n  } else {\n    el.x += dx;\n    el.y += dy;\n  }\n\n  el.markRedraw();\n}\n/**\n * @param option Contains some of the properties in HV_NAMES.\n * @param hvIdx 0: horizontal; 1: vertical.\n */\n\nexport function sizeCalculable(option, hvIdx) {\n  return option[HV_NAMES[hvIdx][0]] != null || option[HV_NAMES[hvIdx][1]] != null && option[HV_NAMES[hvIdx][2]] != null;\n}\nexport function fetchLayoutMode(ins) {\n  var layoutMode = ins.layoutMode || ins.constructor.layoutMode;\n  return zrUtil.isObject(layoutMode) ? layoutMode : layoutMode ? {\n    type: layoutMode\n  } : null;\n}\n/**\n * Consider Case:\n * When default option has {left: 0, width: 100}, and we set {right: 0}\n * through setOption or media query, using normal zrUtil.merge will cause\n * {right: 0} does not take effect.\n *\n * @example\n * ComponentModel.extend({\n *     init: function () {\n *         ...\n *         let inputPositionParams = layout.getLayoutParams(option);\n *         this.mergeOption(inputPositionParams);\n *     },\n *     mergeOption: function (newOption) {\n *         newOption && zrUtil.merge(thisOption, newOption, true);\n *         layout.mergeLayoutParam(thisOption, newOption);\n *     }\n * });\n *\n * @param targetOption\n * @param newOption\n * @param opt\n */\n\nexport function mergeLayoutParam(targetOption, newOption, opt) {\n  var ignoreSize = opt && opt.ignoreSize;\n  !zrUtil.isArray(ignoreSize) && (ignoreSize = [ignoreSize, ignoreSize]);\n  var hResult = merge(HV_NAMES[0], 0);\n  var vResult = merge(HV_NAMES[1], 1);\n  copy(HV_NAMES[0], targetOption, hResult);\n  copy(HV_NAMES[1], targetOption, vResult);\n\n  function merge(names, hvIdx) {\n    var newParams = {};\n    var newValueCount = 0;\n    var merged = {};\n    var mergedValueCount = 0;\n    var enoughParamNumber = 2;\n    each(names, function (name) {\n      merged[name] = targetOption[name];\n    });\n    each(names, function (name) {\n      // Consider case: newOption.width is null, which is\n      // set by user for removing width setting.\n      hasProp(newOption, name) && (newParams[name] = merged[name] = newOption[name]);\n      hasValue(newParams, name) && newValueCount++;\n      hasValue(merged, name) && mergedValueCount++;\n    });\n\n    if (ignoreSize[hvIdx]) {\n      // Only one of left/right is premitted to exist.\n      if (hasValue(newOption, names[1])) {\n        merged[names[2]] = null;\n      } else if (hasValue(newOption, names[2])) {\n        merged[names[1]] = null;\n      }\n\n      return merged;\n    } // Case: newOption: {width: ..., right: ...},\n    // or targetOption: {right: ...} and newOption: {width: ...},\n    // There is no conflict when merged only has params count\n    // little than enoughParamNumber.\n\n\n    if (mergedValueCount === enoughParamNumber || !newValueCount) {\n      return merged;\n    } // Case: newOption: {width: ..., right: ...},\n    // Than we can make sure user only want those two, and ignore\n    // all origin params in targetOption.\n    else if (newValueCount >= enoughParamNumber) {\n        return newParams;\n      } else {\n        // Chose another param from targetOption by priority.\n        for (var i = 0; i < names.length; i++) {\n          var name_1 = names[i];\n\n          if (!hasProp(newParams, name_1) && hasProp(targetOption, name_1)) {\n            newParams[name_1] = targetOption[name_1];\n            break;\n          }\n        }\n\n        return newParams;\n      }\n  }\n\n  function hasProp(obj, name) {\n    return obj.hasOwnProperty(name);\n  }\n\n  function hasValue(obj, name) {\n    return obj[name] != null && obj[name] !== 'auto';\n  }\n\n  function copy(names, target, source) {\n    each(names, function (name) {\n      target[name] = source[name];\n    });\n  }\n}\n/**\n * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n */\n\nexport function getLayoutParams(source) {\n  return copyLayoutParams({}, source);\n}\n/**\n * Retrieve 'left', 'right', 'top', 'bottom', 'width', 'height' from object.\n * @param {Object} source\n * @return {Object} Result contains those props.\n */\n\nexport function copyLayoutParams(target, source) {\n  source && target && each(LOCATION_PARAMS, function (name) {\n    source.hasOwnProperty(name) && (target[name] = source[name]);\n  });\n  return target;\n}"]},"metadata":{},"sourceType":"module"}