{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Parse and decode geo json\n */\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { GeoJSONRegion } from './Region';\n\nfunction decode(json) {\n  if (!json.UTF8Encoding) {\n    return json;\n  }\n\n  var jsonCompressed = json;\n  var encodeScale = jsonCompressed.UTF8Scale;\n\n  if (encodeScale == null) {\n    encodeScale = 1024;\n  }\n\n  var features = jsonCompressed.features;\n\n  for (var f = 0; f < features.length; f++) {\n    var feature = features[f];\n    var geometry = feature.geometry;\n\n    if (geometry.type === 'Polygon') {\n      var coordinates = geometry.coordinates;\n\n      for (var c = 0; c < coordinates.length; c++) {\n        coordinates[c] = decodePolygon(coordinates[c], geometry.encodeOffsets[c], encodeScale);\n      }\n    } else if (geometry.type === 'MultiPolygon') {\n      var coordinates = geometry.coordinates;\n\n      for (var c = 0; c < coordinates.length; c++) {\n        var coordinate = coordinates[c];\n\n        for (var c2 = 0; c2 < coordinate.length; c2++) {\n          coordinate[c2] = decodePolygon(coordinate[c2], geometry.encodeOffsets[c][c2], encodeScale);\n        }\n      }\n    }\n  } // Has been decoded\n\n\n  jsonCompressed.UTF8Encoding = false;\n  return jsonCompressed;\n}\n\nfunction decodePolygon(coordinate, encodeOffsets, encodeScale) {\n  var result = [];\n  var prevX = encodeOffsets[0];\n  var prevY = encodeOffsets[1];\n\n  for (var i = 0; i < coordinate.length; i += 2) {\n    var x = coordinate.charCodeAt(i) - 64;\n    var y = coordinate.charCodeAt(i + 1) - 64; // ZigZag decoding\n\n    x = x >> 1 ^ -(x & 1);\n    y = y >> 1 ^ -(y & 1); // Delta deocding\n\n    x += prevX;\n    y += prevY;\n    prevX = x;\n    prevY = y; // Dequantize\n\n    result.push([x / encodeScale, y / encodeScale]);\n  }\n\n  return result;\n}\n\nexport default function parseGeoJSON(geoJson, nameProperty) {\n  geoJson = decode(geoJson);\n  return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {\n    // Output of mapshaper may have geometry null\n    return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;\n  }), function (featureObj) {\n    var properties = featureObj.properties;\n    var geo = featureObj.geometry;\n    var geometries = [];\n\n    if (geo.type === 'Polygon') {\n      var coordinates = geo.coordinates;\n      geometries.push({\n        type: 'polygon',\n        // According to the GeoJSON specification.\n        // First must be exterior, and the rest are all interior(holes).\n        exterior: coordinates[0],\n        interiors: coordinates.slice(1)\n      });\n    }\n\n    if (geo.type === 'MultiPolygon') {\n      var coordinates = geo.coordinates;\n      zrUtil.each(coordinates, function (item) {\n        if (item[0]) {\n          geometries.push({\n            type: 'polygon',\n            exterior: item[0],\n            interiors: item.slice(1)\n          });\n        }\n      });\n    }\n\n    var region = new GeoJSONRegion(properties[nameProperty || 'name'], geometries, properties.cp);\n    region.properties = properties;\n    return region;\n  });\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/coord/geo/parseGeoJson.js"],"names":["zrUtil","GeoJSONRegion","decode","json","UTF8Encoding","jsonCompressed","encodeScale","UTF8Scale","features","f","length","feature","geometry","type","coordinates","c","decodePolygon","encodeOffsets","coordinate","c2","result","prevX","prevY","i","x","charCodeAt","y","push","parseGeoJSON","geoJson","nameProperty","map","filter","featureObj","properties","geo","geometries","exterior","interiors","slice","each","item","region","cp"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Parse and decode geo json\n */\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { GeoJSONRegion } from './Region';\n\nfunction decode(json) {\n  if (!json.UTF8Encoding) {\n    return json;\n  }\n\n  var jsonCompressed = json;\n  var encodeScale = jsonCompressed.UTF8Scale;\n\n  if (encodeScale == null) {\n    encodeScale = 1024;\n  }\n\n  var features = jsonCompressed.features;\n\n  for (var f = 0; f < features.length; f++) {\n    var feature = features[f];\n    var geometry = feature.geometry;\n\n    if (geometry.type === 'Polygon') {\n      var coordinates = geometry.coordinates;\n\n      for (var c = 0; c < coordinates.length; c++) {\n        coordinates[c] = decodePolygon(coordinates[c], geometry.encodeOffsets[c], encodeScale);\n      }\n    } else if (geometry.type === 'MultiPolygon') {\n      var coordinates = geometry.coordinates;\n\n      for (var c = 0; c < coordinates.length; c++) {\n        var coordinate = coordinates[c];\n\n        for (var c2 = 0; c2 < coordinate.length; c2++) {\n          coordinate[c2] = decodePolygon(coordinate[c2], geometry.encodeOffsets[c][c2], encodeScale);\n        }\n      }\n    }\n  } // Has been decoded\n\n\n  jsonCompressed.UTF8Encoding = false;\n  return jsonCompressed;\n}\n\nfunction decodePolygon(coordinate, encodeOffsets, encodeScale) {\n  var result = [];\n  var prevX = encodeOffsets[0];\n  var prevY = encodeOffsets[1];\n\n  for (var i = 0; i < coordinate.length; i += 2) {\n    var x = coordinate.charCodeAt(i) - 64;\n    var y = coordinate.charCodeAt(i + 1) - 64; // ZigZag decoding\n\n    x = x >> 1 ^ -(x & 1);\n    y = y >> 1 ^ -(y & 1); // Delta deocding\n\n    x += prevX;\n    y += prevY;\n    prevX = x;\n    prevY = y; // Dequantize\n\n    result.push([x / encodeScale, y / encodeScale]);\n  }\n\n  return result;\n}\n\nexport default function parseGeoJSON(geoJson, nameProperty) {\n  geoJson = decode(geoJson);\n  return zrUtil.map(zrUtil.filter(geoJson.features, function (featureObj) {\n    // Output of mapshaper may have geometry null\n    return featureObj.geometry && featureObj.properties && featureObj.geometry.coordinates.length > 0;\n  }), function (featureObj) {\n    var properties = featureObj.properties;\n    var geo = featureObj.geometry;\n    var geometries = [];\n\n    if (geo.type === 'Polygon') {\n      var coordinates = geo.coordinates;\n      geometries.push({\n        type: 'polygon',\n        // According to the GeoJSON specification.\n        // First must be exterior, and the rest are all interior(holes).\n        exterior: coordinates[0],\n        interiors: coordinates.slice(1)\n      });\n    }\n\n    if (geo.type === 'MultiPolygon') {\n      var coordinates = geo.coordinates;\n      zrUtil.each(coordinates, function (item) {\n        if (item[0]) {\n          geometries.push({\n            type: 'polygon',\n            exterior: item[0],\n            interiors: item.slice(1)\n          });\n        }\n      });\n    }\n\n    var region = new GeoJSONRegion(properties[nameProperty || 'name'], geometries, properties.cp);\n    region.properties = properties;\n    return region;\n  });\n}"]},"metadata":{},"sourceType":"module"}