{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport axisDefault from '../axisDefault';\nimport Model from '../../model/Model';\nimport { AxisModelCommonMixin } from '../axisModelCommonMixin';\nimport ComponentModel from '../../model/Component';\nvar valueAxisDefault = axisDefault.value;\n\nfunction defaultsShow(opt, show) {\n  return zrUtil.defaults({\n    show: show\n  }, opt);\n}\n\nvar RadarModel =\n/** @class */\nfunction (_super) {\n  __extends(RadarModel, _super);\n\n  function RadarModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = RadarModel.type;\n    return _this;\n  }\n\n  RadarModel.prototype.optionUpdated = function () {\n    var boundaryGap = this.get('boundaryGap');\n    var splitNumber = this.get('splitNumber');\n    var scale = this.get('scale');\n    var axisLine = this.get('axisLine');\n    var axisTick = this.get('axisTick'); // let axisType = this.get('axisType');\n\n    var axisLabel = this.get('axisLabel');\n    var nameTextStyle = this.get('axisName');\n    var showName = this.get(['axisName', 'show']);\n    var nameFormatter = this.get(['axisName', 'formatter']);\n    var nameGap = this.get('axisNameGap');\n    var triggerEvent = this.get('triggerEvent');\n    var indicatorModels = zrUtil.map(this.get('indicator') || [], function (indicatorOpt) {\n      // PENDING\n      if (indicatorOpt.max != null && indicatorOpt.max > 0 && !indicatorOpt.min) {\n        indicatorOpt.min = 0;\n      } else if (indicatorOpt.min != null && indicatorOpt.min < 0 && !indicatorOpt.max) {\n        indicatorOpt.max = 0;\n      }\n\n      var iNameTextStyle = nameTextStyle;\n\n      if (indicatorOpt.color != null) {\n        iNameTextStyle = zrUtil.defaults({\n          color: indicatorOpt.color\n        }, nameTextStyle);\n      } // Use same configuration\n\n\n      var innerIndicatorOpt = zrUtil.merge(zrUtil.clone(indicatorOpt), {\n        boundaryGap: boundaryGap,\n        splitNumber: splitNumber,\n        scale: scale,\n        axisLine: axisLine,\n        axisTick: axisTick,\n        // axisType: axisType,\n        axisLabel: axisLabel,\n        // Compatible with 2 and use text\n        name: indicatorOpt.text,\n        nameLocation: 'end',\n        nameGap: nameGap,\n        // min: 0,\n        nameTextStyle: iNameTextStyle,\n        triggerEvent: triggerEvent\n      }, false);\n\n      if (!showName) {\n        innerIndicatorOpt.name = '';\n      }\n\n      if (typeof nameFormatter === 'string') {\n        var indName = innerIndicatorOpt.name;\n        innerIndicatorOpt.name = nameFormatter.replace('{value}', indName != null ? indName : '');\n      } else if (typeof nameFormatter === 'function') {\n        innerIndicatorOpt.name = nameFormatter(innerIndicatorOpt.name, innerIndicatorOpt);\n      }\n\n      var model = new Model(innerIndicatorOpt, null, this.ecModel);\n      zrUtil.mixin(model, AxisModelCommonMixin.prototype); // For triggerEvent.\n\n      model.mainType = 'radar';\n      model.componentIndex = this.componentIndex;\n      return model;\n    }, this);\n    this._indicatorModels = indicatorModels;\n  };\n\n  RadarModel.prototype.getIndicatorModels = function () {\n    return this._indicatorModels;\n  };\n\n  RadarModel.type = 'radar';\n  RadarModel.defaultOption = {\n    zlevel: 0,\n    z: 0,\n    center: ['50%', '50%'],\n    radius: '75%',\n    startAngle: 90,\n    axisName: {\n      show: true // formatter: null\n      // textStyle: {}\n\n    },\n    boundaryGap: [0, 0],\n    splitNumber: 5,\n    axisNameGap: 15,\n    scale: false,\n    // Polygon or circle\n    shape: 'polygon',\n    axisLine: zrUtil.merge({\n      lineStyle: {\n        color: '#bbb'\n      }\n    }, valueAxisDefault.axisLine),\n    axisLabel: defaultsShow(valueAxisDefault.axisLabel, false),\n    axisTick: defaultsShow(valueAxisDefault.axisTick, false),\n    // axisType: 'value',\n    splitLine: defaultsShow(valueAxisDefault.splitLine, true),\n    splitArea: defaultsShow(valueAxisDefault.splitArea, true),\n    // {text, min, max}\n    indicator: []\n  };\n  return RadarModel;\n}(ComponentModel);\n\nexport default RadarModel;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/coord/radar/RadarModel.js"],"names":["__extends","zrUtil","axisDefault","Model","AxisModelCommonMixin","ComponentModel","valueAxisDefault","value","defaultsShow","opt","show","defaults","RadarModel","_super","_this","apply","arguments","type","prototype","optionUpdated","boundaryGap","get","splitNumber","scale","axisLine","axisTick","axisLabel","nameTextStyle","showName","nameFormatter","nameGap","triggerEvent","indicatorModels","map","indicatorOpt","max","min","iNameTextStyle","color","innerIndicatorOpt","merge","clone","name","text","nameLocation","indName","replace","model","ecModel","mixin","mainType","componentIndex","_indicatorModels","getIndicatorModels","defaultOption","zlevel","z","center","radius","startAngle","axisName","axisNameGap","shape","lineStyle","splitLine","splitArea","indicator"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport axisDefault from '../axisDefault';\nimport Model from '../../model/Model';\nimport { AxisModelCommonMixin } from '../axisModelCommonMixin';\nimport ComponentModel from '../../model/Component';\nvar valueAxisDefault = axisDefault.value;\n\nfunction defaultsShow(opt, show) {\n  return zrUtil.defaults({\n    show: show\n  }, opt);\n}\n\nvar RadarModel =\n/** @class */\nfunction (_super) {\n  __extends(RadarModel, _super);\n\n  function RadarModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = RadarModel.type;\n    return _this;\n  }\n\n  RadarModel.prototype.optionUpdated = function () {\n    var boundaryGap = this.get('boundaryGap');\n    var splitNumber = this.get('splitNumber');\n    var scale = this.get('scale');\n    var axisLine = this.get('axisLine');\n    var axisTick = this.get('axisTick'); // let axisType = this.get('axisType');\n\n    var axisLabel = this.get('axisLabel');\n    var nameTextStyle = this.get('axisName');\n    var showName = this.get(['axisName', 'show']);\n    var nameFormatter = this.get(['axisName', 'formatter']);\n    var nameGap = this.get('axisNameGap');\n    var triggerEvent = this.get('triggerEvent');\n    var indicatorModels = zrUtil.map(this.get('indicator') || [], function (indicatorOpt) {\n      // PENDING\n      if (indicatorOpt.max != null && indicatorOpt.max > 0 && !indicatorOpt.min) {\n        indicatorOpt.min = 0;\n      } else if (indicatorOpt.min != null && indicatorOpt.min < 0 && !indicatorOpt.max) {\n        indicatorOpt.max = 0;\n      }\n\n      var iNameTextStyle = nameTextStyle;\n\n      if (indicatorOpt.color != null) {\n        iNameTextStyle = zrUtil.defaults({\n          color: indicatorOpt.color\n        }, nameTextStyle);\n      } // Use same configuration\n\n\n      var innerIndicatorOpt = zrUtil.merge(zrUtil.clone(indicatorOpt), {\n        boundaryGap: boundaryGap,\n        splitNumber: splitNumber,\n        scale: scale,\n        axisLine: axisLine,\n        axisTick: axisTick,\n        // axisType: axisType,\n        axisLabel: axisLabel,\n        // Compatible with 2 and use text\n        name: indicatorOpt.text,\n        nameLocation: 'end',\n        nameGap: nameGap,\n        // min: 0,\n        nameTextStyle: iNameTextStyle,\n        triggerEvent: triggerEvent\n      }, false);\n\n      if (!showName) {\n        innerIndicatorOpt.name = '';\n      }\n\n      if (typeof nameFormatter === 'string') {\n        var indName = innerIndicatorOpt.name;\n        innerIndicatorOpt.name = nameFormatter.replace('{value}', indName != null ? indName : '');\n      } else if (typeof nameFormatter === 'function') {\n        innerIndicatorOpt.name = nameFormatter(innerIndicatorOpt.name, innerIndicatorOpt);\n      }\n\n      var model = new Model(innerIndicatorOpt, null, this.ecModel);\n      zrUtil.mixin(model, AxisModelCommonMixin.prototype); // For triggerEvent.\n\n      model.mainType = 'radar';\n      model.componentIndex = this.componentIndex;\n      return model;\n    }, this);\n    this._indicatorModels = indicatorModels;\n  };\n\n  RadarModel.prototype.getIndicatorModels = function () {\n    return this._indicatorModels;\n  };\n\n  RadarModel.type = 'radar';\n  RadarModel.defaultOption = {\n    zlevel: 0,\n    z: 0,\n    center: ['50%', '50%'],\n    radius: '75%',\n    startAngle: 90,\n    axisName: {\n      show: true // formatter: null\n      // textStyle: {}\n\n    },\n    boundaryGap: [0, 0],\n    splitNumber: 5,\n    axisNameGap: 15,\n    scale: false,\n    // Polygon or circle\n    shape: 'polygon',\n    axisLine: zrUtil.merge({\n      lineStyle: {\n        color: '#bbb'\n      }\n    }, valueAxisDefault.axisLine),\n    axisLabel: defaultsShow(valueAxisDefault.axisLabel, false),\n    axisTick: defaultsShow(valueAxisDefault.axisTick, false),\n    // axisType: 'value',\n    splitLine: defaultsShow(valueAxisDefault.splitLine, true),\n    splitArea: defaultsShow(valueAxisDefault.splitArea, true),\n    // {text, min, max}\n    indicator: []\n  };\n  return RadarModel;\n}(ComponentModel);\n\nexport default RadarModel;"]},"metadata":{},"sourceType":"module"}