{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { createHashMap, each } from 'zrender/lib/core/util';\nimport { getAxisMainType } from './helper';\nimport AxisProxy from './AxisProxy';\nvar dataZoomProcessor = {\n  // `dataZoomProcessor` will only be performed in needed series. Consider if\n  // there is a line series and a pie series, it is better not to update the\n  // line series if only pie series is needed to be updated.\n  getTargetSeries: function (ecModel) {\n    function eachAxisModel(cb) {\n      ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n        dataZoomModel.eachTargetAxis(function (axisDim, axisIndex) {\n          var axisModel = ecModel.getComponent(getAxisMainType(axisDim), axisIndex);\n          cb(axisDim, axisIndex, axisModel, dataZoomModel);\n        });\n      });\n    } // FIXME: it brings side-effect to `getTargetSeries`.\n    // Prepare axis proxies.\n\n\n    eachAxisModel(function (axisDim, axisIndex, axisModel, dataZoomModel) {\n      // dispose all last axis proxy, in case that some axis are deleted.\n      axisModel.__dzAxisProxy = null;\n    });\n    var proxyList = [];\n    eachAxisModel(function (axisDim, axisIndex, axisModel, dataZoomModel) {\n      // Different dataZooms may constrol the same axis. In that case,\n      // an axisProxy serves both of them.\n      if (!axisModel.__dzAxisProxy) {\n        // Use the first dataZoomModel as the main model of axisProxy.\n        axisModel.__dzAxisProxy = new AxisProxy(axisDim, axisIndex, dataZoomModel, ecModel);\n        proxyList.push(axisModel.__dzAxisProxy);\n      }\n    });\n    var seriesModelMap = createHashMap();\n    each(proxyList, function (axisProxy) {\n      each(axisProxy.getTargetSeriesModels(), function (seriesModel) {\n        seriesModelMap.set(seriesModel.uid, seriesModel);\n      });\n    });\n    return seriesModelMap;\n  },\n  // Consider appendData, where filter should be performed. Because data process is\n  // in block mode currently, it is not need to worry about that the overallProgress\n  // execute every frame.\n  overallReset: function (ecModel, api) {\n    ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n      // We calculate window and reset axis here but not in model\n      // init stage and not after action dispatch handler, because\n      // reset should be called after seriesData.restoreData.\n      dataZoomModel.eachTargetAxis(function (axisDim, axisIndex) {\n        dataZoomModel.getAxisProxy(axisDim, axisIndex).reset(dataZoomModel);\n      }); // Caution: data zoom filtering is order sensitive when using\n      // percent range and no min/max/scale set on axis.\n      // For example, we have dataZoom definition:\n      // [\n      //      {xAxisIndex: 0, start: 30, end: 70},\n      //      {yAxisIndex: 0, start: 20, end: 80}\n      // ]\n      // In this case, [20, 80] of y-dataZoom should be based on data\n      // that have filtered by x-dataZoom using range of [30, 70],\n      // but should not be based on full raw data. Thus sliding\n      // x-dataZoom will change both ranges of xAxis and yAxis,\n      // while sliding y-dataZoom will only change the range of yAxis.\n      // So we should filter x-axis after reset x-axis immediately,\n      // and then reset y-axis and filter y-axis.\n\n      dataZoomModel.eachTargetAxis(function (axisDim, axisIndex) {\n        dataZoomModel.getAxisProxy(axisDim, axisIndex).filterData(dataZoomModel, api);\n      });\n    });\n    ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n      // Fullfill all of the range props so that user\n      // is able to get them from chart.getOption().\n      var axisProxy = dataZoomModel.findRepresentativeAxisProxy();\n\n      if (axisProxy) {\n        var percentRange = axisProxy.getDataPercentWindow();\n        var valueRange = axisProxy.getDataValueWindow();\n        dataZoomModel.setCalculatedRange({\n          start: percentRange[0],\n          end: percentRange[1],\n          startValue: valueRange[0],\n          endValue: valueRange[1]\n        });\n      }\n    });\n  }\n};\nexport default dataZoomProcessor;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/component/dataZoom/dataZoomProcessor.js"],"names":["createHashMap","each","getAxisMainType","AxisProxy","dataZoomProcessor","getTargetSeries","ecModel","eachAxisModel","cb","eachComponent","dataZoomModel","eachTargetAxis","axisDim","axisIndex","axisModel","getComponent","__dzAxisProxy","proxyList","push","seriesModelMap","axisProxy","getTargetSeriesModels","seriesModel","set","uid","overallReset","api","getAxisProxy","reset","filterData","findRepresentativeAxisProxy","percentRange","getDataPercentWindow","valueRange","getDataValueWindow","setCalculatedRange","start","end","startValue","endValue"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { createHashMap, each } from 'zrender/lib/core/util';\nimport { getAxisMainType } from './helper';\nimport AxisProxy from './AxisProxy';\nvar dataZoomProcessor = {\n  // `dataZoomProcessor` will only be performed in needed series. Consider if\n  // there is a line series and a pie series, it is better not to update the\n  // line series if only pie series is needed to be updated.\n  getTargetSeries: function (ecModel) {\n    function eachAxisModel(cb) {\n      ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n        dataZoomModel.eachTargetAxis(function (axisDim, axisIndex) {\n          var axisModel = ecModel.getComponent(getAxisMainType(axisDim), axisIndex);\n          cb(axisDim, axisIndex, axisModel, dataZoomModel);\n        });\n      });\n    } // FIXME: it brings side-effect to `getTargetSeries`.\n    // Prepare axis proxies.\n\n\n    eachAxisModel(function (axisDim, axisIndex, axisModel, dataZoomModel) {\n      // dispose all last axis proxy, in case that some axis are deleted.\n      axisModel.__dzAxisProxy = null;\n    });\n    var proxyList = [];\n    eachAxisModel(function (axisDim, axisIndex, axisModel, dataZoomModel) {\n      // Different dataZooms may constrol the same axis. In that case,\n      // an axisProxy serves both of them.\n      if (!axisModel.__dzAxisProxy) {\n        // Use the first dataZoomModel as the main model of axisProxy.\n        axisModel.__dzAxisProxy = new AxisProxy(axisDim, axisIndex, dataZoomModel, ecModel);\n        proxyList.push(axisModel.__dzAxisProxy);\n      }\n    });\n    var seriesModelMap = createHashMap();\n    each(proxyList, function (axisProxy) {\n      each(axisProxy.getTargetSeriesModels(), function (seriesModel) {\n        seriesModelMap.set(seriesModel.uid, seriesModel);\n      });\n    });\n    return seriesModelMap;\n  },\n  // Consider appendData, where filter should be performed. Because data process is\n  // in block mode currently, it is not need to worry about that the overallProgress\n  // execute every frame.\n  overallReset: function (ecModel, api) {\n    ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n      // We calculate window and reset axis here but not in model\n      // init stage and not after action dispatch handler, because\n      // reset should be called after seriesData.restoreData.\n      dataZoomModel.eachTargetAxis(function (axisDim, axisIndex) {\n        dataZoomModel.getAxisProxy(axisDim, axisIndex).reset(dataZoomModel);\n      }); // Caution: data zoom filtering is order sensitive when using\n      // percent range and no min/max/scale set on axis.\n      // For example, we have dataZoom definition:\n      // [\n      //      {xAxisIndex: 0, start: 30, end: 70},\n      //      {yAxisIndex: 0, start: 20, end: 80}\n      // ]\n      // In this case, [20, 80] of y-dataZoom should be based on data\n      // that have filtered by x-dataZoom using range of [30, 70],\n      // but should not be based on full raw data. Thus sliding\n      // x-dataZoom will change both ranges of xAxis and yAxis,\n      // while sliding y-dataZoom will only change the range of yAxis.\n      // So we should filter x-axis after reset x-axis immediately,\n      // and then reset y-axis and filter y-axis.\n\n      dataZoomModel.eachTargetAxis(function (axisDim, axisIndex) {\n        dataZoomModel.getAxisProxy(axisDim, axisIndex).filterData(dataZoomModel, api);\n      });\n    });\n    ecModel.eachComponent('dataZoom', function (dataZoomModel) {\n      // Fullfill all of the range props so that user\n      // is able to get them from chart.getOption().\n      var axisProxy = dataZoomModel.findRepresentativeAxisProxy();\n\n      if (axisProxy) {\n        var percentRange = axisProxy.getDataPercentWindow();\n        var valueRange = axisProxy.getDataValueWindow();\n        dataZoomModel.setCalculatedRange({\n          start: percentRange[0],\n          end: percentRange[1],\n          startValue: valueRange[0],\n          endValue: valueRange[1]\n        });\n      }\n    });\n  }\n};\nexport default dataZoomProcessor;"]},"metadata":{},"sourceType":"module"}