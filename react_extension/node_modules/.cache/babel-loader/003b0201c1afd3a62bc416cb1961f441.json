{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport SeriesModel from '../../model/Series';\nimport Tree from '../../data/Tree';\nimport { wrapTreePathInfo } from '../helper/treeHelper';\nimport Model from '../../model/Model';\nimport enableAriaDecalForTree from '../helper/enableAriaDecalForTree';\n\nvar SunburstSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(SunburstSeriesModel, _super);\n\n  function SunburstSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = SunburstSeriesModel.type;\n    _this.ignoreStyleOnData = true;\n    return _this;\n  }\n\n  SunburstSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    // Create a virtual root.\n    var root = {\n      name: option.name,\n      children: option.data\n    };\n    completeTreeValue(root);\n    var levelModels = zrUtil.map(option.levels || [], function (levelDefine) {\n      return new Model(levelDefine, this, ecModel);\n    }, this); // Make sure always a new tree is created when setOption,\n    // in TreemapView, we check whether oldTree === newTree\n    // to choose mappings approach among old shapes and new shapes.\n\n    var tree = Tree.createTree(root, this, beforeLink);\n\n    function beforeLink(nodeData) {\n      nodeData.wrapMethod('getItemModel', function (model, idx) {\n        var node = tree.getNodeByDataIndex(idx);\n        var levelModel = levelModels[node.depth];\n        levelModel && (model.parentModel = levelModel);\n        return model;\n      });\n    }\n\n    return tree.data;\n  };\n\n  SunburstSeriesModel.prototype.optionUpdated = function () {\n    this.resetViewRoot();\n  };\n  /*\n   * @override\n   */\n\n\n  SunburstSeriesModel.prototype.getDataParams = function (dataIndex) {\n    var params = _super.prototype.getDataParams.apply(this, arguments);\n\n    var node = this.getData().tree.getNodeByDataIndex(dataIndex);\n    params.treePathInfo = wrapTreePathInfo(node, this);\n    return params;\n  };\n\n  SunburstSeriesModel.prototype.getViewRoot = function () {\n    return this._viewRoot;\n  };\n\n  SunburstSeriesModel.prototype.resetViewRoot = function (viewRoot) {\n    viewRoot ? this._viewRoot = viewRoot : viewRoot = this._viewRoot;\n    var root = this.getRawData().tree.root;\n\n    if (!viewRoot || viewRoot !== root && !root.contains(viewRoot)) {\n      this._viewRoot = root;\n    }\n  };\n\n  SunburstSeriesModel.prototype.enableAriaDecal = function () {\n    enableAriaDecalForTree(this);\n  };\n\n  SunburstSeriesModel.type = 'series.sunburst';\n  SunburstSeriesModel.defaultOption = {\n    zlevel: 0,\n    z: 2,\n    // 默认全局居中\n    center: ['50%', '50%'],\n    radius: [0, '75%'],\n    // 默认顺时针\n    clockwise: true,\n    startAngle: 90,\n    // 最小角度改为0\n    minAngle: 0,\n    // If still show when all data zero.\n    stillShowZeroSum: true,\n    // 'rootToNode', 'link', or false\n    nodeClick: 'rootToNode',\n    renderLabelForZeroData: false,\n    label: {\n      // could be: 'radial', 'tangential', or 'none'\n      rotate: 'radial',\n      show: true,\n      opacity: 1,\n      // 'left' is for inner side of inside, and 'right' is for outter\n      // side for inside\n      align: 'center',\n      position: 'inside',\n      distance: 5,\n      silent: true\n    },\n    itemStyle: {\n      borderWidth: 1,\n      borderColor: 'white',\n      borderType: 'solid',\n      shadowBlur: 0,\n      shadowColor: 'rgba(0, 0, 0, 0.2)',\n      shadowOffsetX: 0,\n      shadowOffsetY: 0,\n      opacity: 1\n    },\n    emphasis: {\n      focus: 'descendant'\n    },\n    blur: {\n      itemStyle: {\n        opacity: 0.2\n      },\n      label: {\n        opacity: 0.1\n      }\n    },\n    // Animation type canbe expansion, scale\n    animationType: 'expansion',\n    animationDuration: 1000,\n    animationDurationUpdate: 500,\n    data: [],\n\n    /**\n     * Sort order.\n     *\n     * Valid values: 'desc', 'asc', null, or callback function.\n     * 'desc' and 'asc' for descend and ascendant order;\n     * null for not sorting;\n     * example of callback function:\n     * function(nodeA, nodeB) {\n     *     return nodeA.getValue() - nodeB.getValue();\n     * }\n     */\n    sort: 'desc'\n  };\n  return SunburstSeriesModel;\n}(SeriesModel);\n\nfunction completeTreeValue(dataNode) {\n  // Postorder travel tree.\n  // If value of none-leaf node is not set,\n  // calculate it by suming up the value of all children.\n  var sum = 0;\n  zrUtil.each(dataNode.children, function (child) {\n    completeTreeValue(child);\n    var childValue = child.value; // TODO First value of array must be a number\n\n    zrUtil.isArray(childValue) && (childValue = childValue[0]);\n    sum += childValue;\n  });\n  var thisValue = dataNode.value;\n\n  if (zrUtil.isArray(thisValue)) {\n    thisValue = thisValue[0];\n  }\n\n  if (thisValue == null || isNaN(thisValue)) {\n    thisValue = sum;\n  } // Value should not less than 0.\n\n\n  if (thisValue < 0) {\n    thisValue = 0;\n  }\n\n  zrUtil.isArray(dataNode.value) ? dataNode.value[0] = thisValue : dataNode.value = thisValue;\n}\n\nexport default SunburstSeriesModel;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/chart/sunburst/SunburstSeries.js"],"names":["__extends","zrUtil","SeriesModel","Tree","wrapTreePathInfo","Model","enableAriaDecalForTree","SunburstSeriesModel","_super","_this","apply","arguments","type","ignoreStyleOnData","prototype","getInitialData","option","ecModel","root","name","children","data","completeTreeValue","levelModels","map","levels","levelDefine","tree","createTree","beforeLink","nodeData","wrapMethod","model","idx","node","getNodeByDataIndex","levelModel","depth","parentModel","optionUpdated","resetViewRoot","getDataParams","dataIndex","params","getData","treePathInfo","getViewRoot","_viewRoot","viewRoot","getRawData","contains","enableAriaDecal","defaultOption","zlevel","z","center","radius","clockwise","startAngle","minAngle","stillShowZeroSum","nodeClick","renderLabelForZeroData","label","rotate","show","opacity","align","position","distance","silent","itemStyle","borderWidth","borderColor","borderType","shadowBlur","shadowColor","shadowOffsetX","shadowOffsetY","emphasis","focus","blur","animationType","animationDuration","animationDurationUpdate","sort","dataNode","sum","each","child","childValue","value","isArray","thisValue","isNaN"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport SeriesModel from '../../model/Series';\nimport Tree from '../../data/Tree';\nimport { wrapTreePathInfo } from '../helper/treeHelper';\nimport Model from '../../model/Model';\nimport enableAriaDecalForTree from '../helper/enableAriaDecalForTree';\n\nvar SunburstSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(SunburstSeriesModel, _super);\n\n  function SunburstSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = SunburstSeriesModel.type;\n    _this.ignoreStyleOnData = true;\n    return _this;\n  }\n\n  SunburstSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    // Create a virtual root.\n    var root = {\n      name: option.name,\n      children: option.data\n    };\n    completeTreeValue(root);\n    var levelModels = zrUtil.map(option.levels || [], function (levelDefine) {\n      return new Model(levelDefine, this, ecModel);\n    }, this); // Make sure always a new tree is created when setOption,\n    // in TreemapView, we check whether oldTree === newTree\n    // to choose mappings approach among old shapes and new shapes.\n\n    var tree = Tree.createTree(root, this, beforeLink);\n\n    function beforeLink(nodeData) {\n      nodeData.wrapMethod('getItemModel', function (model, idx) {\n        var node = tree.getNodeByDataIndex(idx);\n        var levelModel = levelModels[node.depth];\n        levelModel && (model.parentModel = levelModel);\n        return model;\n      });\n    }\n\n    return tree.data;\n  };\n\n  SunburstSeriesModel.prototype.optionUpdated = function () {\n    this.resetViewRoot();\n  };\n  /*\n   * @override\n   */\n\n\n  SunburstSeriesModel.prototype.getDataParams = function (dataIndex) {\n    var params = _super.prototype.getDataParams.apply(this, arguments);\n\n    var node = this.getData().tree.getNodeByDataIndex(dataIndex);\n    params.treePathInfo = wrapTreePathInfo(node, this);\n    return params;\n  };\n\n  SunburstSeriesModel.prototype.getViewRoot = function () {\n    return this._viewRoot;\n  };\n\n  SunburstSeriesModel.prototype.resetViewRoot = function (viewRoot) {\n    viewRoot ? this._viewRoot = viewRoot : viewRoot = this._viewRoot;\n    var root = this.getRawData().tree.root;\n\n    if (!viewRoot || viewRoot !== root && !root.contains(viewRoot)) {\n      this._viewRoot = root;\n    }\n  };\n\n  SunburstSeriesModel.prototype.enableAriaDecal = function () {\n    enableAriaDecalForTree(this);\n  };\n\n  SunburstSeriesModel.type = 'series.sunburst';\n  SunburstSeriesModel.defaultOption = {\n    zlevel: 0,\n    z: 2,\n    // 默认全局居中\n    center: ['50%', '50%'],\n    radius: [0, '75%'],\n    // 默认顺时针\n    clockwise: true,\n    startAngle: 90,\n    // 最小角度改为0\n    minAngle: 0,\n    // If still show when all data zero.\n    stillShowZeroSum: true,\n    // 'rootToNode', 'link', or false\n    nodeClick: 'rootToNode',\n    renderLabelForZeroData: false,\n    label: {\n      // could be: 'radial', 'tangential', or 'none'\n      rotate: 'radial',\n      show: true,\n      opacity: 1,\n      // 'left' is for inner side of inside, and 'right' is for outter\n      // side for inside\n      align: 'center',\n      position: 'inside',\n      distance: 5,\n      silent: true\n    },\n    itemStyle: {\n      borderWidth: 1,\n      borderColor: 'white',\n      borderType: 'solid',\n      shadowBlur: 0,\n      shadowColor: 'rgba(0, 0, 0, 0.2)',\n      shadowOffsetX: 0,\n      shadowOffsetY: 0,\n      opacity: 1\n    },\n    emphasis: {\n      focus: 'descendant'\n    },\n    blur: {\n      itemStyle: {\n        opacity: 0.2\n      },\n      label: {\n        opacity: 0.1\n      }\n    },\n    // Animation type canbe expansion, scale\n    animationType: 'expansion',\n    animationDuration: 1000,\n    animationDurationUpdate: 500,\n    data: [],\n\n    /**\n     * Sort order.\n     *\n     * Valid values: 'desc', 'asc', null, or callback function.\n     * 'desc' and 'asc' for descend and ascendant order;\n     * null for not sorting;\n     * example of callback function:\n     * function(nodeA, nodeB) {\n     *     return nodeA.getValue() - nodeB.getValue();\n     * }\n     */\n    sort: 'desc'\n  };\n  return SunburstSeriesModel;\n}(SeriesModel);\n\nfunction completeTreeValue(dataNode) {\n  // Postorder travel tree.\n  // If value of none-leaf node is not set,\n  // calculate it by suming up the value of all children.\n  var sum = 0;\n  zrUtil.each(dataNode.children, function (child) {\n    completeTreeValue(child);\n    var childValue = child.value; // TODO First value of array must be a number\n\n    zrUtil.isArray(childValue) && (childValue = childValue[0]);\n    sum += childValue;\n  });\n  var thisValue = dataNode.value;\n\n  if (zrUtil.isArray(thisValue)) {\n    thisValue = thisValue[0];\n  }\n\n  if (thisValue == null || isNaN(thisValue)) {\n    thisValue = sum;\n  } // Value should not less than 0.\n\n\n  if (thisValue < 0) {\n    thisValue = 0;\n  }\n\n  zrUtil.isArray(dataNode.value) ? dataNode.value[0] = thisValue : dataNode.value = thisValue;\n}\n\nexport default SunburstSeriesModel;"]},"metadata":{},"sourceType":"module"}