{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Helper for model references.\n * There are many manners to refer axis/coordSys.\n */\n// TODO\n// merge relevant logic to this file?\n// check: \"modelHelper\" of tooltip and \"BrushTargetManager\".\nimport { createHashMap, retrieve, each } from 'zrender/lib/core/util';\nimport { SINGLE_REFERRING } from '../util/model';\n/**\n * @class\n * For example:\n * {\n *     coordSysName: 'cartesian2d',\n *     coordSysDims: ['x', 'y', ...],\n *     axisMap: HashMap({\n *         x: xAxisModel,\n *         y: yAxisModel\n *     }),\n *     categoryAxisMap: HashMap({\n *         x: xAxisModel,\n *         y: undefined\n *     }),\n *     // The index of the first category axis in `coordSysDims`.\n *     // `null/undefined` means no category axis exists.\n *     firstCategoryDimIndex: 1,\n *     // To replace user specified encode.\n * }\n */\n\nvar CoordSysInfo =\n/** @class */\nfunction () {\n  function CoordSysInfo(coordSysName) {\n    this.coordSysDims = [];\n    this.axisMap = createHashMap();\n    this.categoryAxisMap = createHashMap();\n    this.coordSysName = coordSysName;\n  }\n\n  return CoordSysInfo;\n}();\n\nexport function getCoordSysInfoBySeries(seriesModel) {\n  var coordSysName = seriesModel.get('coordinateSystem');\n  var result = new CoordSysInfo(coordSysName);\n  var fetch = fetchers[coordSysName];\n\n  if (fetch) {\n    fetch(seriesModel, result, result.axisMap, result.categoryAxisMap);\n    return result;\n  }\n}\nvar fetchers = {\n  cartesian2d: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var xAxisModel = seriesModel.getReferringComponents('xAxis', SINGLE_REFERRING).models[0];\n    var yAxisModel = seriesModel.getReferringComponents('yAxis', SINGLE_REFERRING).models[0];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!xAxisModel) {\n        throw new Error('xAxis \"' + retrieve(seriesModel.get('xAxisIndex'), seriesModel.get('xAxisId'), 0) + '\" not found');\n      }\n\n      if (!yAxisModel) {\n        throw new Error('yAxis \"' + retrieve(seriesModel.get('xAxisIndex'), seriesModel.get('yAxisId'), 0) + '\" not found');\n      }\n    }\n\n    result.coordSysDims = ['x', 'y'];\n    axisMap.set('x', xAxisModel);\n    axisMap.set('y', yAxisModel);\n\n    if (isCategory(xAxisModel)) {\n      categoryAxisMap.set('x', xAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n\n    if (isCategory(yAxisModel)) {\n      categoryAxisMap.set('y', yAxisModel);\n      result.firstCategoryDimIndex == null && (result.firstCategoryDimIndex = 1);\n    }\n  },\n  singleAxis: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var singleAxisModel = seriesModel.getReferringComponents('singleAxis', SINGLE_REFERRING).models[0];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!singleAxisModel) {\n        throw new Error('singleAxis should be specified.');\n      }\n    }\n\n    result.coordSysDims = ['single'];\n    axisMap.set('single', singleAxisModel);\n\n    if (isCategory(singleAxisModel)) {\n      categoryAxisMap.set('single', singleAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n  },\n  polar: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var polarModel = seriesModel.getReferringComponents('polar', SINGLE_REFERRING).models[0];\n    var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\n    var angleAxisModel = polarModel.findAxisModel('angleAxis');\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!angleAxisModel) {\n        throw new Error('angleAxis option not found');\n      }\n\n      if (!radiusAxisModel) {\n        throw new Error('radiusAxis option not found');\n      }\n    }\n\n    result.coordSysDims = ['radius', 'angle'];\n    axisMap.set('radius', radiusAxisModel);\n    axisMap.set('angle', angleAxisModel);\n\n    if (isCategory(radiusAxisModel)) {\n      categoryAxisMap.set('radius', radiusAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n\n    if (isCategory(angleAxisModel)) {\n      categoryAxisMap.set('angle', angleAxisModel);\n      result.firstCategoryDimIndex == null && (result.firstCategoryDimIndex = 1);\n    }\n  },\n  geo: function (seriesModel, result, axisMap, categoryAxisMap) {\n    result.coordSysDims = ['lng', 'lat'];\n  },\n  parallel: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var ecModel = seriesModel.ecModel;\n    var parallelModel = ecModel.getComponent('parallel', seriesModel.get('parallelIndex'));\n    var coordSysDims = result.coordSysDims = parallelModel.dimensions.slice();\n    each(parallelModel.parallelAxisIndex, function (axisIndex, index) {\n      var axisModel = ecModel.getComponent('parallelAxis', axisIndex);\n      var axisDim = coordSysDims[index];\n      axisMap.set(axisDim, axisModel);\n\n      if (isCategory(axisModel)) {\n        categoryAxisMap.set(axisDim, axisModel);\n\n        if (result.firstCategoryDimIndex == null) {\n          result.firstCategoryDimIndex = index;\n        }\n      }\n    });\n  }\n};\n\nfunction isCategory(axisModel) {\n  return axisModel.get('type') === 'category';\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/model/referHelper.js"],"names":["createHashMap","retrieve","each","SINGLE_REFERRING","CoordSysInfo","coordSysName","coordSysDims","axisMap","categoryAxisMap","getCoordSysInfoBySeries","seriesModel","get","result","fetch","fetchers","cartesian2d","xAxisModel","getReferringComponents","models","yAxisModel","process","env","NODE_ENV","Error","set","isCategory","firstCategoryDimIndex","singleAxis","singleAxisModel","polar","polarModel","radiusAxisModel","findAxisModel","angleAxisModel","geo","parallel","ecModel","parallelModel","getComponent","dimensions","slice","parallelAxisIndex","axisIndex","index","axisModel","axisDim"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * Helper for model references.\n * There are many manners to refer axis/coordSys.\n */\n// TODO\n// merge relevant logic to this file?\n// check: \"modelHelper\" of tooltip and \"BrushTargetManager\".\nimport { createHashMap, retrieve, each } from 'zrender/lib/core/util';\nimport { SINGLE_REFERRING } from '../util/model';\n/**\n * @class\n * For example:\n * {\n *     coordSysName: 'cartesian2d',\n *     coordSysDims: ['x', 'y', ...],\n *     axisMap: HashMap({\n *         x: xAxisModel,\n *         y: yAxisModel\n *     }),\n *     categoryAxisMap: HashMap({\n *         x: xAxisModel,\n *         y: undefined\n *     }),\n *     // The index of the first category axis in `coordSysDims`.\n *     // `null/undefined` means no category axis exists.\n *     firstCategoryDimIndex: 1,\n *     // To replace user specified encode.\n * }\n */\n\nvar CoordSysInfo =\n/** @class */\nfunction () {\n  function CoordSysInfo(coordSysName) {\n    this.coordSysDims = [];\n    this.axisMap = createHashMap();\n    this.categoryAxisMap = createHashMap();\n    this.coordSysName = coordSysName;\n  }\n\n  return CoordSysInfo;\n}();\n\nexport function getCoordSysInfoBySeries(seriesModel) {\n  var coordSysName = seriesModel.get('coordinateSystem');\n  var result = new CoordSysInfo(coordSysName);\n  var fetch = fetchers[coordSysName];\n\n  if (fetch) {\n    fetch(seriesModel, result, result.axisMap, result.categoryAxisMap);\n    return result;\n  }\n}\nvar fetchers = {\n  cartesian2d: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var xAxisModel = seriesModel.getReferringComponents('xAxis', SINGLE_REFERRING).models[0];\n    var yAxisModel = seriesModel.getReferringComponents('yAxis', SINGLE_REFERRING).models[0];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!xAxisModel) {\n        throw new Error('xAxis \"' + retrieve(seriesModel.get('xAxisIndex'), seriesModel.get('xAxisId'), 0) + '\" not found');\n      }\n\n      if (!yAxisModel) {\n        throw new Error('yAxis \"' + retrieve(seriesModel.get('xAxisIndex'), seriesModel.get('yAxisId'), 0) + '\" not found');\n      }\n    }\n\n    result.coordSysDims = ['x', 'y'];\n    axisMap.set('x', xAxisModel);\n    axisMap.set('y', yAxisModel);\n\n    if (isCategory(xAxisModel)) {\n      categoryAxisMap.set('x', xAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n\n    if (isCategory(yAxisModel)) {\n      categoryAxisMap.set('y', yAxisModel);\n      result.firstCategoryDimIndex == null && (result.firstCategoryDimIndex = 1);\n    }\n  },\n  singleAxis: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var singleAxisModel = seriesModel.getReferringComponents('singleAxis', SINGLE_REFERRING).models[0];\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!singleAxisModel) {\n        throw new Error('singleAxis should be specified.');\n      }\n    }\n\n    result.coordSysDims = ['single'];\n    axisMap.set('single', singleAxisModel);\n\n    if (isCategory(singleAxisModel)) {\n      categoryAxisMap.set('single', singleAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n  },\n  polar: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var polarModel = seriesModel.getReferringComponents('polar', SINGLE_REFERRING).models[0];\n    var radiusAxisModel = polarModel.findAxisModel('radiusAxis');\n    var angleAxisModel = polarModel.findAxisModel('angleAxis');\n\n    if (process.env.NODE_ENV !== 'production') {\n      if (!angleAxisModel) {\n        throw new Error('angleAxis option not found');\n      }\n\n      if (!radiusAxisModel) {\n        throw new Error('radiusAxis option not found');\n      }\n    }\n\n    result.coordSysDims = ['radius', 'angle'];\n    axisMap.set('radius', radiusAxisModel);\n    axisMap.set('angle', angleAxisModel);\n\n    if (isCategory(radiusAxisModel)) {\n      categoryAxisMap.set('radius', radiusAxisModel);\n      result.firstCategoryDimIndex = 0;\n    }\n\n    if (isCategory(angleAxisModel)) {\n      categoryAxisMap.set('angle', angleAxisModel);\n      result.firstCategoryDimIndex == null && (result.firstCategoryDimIndex = 1);\n    }\n  },\n  geo: function (seriesModel, result, axisMap, categoryAxisMap) {\n    result.coordSysDims = ['lng', 'lat'];\n  },\n  parallel: function (seriesModel, result, axisMap, categoryAxisMap) {\n    var ecModel = seriesModel.ecModel;\n    var parallelModel = ecModel.getComponent('parallel', seriesModel.get('parallelIndex'));\n    var coordSysDims = result.coordSysDims = parallelModel.dimensions.slice();\n    each(parallelModel.parallelAxisIndex, function (axisIndex, index) {\n      var axisModel = ecModel.getComponent('parallelAxis', axisIndex);\n      var axisDim = coordSysDims[index];\n      axisMap.set(axisDim, axisModel);\n\n      if (isCategory(axisModel)) {\n        categoryAxisMap.set(axisDim, axisModel);\n\n        if (result.firstCategoryDimIndex == null) {\n          result.firstCategoryDimIndex = index;\n        }\n      }\n    });\n  }\n};\n\nfunction isCategory(axisModel) {\n  return axisModel.get('type') === 'category';\n}"]},"metadata":{},"sourceType":"module"}