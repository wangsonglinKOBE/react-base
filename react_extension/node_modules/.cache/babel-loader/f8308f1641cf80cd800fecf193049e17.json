{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { extend } from 'zrender/lib/core/util';\n\nfunction normalize(a) {\n  if (!(a instanceof Array)) {\n    a = [a, a];\n  }\n\n  return a;\n}\n\nexport default function graphEdgeVisual(ecModel) {\n  ecModel.eachSeriesByType('graph', function (seriesModel) {\n    var graph = seriesModel.getGraph();\n    var edgeData = seriesModel.getEdgeData();\n    var symbolType = normalize(seriesModel.get('edgeSymbol'));\n    var symbolSize = normalize(seriesModel.get('edgeSymbolSize')); // const colorQuery = ['lineStyle', 'color'] as const;\n    // const opacityQuery = ['lineStyle', 'opacity'] as const;\n\n    edgeData.setVisual('fromSymbol', symbolType && symbolType[0]);\n    edgeData.setVisual('toSymbol', symbolType && symbolType[1]);\n    edgeData.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);\n    edgeData.setVisual('toSymbolSize', symbolSize && symbolSize[1]);\n    edgeData.setVisual('style', seriesModel.getModel('lineStyle').getLineStyle());\n    edgeData.each(function (idx) {\n      var itemModel = edgeData.getItemModel(idx);\n      var edge = graph.getEdgeByIndex(idx);\n      var symbolType = normalize(itemModel.getShallow('symbol', true));\n      var symbolSize = normalize(itemModel.getShallow('symbolSize', true)); // Edge visual must after node visual\n\n      var style = itemModel.getModel('lineStyle').getLineStyle();\n      var existsStyle = edgeData.ensureUniqueItemVisual(idx, 'style');\n      extend(existsStyle, style);\n\n      switch (existsStyle.stroke) {\n        case 'source':\n          {\n            var nodeStyle = edge.node1.getVisual('style');\n            existsStyle.stroke = nodeStyle && nodeStyle.fill;\n            break;\n          }\n\n        case 'target':\n          {\n            var nodeStyle = edge.node2.getVisual('style');\n            existsStyle.stroke = nodeStyle && nodeStyle.fill;\n            break;\n          }\n      }\n\n      symbolType[0] && edge.setVisual('fromSymbol', symbolType[0]);\n      symbolType[1] && edge.setVisual('toSymbol', symbolType[1]);\n      symbolSize[0] && edge.setVisual('fromSymbolSize', symbolSize[0]);\n      symbolSize[1] && edge.setVisual('toSymbolSize', symbolSize[1]);\n    });\n  });\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/chart/graph/edgeVisual.js"],"names":["extend","normalize","a","Array","graphEdgeVisual","ecModel","eachSeriesByType","seriesModel","graph","getGraph","edgeData","getEdgeData","symbolType","get","symbolSize","setVisual","getModel","getLineStyle","each","idx","itemModel","getItemModel","edge","getEdgeByIndex","getShallow","style","existsStyle","ensureUniqueItemVisual","stroke","nodeStyle","node1","getVisual","fill","node2"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,MAAT,QAAuB,uBAAvB;;AAEA,SAASC,SAAT,CAAmBC,CAAnB,EAAsB;AACpB,MAAI,EAAEA,CAAC,YAAYC,KAAf,CAAJ,EAA2B;AACzBD,IAAAA,CAAC,GAAG,CAACA,CAAD,EAAIA,CAAJ,CAAJ;AACD;;AAED,SAAOA,CAAP;AACD;;AAED,eAAe,SAASE,eAAT,CAAyBC,OAAzB,EAAkC;AAC/CA,EAAAA,OAAO,CAACC,gBAAR,CAAyB,OAAzB,EAAkC,UAAUC,WAAV,EAAuB;AACvD,QAAIC,KAAK,GAAGD,WAAW,CAACE,QAAZ,EAAZ;AACA,QAAIC,QAAQ,GAAGH,WAAW,CAACI,WAAZ,EAAf;AACA,QAAIC,UAAU,GAAGX,SAAS,CAACM,WAAW,CAACM,GAAZ,CAAgB,YAAhB,CAAD,CAA1B;AACA,QAAIC,UAAU,GAAGb,SAAS,CAACM,WAAW,CAACM,GAAZ,CAAgB,gBAAhB,CAAD,CAA1B,CAJuD,CAIQ;AAC/D;;AAEAH,IAAAA,QAAQ,CAACK,SAAT,CAAmB,YAAnB,EAAiCH,UAAU,IAAIA,UAAU,CAAC,CAAD,CAAzD;AACAF,IAAAA,QAAQ,CAACK,SAAT,CAAmB,UAAnB,EAA+BH,UAAU,IAAIA,UAAU,CAAC,CAAD,CAAvD;AACAF,IAAAA,QAAQ,CAACK,SAAT,CAAmB,gBAAnB,EAAqCD,UAAU,IAAIA,UAAU,CAAC,CAAD,CAA7D;AACAJ,IAAAA,QAAQ,CAACK,SAAT,CAAmB,cAAnB,EAAmCD,UAAU,IAAIA,UAAU,CAAC,CAAD,CAA3D;AACAJ,IAAAA,QAAQ,CAACK,SAAT,CAAmB,OAAnB,EAA4BR,WAAW,CAACS,QAAZ,CAAqB,WAArB,EAAkCC,YAAlC,EAA5B;AACAP,IAAAA,QAAQ,CAACQ,IAAT,CAAc,UAAUC,GAAV,EAAe;AAC3B,UAAIC,SAAS,GAAGV,QAAQ,CAACW,YAAT,CAAsBF,GAAtB,CAAhB;AACA,UAAIG,IAAI,GAAGd,KAAK,CAACe,cAAN,CAAqBJ,GAArB,CAAX;AACA,UAAIP,UAAU,GAAGX,SAAS,CAACmB,SAAS,CAACI,UAAV,CAAqB,QAArB,EAA+B,IAA/B,CAAD,CAA1B;AACA,UAAIV,UAAU,GAAGb,SAAS,CAACmB,SAAS,CAACI,UAAV,CAAqB,YAArB,EAAmC,IAAnC,CAAD,CAA1B,CAJ2B,CAI2C;;AAEtE,UAAIC,KAAK,GAAGL,SAAS,CAACJ,QAAV,CAAmB,WAAnB,EAAgCC,YAAhC,EAAZ;AACA,UAAIS,WAAW,GAAGhB,QAAQ,CAACiB,sBAAT,CAAgCR,GAAhC,EAAqC,OAArC,CAAlB;AACAnB,MAAAA,MAAM,CAAC0B,WAAD,EAAcD,KAAd,CAAN;;AAEA,cAAQC,WAAW,CAACE,MAApB;AACE,aAAK,QAAL;AACE;AACE,gBAAIC,SAAS,GAAGP,IAAI,CAACQ,KAAL,CAAWC,SAAX,CAAqB,OAArB,CAAhB;AACAL,YAAAA,WAAW,CAACE,MAAZ,GAAqBC,SAAS,IAAIA,SAAS,CAACG,IAA5C;AACA;AACD;;AAEH,aAAK,QAAL;AACE;AACE,gBAAIH,SAAS,GAAGP,IAAI,CAACW,KAAL,CAAWF,SAAX,CAAqB,OAArB,CAAhB;AACAL,YAAAA,WAAW,CAACE,MAAZ,GAAqBC,SAAS,IAAIA,SAAS,CAACG,IAA5C;AACA;AACD;AAbL;;AAgBApB,MAAAA,UAAU,CAAC,CAAD,CAAV,IAAiBU,IAAI,CAACP,SAAL,CAAe,YAAf,EAA6BH,UAAU,CAAC,CAAD,CAAvC,CAAjB;AACAA,MAAAA,UAAU,CAAC,CAAD,CAAV,IAAiBU,IAAI,CAACP,SAAL,CAAe,UAAf,EAA2BH,UAAU,CAAC,CAAD,CAArC,CAAjB;AACAE,MAAAA,UAAU,CAAC,CAAD,CAAV,IAAiBQ,IAAI,CAACP,SAAL,CAAe,gBAAf,EAAiCD,UAAU,CAAC,CAAD,CAA3C,CAAjB;AACAA,MAAAA,UAAU,CAAC,CAAD,CAAV,IAAiBQ,IAAI,CAACP,SAAL,CAAe,cAAf,EAA+BD,UAAU,CAAC,CAAD,CAAzC,CAAjB;AACD,KA9BD;AA+BD,GA3CD;AA4CD","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { extend } from 'zrender/lib/core/util';\n\nfunction normalize(a) {\n  if (!(a instanceof Array)) {\n    a = [a, a];\n  }\n\n  return a;\n}\n\nexport default function graphEdgeVisual(ecModel) {\n  ecModel.eachSeriesByType('graph', function (seriesModel) {\n    var graph = seriesModel.getGraph();\n    var edgeData = seriesModel.getEdgeData();\n    var symbolType = normalize(seriesModel.get('edgeSymbol'));\n    var symbolSize = normalize(seriesModel.get('edgeSymbolSize')); // const colorQuery = ['lineStyle', 'color'] as const;\n    // const opacityQuery = ['lineStyle', 'opacity'] as const;\n\n    edgeData.setVisual('fromSymbol', symbolType && symbolType[0]);\n    edgeData.setVisual('toSymbol', symbolType && symbolType[1]);\n    edgeData.setVisual('fromSymbolSize', symbolSize && symbolSize[0]);\n    edgeData.setVisual('toSymbolSize', symbolSize && symbolSize[1]);\n    edgeData.setVisual('style', seriesModel.getModel('lineStyle').getLineStyle());\n    edgeData.each(function (idx) {\n      var itemModel = edgeData.getItemModel(idx);\n      var edge = graph.getEdgeByIndex(idx);\n      var symbolType = normalize(itemModel.getShallow('symbol', true));\n      var symbolSize = normalize(itemModel.getShallow('symbolSize', true)); // Edge visual must after node visual\n\n      var style = itemModel.getModel('lineStyle').getLineStyle();\n      var existsStyle = edgeData.ensureUniqueItemVisual(idx, 'style');\n      extend(existsStyle, style);\n\n      switch (existsStyle.stroke) {\n        case 'source':\n          {\n            var nodeStyle = edge.node1.getVisual('style');\n            existsStyle.stroke = nodeStyle && nodeStyle.fill;\n            break;\n          }\n\n        case 'target':\n          {\n            var nodeStyle = edge.node2.getVisual('style');\n            existsStyle.stroke = nodeStyle && nodeStyle.fill;\n            break;\n          }\n      }\n\n      symbolType[0] && edge.setVisual('fromSymbol', symbolType[0]);\n      symbolType[1] && edge.setVisual('toSymbol', symbolType[1]);\n      symbolSize[0] && edge.setVisual('fromSymbolSize', symbolSize[0]);\n      symbolSize[1] && edge.setVisual('toSymbolSize', symbolSize[1]);\n    });\n  });\n}"]},"metadata":{},"sourceType":"module"}