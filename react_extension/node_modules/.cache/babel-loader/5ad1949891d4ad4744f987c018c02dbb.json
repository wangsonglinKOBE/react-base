{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport SymbolDraw from '../helper/SymbolDraw';\nimport EffectSymbol from '../helper/EffectSymbol';\nimport * as matrix from 'zrender/lib/core/matrix';\nimport pointsLayout from '../../layout/points';\nimport ChartView from '../../view/Chart';\n\nvar EffectScatterView =\n/** @class */\nfunction (_super) {\n  __extends(EffectScatterView, _super);\n\n  function EffectScatterView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = EffectScatterView.type;\n    return _this;\n  }\n\n  EffectScatterView.prototype.init = function () {\n    this._symbolDraw = new SymbolDraw(EffectSymbol);\n  };\n\n  EffectScatterView.prototype.render = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var effectSymbolDraw = this._symbolDraw;\n    effectSymbolDraw.updateData(data, {\n      clipShape: this._getClipShape(seriesModel)\n    });\n    this.group.add(effectSymbolDraw.group);\n  };\n\n  EffectScatterView.prototype._getClipShape = function (seriesModel) {\n    var coordSys = seriesModel.coordinateSystem;\n    var clipArea = coordSys && coordSys.getArea && coordSys.getArea();\n    return seriesModel.get('clip', true) ? clipArea : null;\n  };\n\n  EffectScatterView.prototype.updateTransform = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    this.group.dirty();\n    var res = pointsLayout('').reset(seriesModel, ecModel, api);\n\n    if (res.progress) {\n      res.progress({\n        start: 0,\n        end: data.count(),\n        count: data.count()\n      }, data);\n    }\n\n    this._symbolDraw.updateLayout();\n  };\n\n  EffectScatterView.prototype._updateGroupTransform = function (seriesModel) {\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.getRoamTransform) {\n      this.group.transform = matrix.clone(coordSys.getRoamTransform());\n      this.group.decomposeTransform();\n    }\n  };\n\n  EffectScatterView.prototype.remove = function (ecModel, api) {\n    this._symbolDraw && this._symbolDraw.remove(true);\n  };\n\n  EffectScatterView.type = 'effectScatter';\n  return EffectScatterView;\n}(ChartView);\n\nexport default EffectScatterView;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/chart/effectScatter/EffectScatterView.js"],"names":["__extends","SymbolDraw","EffectSymbol","matrix","pointsLayout","ChartView","EffectScatterView","_super","_this","apply","arguments","type","prototype","init","_symbolDraw","render","seriesModel","ecModel","api","data","getData","effectSymbolDraw","updateData","clipShape","_getClipShape","group","add","coordSys","coordinateSystem","clipArea","getArea","get","updateTransform","dirty","res","reset","progress","start","end","count","updateLayout","_updateGroupTransform","getRoamTransform","transform","clone","decomposeTransform","remove"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,UAAP,MAAuB,sBAAvB;AACA,OAAOC,YAAP,MAAyB,wBAAzB;AACA,OAAO,KAAKC,MAAZ,MAAwB,yBAAxB;AACA,OAAOC,YAAP,MAAyB,qBAAzB;AACA,OAAOC,SAAP,MAAsB,kBAAtB;;AAEA,IAAIC,iBAAiB;AACrB;AACA,UAAUC,MAAV,EAAkB;AAChBP,EAAAA,SAAS,CAACM,iBAAD,EAAoBC,MAApB,CAAT;;AAEA,WAASD,iBAAT,GAA6B;AAC3B,QAAIE,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAAhE;;AAEAF,IAAAA,KAAK,CAACG,IAAN,GAAaL,iBAAiB,CAACK,IAA/B;AACA,WAAOH,KAAP;AACD;;AAEDF,EAAAA,iBAAiB,CAACM,SAAlB,CAA4BC,IAA5B,GAAmC,YAAY;AAC7C,SAAKC,WAAL,GAAmB,IAAIb,UAAJ,CAAeC,YAAf,CAAnB;AACD,GAFD;;AAIAI,EAAAA,iBAAiB,CAACM,SAAlB,CAA4BG,MAA5B,GAAqC,UAAUC,WAAV,EAAuBC,OAAvB,EAAgCC,GAAhC,EAAqC;AACxE,QAAIC,IAAI,GAAGH,WAAW,CAACI,OAAZ,EAAX;AACA,QAAIC,gBAAgB,GAAG,KAAKP,WAA5B;AACAO,IAAAA,gBAAgB,CAACC,UAAjB,CAA4BH,IAA5B,EAAkC;AAChCI,MAAAA,SAAS,EAAE,KAAKC,aAAL,CAAmBR,WAAnB;AADqB,KAAlC;AAGA,SAAKS,KAAL,CAAWC,GAAX,CAAeL,gBAAgB,CAACI,KAAhC;AACD,GAPD;;AASAnB,EAAAA,iBAAiB,CAACM,SAAlB,CAA4BY,aAA5B,GAA4C,UAAUR,WAAV,EAAuB;AACjE,QAAIW,QAAQ,GAAGX,WAAW,CAACY,gBAA3B;AACA,QAAIC,QAAQ,GAAGF,QAAQ,IAAIA,QAAQ,CAACG,OAArB,IAAgCH,QAAQ,CAACG,OAAT,EAA/C;AACA,WAAOd,WAAW,CAACe,GAAZ,CAAgB,MAAhB,EAAwB,IAAxB,IAAgCF,QAAhC,GAA2C,IAAlD;AACD,GAJD;;AAMAvB,EAAAA,iBAAiB,CAACM,SAAlB,CAA4BoB,eAA5B,GAA8C,UAAUhB,WAAV,EAAuBC,OAAvB,EAAgCC,GAAhC,EAAqC;AACjF,QAAIC,IAAI,GAAGH,WAAW,CAACI,OAAZ,EAAX;AACA,SAAKK,KAAL,CAAWQ,KAAX;AACA,QAAIC,GAAG,GAAG9B,YAAY,CAAC,EAAD,CAAZ,CAAiB+B,KAAjB,CAAuBnB,WAAvB,EAAoCC,OAApC,EAA6CC,GAA7C,CAAV;;AAEA,QAAIgB,GAAG,CAACE,QAAR,EAAkB;AAChBF,MAAAA,GAAG,CAACE,QAAJ,CAAa;AACXC,QAAAA,KAAK,EAAE,CADI;AAEXC,QAAAA,GAAG,EAAEnB,IAAI,CAACoB,KAAL,EAFM;AAGXA,QAAAA,KAAK,EAAEpB,IAAI,CAACoB,KAAL;AAHI,OAAb,EAIGpB,IAJH;AAKD;;AAED,SAAKL,WAAL,CAAiB0B,YAAjB;AACD,GAdD;;AAgBAlC,EAAAA,iBAAiB,CAACM,SAAlB,CAA4B6B,qBAA5B,GAAoD,UAAUzB,WAAV,EAAuB;AACzE,QAAIW,QAAQ,GAAGX,WAAW,CAACY,gBAA3B;;AAEA,QAAID,QAAQ,IAAIA,QAAQ,CAACe,gBAAzB,EAA2C;AACzC,WAAKjB,KAAL,CAAWkB,SAAX,GAAuBxC,MAAM,CAACyC,KAAP,CAAajB,QAAQ,CAACe,gBAAT,EAAb,CAAvB;AACA,WAAKjB,KAAL,CAAWoB,kBAAX;AACD;AACF,GAPD;;AASAvC,EAAAA,iBAAiB,CAACM,SAAlB,CAA4BkC,MAA5B,GAAqC,UAAU7B,OAAV,EAAmBC,GAAnB,EAAwB;AAC3D,SAAKJ,WAAL,IAAoB,KAAKA,WAAL,CAAiBgC,MAAjB,CAAwB,IAAxB,CAApB;AACD,GAFD;;AAIAxC,EAAAA,iBAAiB,CAACK,IAAlB,GAAyB,eAAzB;AACA,SAAOL,iBAAP;AACD,CA5DD,CA4DED,SA5DF,CAFA;;AAgEA,eAAeC,iBAAf","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport SymbolDraw from '../helper/SymbolDraw';\nimport EffectSymbol from '../helper/EffectSymbol';\nimport * as matrix from 'zrender/lib/core/matrix';\nimport pointsLayout from '../../layout/points';\nimport ChartView from '../../view/Chart';\n\nvar EffectScatterView =\n/** @class */\nfunction (_super) {\n  __extends(EffectScatterView, _super);\n\n  function EffectScatterView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = EffectScatterView.type;\n    return _this;\n  }\n\n  EffectScatterView.prototype.init = function () {\n    this._symbolDraw = new SymbolDraw(EffectSymbol);\n  };\n\n  EffectScatterView.prototype.render = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    var effectSymbolDraw = this._symbolDraw;\n    effectSymbolDraw.updateData(data, {\n      clipShape: this._getClipShape(seriesModel)\n    });\n    this.group.add(effectSymbolDraw.group);\n  };\n\n  EffectScatterView.prototype._getClipShape = function (seriesModel) {\n    var coordSys = seriesModel.coordinateSystem;\n    var clipArea = coordSys && coordSys.getArea && coordSys.getArea();\n    return seriesModel.get('clip', true) ? clipArea : null;\n  };\n\n  EffectScatterView.prototype.updateTransform = function (seriesModel, ecModel, api) {\n    var data = seriesModel.getData();\n    this.group.dirty();\n    var res = pointsLayout('').reset(seriesModel, ecModel, api);\n\n    if (res.progress) {\n      res.progress({\n        start: 0,\n        end: data.count(),\n        count: data.count()\n      }, data);\n    }\n\n    this._symbolDraw.updateLayout();\n  };\n\n  EffectScatterView.prototype._updateGroupTransform = function (seriesModel) {\n    var coordSys = seriesModel.coordinateSystem;\n\n    if (coordSys && coordSys.getRoamTransform) {\n      this.group.transform = matrix.clone(coordSys.getRoamTransform());\n      this.group.decomposeTransform();\n    }\n  };\n\n  EffectScatterView.prototype.remove = function (ecModel, api) {\n    this._symbolDraw && this._symbolDraw.remove(true);\n  };\n\n  EffectScatterView.type = 'effectScatter';\n  return EffectScatterView;\n}(ChartView);\n\nexport default EffectScatterView;"]},"metadata":{},"sourceType":"module"}