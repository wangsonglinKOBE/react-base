{"ast":null,"code":"import * as eventUtil from './event';\n\nvar GestureMgr = function () {\n  function GestureMgr() {\n    this._track = [];\n  }\n\n  GestureMgr.prototype.recognize = function (event, target, root) {\n    this._doTrack(event, target, root);\n\n    return this._recognize(event);\n  };\n\n  GestureMgr.prototype.clear = function () {\n    this._track.length = 0;\n    return this;\n  };\n\n  GestureMgr.prototype._doTrack = function (event, target, root) {\n    var touches = event.touches;\n\n    if (!touches) {\n      return;\n    }\n\n    var trackItem = {\n      points: [],\n      touches: [],\n      target: target,\n      event: event\n    };\n\n    for (var i = 0, len = touches.length; i < len; i++) {\n      var touch = touches[i];\n      var pos = eventUtil.clientToLocal(root, touch, {});\n      trackItem.points.push([pos.zrX, pos.zrY]);\n      trackItem.touches.push(touch);\n    }\n\n    this._track.push(trackItem);\n  };\n\n  GestureMgr.prototype._recognize = function (event) {\n    for (var eventName in recognizers) {\n      if (recognizers.hasOwnProperty(eventName)) {\n        var gestureInfo = recognizers[eventName](this._track, event);\n\n        if (gestureInfo) {\n          return gestureInfo;\n        }\n      }\n    }\n  };\n\n  return GestureMgr;\n}();\n\nexport { GestureMgr };\n\nfunction dist(pointPair) {\n  var dx = pointPair[1][0] - pointPair[0][0];\n  var dy = pointPair[1][1] - pointPair[0][1];\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nfunction center(pointPair) {\n  return [(pointPair[0][0] + pointPair[1][0]) / 2, (pointPair[0][1] + pointPair[1][1]) / 2];\n}\n\nvar recognizers = {\n  pinch: function (tracks, event) {\n    var trackLen = tracks.length;\n\n    if (!trackLen) {\n      return;\n    }\n\n    var pinchEnd = (tracks[trackLen - 1] || {}).points;\n    var pinchPre = (tracks[trackLen - 2] || {}).points || pinchEnd;\n\n    if (pinchPre && pinchPre.length > 1 && pinchEnd && pinchEnd.length > 1) {\n      var pinchScale = dist(pinchEnd) / dist(pinchPre);\n      !isFinite(pinchScale) && (pinchScale = 1);\n      event.pinchScale = pinchScale;\n      var pinchCenter = center(pinchEnd);\n      event.pinchX = pinchCenter[0];\n      event.pinchY = pinchCenter[1];\n      return {\n        type: 'pinch',\n        target: tracks[0].target,\n        event: event\n      };\n    }\n  }\n};","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/zrender/lib/core/GestureMgr.js"],"names":["eventUtil","GestureMgr","_track","prototype","recognize","event","target","root","_doTrack","_recognize","clear","length","touches","trackItem","points","i","len","touch","pos","clientToLocal","push","zrX","zrY","eventName","recognizers","hasOwnProperty","gestureInfo","dist","pointPair","dx","dy","Math","sqrt","center","pinch","tracks","trackLen","pinchEnd","pinchPre","pinchScale","isFinite","pinchCenter","pinchX","pinchY","type"],"mappings":"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","sourcesContent":["import * as eventUtil from './event';\nvar GestureMgr = (function () {\n    function GestureMgr() {\n        this._track = [];\n    }\n    GestureMgr.prototype.recognize = function (event, target, root) {\n        this._doTrack(event, target, root);\n        return this._recognize(event);\n    };\n    GestureMgr.prototype.clear = function () {\n        this._track.length = 0;\n        return this;\n    };\n    GestureMgr.prototype._doTrack = function (event, target, root) {\n        var touches = event.touches;\n        if (!touches) {\n            return;\n        }\n        var trackItem = {\n            points: [],\n            touches: [],\n            target: target,\n            event: event\n        };\n        for (var i = 0, len = touches.length; i < len; i++) {\n            var touch = touches[i];\n            var pos = eventUtil.clientToLocal(root, touch, {});\n            trackItem.points.push([pos.zrX, pos.zrY]);\n            trackItem.touches.push(touch);\n        }\n        this._track.push(trackItem);\n    };\n    GestureMgr.prototype._recognize = function (event) {\n        for (var eventName in recognizers) {\n            if (recognizers.hasOwnProperty(eventName)) {\n                var gestureInfo = recognizers[eventName](this._track, event);\n                if (gestureInfo) {\n                    return gestureInfo;\n                }\n            }\n        }\n    };\n    return GestureMgr;\n}());\nexport { GestureMgr };\nfunction dist(pointPair) {\n    var dx = pointPair[1][0] - pointPair[0][0];\n    var dy = pointPair[1][1] - pointPair[0][1];\n    return Math.sqrt(dx * dx + dy * dy);\n}\nfunction center(pointPair) {\n    return [\n        (pointPair[0][0] + pointPair[1][0]) / 2,\n        (pointPair[0][1] + pointPair[1][1]) / 2\n    ];\n}\nvar recognizers = {\n    pinch: function (tracks, event) {\n        var trackLen = tracks.length;\n        if (!trackLen) {\n            return;\n        }\n        var pinchEnd = (tracks[trackLen - 1] || {}).points;\n        var pinchPre = (tracks[trackLen - 2] || {}).points || pinchEnd;\n        if (pinchPre\n            && pinchPre.length > 1\n            && pinchEnd\n            && pinchEnd.length > 1) {\n            var pinchScale = dist(pinchEnd) / dist(pinchPre);\n            !isFinite(pinchScale) && (pinchScale = 1);\n            event.pinchScale = pinchScale;\n            var pinchCenter = center(pinchEnd);\n            event.pinchX = pinchCenter[0];\n            event.pinchY = pinchCenter[1];\n            return {\n                type: 'pinch',\n                target: tracks[0].target,\n                event: event\n            };\n        }\n    }\n};\n"]},"metadata":{},"sourceType":"module"}