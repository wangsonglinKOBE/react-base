{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { createHashMap, each } from 'zrender/lib/core/util';\nimport { addSafe } from '../util/number'; // (1) [Caution]: the logic is correct based on the premises:\n//     data processing stage is blocked in stream.\n//     See <module:echarts/stream/Scheduler#performDataProcessorTasks>\n// (2) Only register once when import repeatly.\n//     Should be executed after series filtered and before stack calculation.\n\nexport default function dataStack(ecModel) {\n  var stackInfoMap = createHashMap();\n  ecModel.eachSeries(function (seriesModel) {\n    var stack = seriesModel.get('stack'); // Compatibal: when `stack` is set as '', do not stack.\n\n    if (stack) {\n      var stackInfoList = stackInfoMap.get(stack) || stackInfoMap.set(stack, []);\n      var data = seriesModel.getData();\n      var stackInfo = {\n        // Used for calculate axis extent automatically.\n        // TODO: Type getCalculationInfo return more specific type?\n        stackResultDimension: data.getCalculationInfo('stackResultDimension'),\n        stackedOverDimension: data.getCalculationInfo('stackedOverDimension'),\n        stackedDimension: data.getCalculationInfo('stackedDimension'),\n        stackedByDimension: data.getCalculationInfo('stackedByDimension'),\n        isStackedByIndex: data.getCalculationInfo('isStackedByIndex'),\n        data: data,\n        seriesModel: seriesModel\n      }; // If stacked on axis that do not support data stack.\n\n      if (!stackInfo.stackedDimension || !(stackInfo.isStackedByIndex || stackInfo.stackedByDimension)) {\n        return;\n      }\n\n      stackInfoList.length && data.setCalculationInfo('stackedOnSeries', stackInfoList[stackInfoList.length - 1].seriesModel);\n      stackInfoList.push(stackInfo);\n    }\n  });\n  stackInfoMap.each(calculateStack);\n}\n\nfunction calculateStack(stackInfoList) {\n  each(stackInfoList, function (targetStackInfo, idxInStack) {\n    var resultVal = [];\n    var resultNaN = [NaN, NaN];\n    var dims = [targetStackInfo.stackResultDimension, targetStackInfo.stackedOverDimension];\n    var targetData = targetStackInfo.data;\n    var isStackedByIndex = targetStackInfo.isStackedByIndex; // Should not write on raw data, because stack series model list changes\n    // depending on legend selection.\n\n    targetData.modify(dims, function (v0, v1, dataIndex) {\n      var sum = targetData.get(targetStackInfo.stackedDimension, dataIndex); // Consider `connectNulls` of line area, if value is NaN, stackedOver\n      // should also be NaN, to draw a appropriate belt area.\n\n      if (isNaN(sum)) {\n        return resultNaN;\n      }\n\n      var byValue;\n      var stackedDataRawIndex;\n\n      if (isStackedByIndex) {\n        stackedDataRawIndex = targetData.getRawIndex(dataIndex);\n      } else {\n        byValue = targetData.get(targetStackInfo.stackedByDimension, dataIndex);\n      } // If stackOver is NaN, chart view will render point on value start.\n\n\n      var stackedOver = NaN;\n\n      for (var j = idxInStack - 1; j >= 0; j--) {\n        var stackInfo = stackInfoList[j]; // Has been optimized by inverted indices on `stackedByDimension`.\n\n        if (!isStackedByIndex) {\n          stackedDataRawIndex = stackInfo.data.rawIndexOf(stackInfo.stackedByDimension, byValue);\n        }\n\n        if (stackedDataRawIndex >= 0) {\n          var val = stackInfo.data.getByRawIndex(stackInfo.stackResultDimension, stackedDataRawIndex); // Considering positive stack, negative stack and empty data\n\n          if (sum >= 0 && val > 0 || // Positive stack\n          sum <= 0 && val < 0 // Negative stack\n          ) {\n            // The sum should be as less as possible to be effected\n            // by floating arithmetic problem. A wrong result probably\n            // filtered incorrectly by axis min/max.\n            sum = addSafe(sum, val);\n            stackedOver = val;\n            break;\n          }\n        }\n      }\n\n      resultVal[0] = sum;\n      resultVal[1] = stackedOver;\n      return resultVal;\n    });\n  });\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/processor/dataStack.js"],"names":["createHashMap","each","addSafe","dataStack","ecModel","stackInfoMap","eachSeries","seriesModel","stack","get","stackInfoList","set","data","getData","stackInfo","stackResultDimension","getCalculationInfo","stackedOverDimension","stackedDimension","stackedByDimension","isStackedByIndex","length","setCalculationInfo","push","calculateStack","targetStackInfo","idxInStack","resultVal","resultNaN","NaN","dims","targetData","modify","v0","v1","dataIndex","sum","isNaN","byValue","stackedDataRawIndex","getRawIndex","stackedOver","j","rawIndexOf","val","getByRawIndex"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { createHashMap, each } from 'zrender/lib/core/util';\nimport { addSafe } from '../util/number'; // (1) [Caution]: the logic is correct based on the premises:\n//     data processing stage is blocked in stream.\n//     See <module:echarts/stream/Scheduler#performDataProcessorTasks>\n// (2) Only register once when import repeatly.\n//     Should be executed after series filtered and before stack calculation.\n\nexport default function dataStack(ecModel) {\n  var stackInfoMap = createHashMap();\n  ecModel.eachSeries(function (seriesModel) {\n    var stack = seriesModel.get('stack'); // Compatibal: when `stack` is set as '', do not stack.\n\n    if (stack) {\n      var stackInfoList = stackInfoMap.get(stack) || stackInfoMap.set(stack, []);\n      var data = seriesModel.getData();\n      var stackInfo = {\n        // Used for calculate axis extent automatically.\n        // TODO: Type getCalculationInfo return more specific type?\n        stackResultDimension: data.getCalculationInfo('stackResultDimension'),\n        stackedOverDimension: data.getCalculationInfo('stackedOverDimension'),\n        stackedDimension: data.getCalculationInfo('stackedDimension'),\n        stackedByDimension: data.getCalculationInfo('stackedByDimension'),\n        isStackedByIndex: data.getCalculationInfo('isStackedByIndex'),\n        data: data,\n        seriesModel: seriesModel\n      }; // If stacked on axis that do not support data stack.\n\n      if (!stackInfo.stackedDimension || !(stackInfo.isStackedByIndex || stackInfo.stackedByDimension)) {\n        return;\n      }\n\n      stackInfoList.length && data.setCalculationInfo('stackedOnSeries', stackInfoList[stackInfoList.length - 1].seriesModel);\n      stackInfoList.push(stackInfo);\n    }\n  });\n  stackInfoMap.each(calculateStack);\n}\n\nfunction calculateStack(stackInfoList) {\n  each(stackInfoList, function (targetStackInfo, idxInStack) {\n    var resultVal = [];\n    var resultNaN = [NaN, NaN];\n    var dims = [targetStackInfo.stackResultDimension, targetStackInfo.stackedOverDimension];\n    var targetData = targetStackInfo.data;\n    var isStackedByIndex = targetStackInfo.isStackedByIndex; // Should not write on raw data, because stack series model list changes\n    // depending on legend selection.\n\n    targetData.modify(dims, function (v0, v1, dataIndex) {\n      var sum = targetData.get(targetStackInfo.stackedDimension, dataIndex); // Consider `connectNulls` of line area, if value is NaN, stackedOver\n      // should also be NaN, to draw a appropriate belt area.\n\n      if (isNaN(sum)) {\n        return resultNaN;\n      }\n\n      var byValue;\n      var stackedDataRawIndex;\n\n      if (isStackedByIndex) {\n        stackedDataRawIndex = targetData.getRawIndex(dataIndex);\n      } else {\n        byValue = targetData.get(targetStackInfo.stackedByDimension, dataIndex);\n      } // If stackOver is NaN, chart view will render point on value start.\n\n\n      var stackedOver = NaN;\n\n      for (var j = idxInStack - 1; j >= 0; j--) {\n        var stackInfo = stackInfoList[j]; // Has been optimized by inverted indices on `stackedByDimension`.\n\n        if (!isStackedByIndex) {\n          stackedDataRawIndex = stackInfo.data.rawIndexOf(stackInfo.stackedByDimension, byValue);\n        }\n\n        if (stackedDataRawIndex >= 0) {\n          var val = stackInfo.data.getByRawIndex(stackInfo.stackResultDimension, stackedDataRawIndex); // Considering positive stack, negative stack and empty data\n\n          if (sum >= 0 && val > 0 || // Positive stack\n          sum <= 0 && val < 0 // Negative stack\n          ) {\n              // The sum should be as less as possible to be effected\n              // by floating arithmetic problem. A wrong result probably\n              // filtered incorrectly by axis min/max.\n              sum = addSafe(sum, val);\n              stackedOver = val;\n              break;\n            }\n        }\n      }\n\n      resultVal[0] = sum;\n      resultVal[1] = stackedOver;\n      return resultVal;\n    });\n  });\n}"]},"metadata":{},"sourceType":"module"}