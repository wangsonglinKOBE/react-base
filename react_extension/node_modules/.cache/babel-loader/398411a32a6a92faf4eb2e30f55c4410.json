{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport { each, bind } from 'zrender/lib/core/util';\nimport SeriesModel from '../../model/Series';\nimport createSeriesData from '../helper/createSeriesData';\n\nvar ParallelSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(ParallelSeriesModel, _super);\n\n  function ParallelSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = ParallelSeriesModel.type;\n    _this.visualStyleAccessPath = 'lineStyle';\n    _this.visualDrawType = 'stroke';\n    return _this;\n  }\n\n  ParallelSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    return createSeriesData(null, this, {\n      useEncodeDefaulter: bind(makeDefaultEncode, null, this)\n    });\n  };\n  /**\n   * User can get data raw indices on 'axisAreaSelected' event received.\n   *\n   * @return Raw indices\n   */\n\n\n  ParallelSeriesModel.prototype.getRawIndicesByActiveState = function (activeState) {\n    var coordSys = this.coordinateSystem;\n    var data = this.getData();\n    var indices = [];\n    coordSys.eachActiveState(data, function (theActiveState, dataIndex) {\n      if (activeState === theActiveState) {\n        indices.push(data.getRawIndex(dataIndex));\n      }\n    });\n    return indices;\n  };\n\n  ParallelSeriesModel.type = 'series.parallel';\n  ParallelSeriesModel.dependencies = ['parallel'];\n  ParallelSeriesModel.defaultOption = {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'parallel',\n    parallelIndex: 0,\n    label: {\n      show: false\n    },\n    inactiveOpacity: 0.05,\n    activeOpacity: 1,\n    lineStyle: {\n      width: 1,\n      opacity: 0.45,\n      type: 'solid'\n    },\n    emphasis: {\n      label: {\n        show: false\n      }\n    },\n    progressive: 500,\n    smooth: false,\n    animationEasing: 'linear'\n  };\n  return ParallelSeriesModel;\n}(SeriesModel);\n\nfunction makeDefaultEncode(seriesModel) {\n  // The mapping of parallelAxis dimension to data dimension can\n  // be specified in parallelAxis.option.dim. For example, if\n  // parallelAxis.option.dim is 'dim3', it mapping to the third\n  // dimension of data. But `data.encode` has higher priority.\n  // Moreover, parallelModel.dimension should not be regarded as data\n  // dimensions. Consider dimensions = ['dim4', 'dim2', 'dim6'];\n  var parallelModel = seriesModel.ecModel.getComponent('parallel', seriesModel.get('parallelIndex'));\n\n  if (!parallelModel) {\n    return;\n  }\n\n  var encodeDefine = {};\n  each(parallelModel.dimensions, function (axisDim) {\n    var dataDimIndex = convertDimNameToNumber(axisDim);\n    encodeDefine[axisDim] = dataDimIndex;\n  });\n  return encodeDefine;\n}\n\nfunction convertDimNameToNumber(dimName) {\n  return +dimName.replace('dim', '');\n}\n\nexport default ParallelSeriesModel;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/chart/parallel/ParallelSeries.js"],"names":["__extends","each","bind","SeriesModel","createSeriesData","ParallelSeriesModel","_super","_this","apply","arguments","type","visualStyleAccessPath","visualDrawType","prototype","getInitialData","option","ecModel","useEncodeDefaulter","makeDefaultEncode","getRawIndicesByActiveState","activeState","coordSys","coordinateSystem","data","getData","indices","eachActiveState","theActiveState","dataIndex","push","getRawIndex","dependencies","defaultOption","zlevel","z","parallelIndex","label","show","inactiveOpacity","activeOpacity","lineStyle","width","opacity","emphasis","progressive","smooth","animationEasing","seriesModel","parallelModel","getComponent","get","encodeDefine","dimensions","axisDim","dataDimIndex","convertDimNameToNumber","dimName","replace"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport { each, bind } from 'zrender/lib/core/util';\nimport SeriesModel from '../../model/Series';\nimport createSeriesData from '../helper/createSeriesData';\n\nvar ParallelSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(ParallelSeriesModel, _super);\n\n  function ParallelSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = ParallelSeriesModel.type;\n    _this.visualStyleAccessPath = 'lineStyle';\n    _this.visualDrawType = 'stroke';\n    return _this;\n  }\n\n  ParallelSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    return createSeriesData(null, this, {\n      useEncodeDefaulter: bind(makeDefaultEncode, null, this)\n    });\n  };\n  /**\n   * User can get data raw indices on 'axisAreaSelected' event received.\n   *\n   * @return Raw indices\n   */\n\n\n  ParallelSeriesModel.prototype.getRawIndicesByActiveState = function (activeState) {\n    var coordSys = this.coordinateSystem;\n    var data = this.getData();\n    var indices = [];\n    coordSys.eachActiveState(data, function (theActiveState, dataIndex) {\n      if (activeState === theActiveState) {\n        indices.push(data.getRawIndex(dataIndex));\n      }\n    });\n    return indices;\n  };\n\n  ParallelSeriesModel.type = 'series.parallel';\n  ParallelSeriesModel.dependencies = ['parallel'];\n  ParallelSeriesModel.defaultOption = {\n    zlevel: 0,\n    z: 2,\n    coordinateSystem: 'parallel',\n    parallelIndex: 0,\n    label: {\n      show: false\n    },\n    inactiveOpacity: 0.05,\n    activeOpacity: 1,\n    lineStyle: {\n      width: 1,\n      opacity: 0.45,\n      type: 'solid'\n    },\n    emphasis: {\n      label: {\n        show: false\n      }\n    },\n    progressive: 500,\n    smooth: false,\n    animationEasing: 'linear'\n  };\n  return ParallelSeriesModel;\n}(SeriesModel);\n\nfunction makeDefaultEncode(seriesModel) {\n  // The mapping of parallelAxis dimension to data dimension can\n  // be specified in parallelAxis.option.dim. For example, if\n  // parallelAxis.option.dim is 'dim3', it mapping to the third\n  // dimension of data. But `data.encode` has higher priority.\n  // Moreover, parallelModel.dimension should not be regarded as data\n  // dimensions. Consider dimensions = ['dim4', 'dim2', 'dim6'];\n  var parallelModel = seriesModel.ecModel.getComponent('parallel', seriesModel.get('parallelIndex'));\n\n  if (!parallelModel) {\n    return;\n  }\n\n  var encodeDefine = {};\n  each(parallelModel.dimensions, function (axisDim) {\n    var dataDimIndex = convertDimNameToNumber(axisDim);\n    encodeDefine[axisDim] = dataDimIndex;\n  });\n  return encodeDefine;\n}\n\nfunction convertDimNameToNumber(dimName) {\n  return +dimName.replace('dim', '');\n}\n\nexport default ParallelSeriesModel;"]},"metadata":{},"sourceType":"module"}