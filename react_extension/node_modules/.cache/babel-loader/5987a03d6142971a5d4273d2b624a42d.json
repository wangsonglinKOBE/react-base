{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { isTypedArray, clone, createHashMap, isArray, isObject, isArrayLike, hasOwn, assert, each, map, isNumber, isString } from 'zrender/lib/core/util';\nimport { SOURCE_FORMAT_ORIGINAL, SERIES_LAYOUT_BY_COLUMN, SOURCE_FORMAT_UNKNOWN, SOURCE_FORMAT_KEYED_COLUMNS, SOURCE_FORMAT_TYPED_ARRAY, SOURCE_FORMAT_ARRAY_ROWS, SOURCE_FORMAT_OBJECT_ROWS, SERIES_LAYOUT_BY_ROW } from '../util/types';\nimport { getDataItemValue } from '../util/model';\nimport { BE_ORDINAL, guessOrdinal } from './helper/sourceHelper';\n; // @inner\n\nvar SourceImpl =\n/** @class */\nfunction () {\n  function SourceImpl(fields) {\n    this.data = fields.data || (fields.sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS ? {} : []);\n    this.sourceFormat = fields.sourceFormat || SOURCE_FORMAT_UNKNOWN; // Visit config\n\n    this.seriesLayoutBy = fields.seriesLayoutBy || SERIES_LAYOUT_BY_COLUMN;\n    this.startIndex = fields.startIndex || 0;\n    this.dimensionsDetectedCount = fields.dimensionsDetectedCount;\n    this.metaRawOption = fields.metaRawOption;\n    var dimensionsDefine = this.dimensionsDefine = fields.dimensionsDefine;\n\n    if (dimensionsDefine) {\n      for (var i = 0; i < dimensionsDefine.length; i++) {\n        var dim = dimensionsDefine[i];\n\n        if (dim.type == null) {\n          if (guessOrdinal(this, i) === BE_ORDINAL.Must) {\n            dim.type = 'ordinal';\n          }\n        }\n      }\n    }\n  }\n\n  return SourceImpl;\n}();\n\nexport function isSourceInstance(val) {\n  return val instanceof SourceImpl;\n}\n/**\n * Create a source from option.\n * NOTE: Created source is immutable. Don't change any properties in it.\n */\n\nexport function createSource(sourceData, thisMetaRawOption, // can be null. If not provided, auto detect it from `sourceData`.\nsourceFormat) {\n  sourceFormat = sourceFormat || detectSourceFormat(sourceData);\n  var seriesLayoutBy = thisMetaRawOption.seriesLayoutBy;\n  var determined = determineSourceDimensions(sourceData, sourceFormat, seriesLayoutBy, thisMetaRawOption.sourceHeader, thisMetaRawOption.dimensions);\n  var source = new SourceImpl({\n    data: sourceData,\n    sourceFormat: sourceFormat,\n    seriesLayoutBy: seriesLayoutBy,\n    dimensionsDefine: determined.dimensionsDefine,\n    startIndex: determined.startIndex,\n    dimensionsDetectedCount: determined.dimensionsDetectedCount,\n    metaRawOption: clone(thisMetaRawOption)\n  });\n  return source;\n}\n/**\n * Wrap original series data for some compatibility cases.\n */\n\nexport function createSourceFromSeriesDataOption(data) {\n  return new SourceImpl({\n    data: data,\n    sourceFormat: isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL\n  });\n}\n/**\n * Clone source but excludes source data.\n */\n\nexport function cloneSourceShallow(source) {\n  return new SourceImpl({\n    data: source.data,\n    sourceFormat: source.sourceFormat,\n    seriesLayoutBy: source.seriesLayoutBy,\n    dimensionsDefine: clone(source.dimensionsDefine),\n    startIndex: source.startIndex,\n    dimensionsDetectedCount: source.dimensionsDetectedCount\n  });\n}\n/**\n * Note: An empty array will be detected as `SOURCE_FORMAT_ARRAY_ROWS`.\n */\n\nexport function detectSourceFormat(data) {\n  var sourceFormat = SOURCE_FORMAT_UNKNOWN;\n\n  if (isTypedArray(data)) {\n    sourceFormat = SOURCE_FORMAT_TYPED_ARRAY;\n  } else if (isArray(data)) {\n    // FIXME Whether tolerate null in top level array?\n    if (data.length === 0) {\n      sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n    }\n\n    for (var i = 0, len = data.length; i < len; i++) {\n      var item = data[i];\n\n      if (item == null) {\n        continue;\n      } else if (isArray(item)) {\n        sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n        break;\n      } else if (isObject(item)) {\n        sourceFormat = SOURCE_FORMAT_OBJECT_ROWS;\n        break;\n      }\n    }\n  } else if (isObject(data)) {\n    for (var key in data) {\n      if (hasOwn(data, key) && isArrayLike(data[key])) {\n        sourceFormat = SOURCE_FORMAT_KEYED_COLUMNS;\n        break;\n      }\n    }\n  }\n\n  return sourceFormat;\n}\n/**\n * Determine the source definitions from data standalone dimensions definitions\n * are not specified.\n */\n\nfunction determineSourceDimensions(data, sourceFormat, seriesLayoutBy, sourceHeader, // standalone raw dimensions definition, like:\n// {\n//     dimensions: ['aa', 'bb', { name: 'cc', type: 'time' }]\n// }\n// in `dataset` or `series`\ndimensionsDefine) {\n  var dimensionsDetectedCount;\n  var startIndex; // PEDING: could data be null/undefined here?\n  // currently, if `dataset.source` not specified, error thrown.\n  // if `series.data` not specified, nothing rendered without error thrown.\n  // Should test these cases.\n\n  if (!data) {\n    return {\n      dimensionsDefine: normalizeDimensionsOption(dimensionsDefine),\n      startIndex: startIndex,\n      dimensionsDetectedCount: dimensionsDetectedCount\n    };\n  }\n\n  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {\n    var dataArrayRows = data; // Rule: Most of the first line are string: it is header.\n    // Caution: consider a line with 5 string and 1 number,\n    // it still can not be sure it is a head, because the\n    // 5 string may be 5 values of category columns.\n\n    if (sourceHeader === 'auto' || sourceHeader == null) {\n      arrayRowsTravelFirst(function (val) {\n        // '-' is regarded as null/undefined.\n        if (val != null && val !== '-') {\n          if (isString(val)) {\n            startIndex == null && (startIndex = 1);\n          } else {\n            startIndex = 0;\n          }\n        } // 10 is an experience number, avoid long loop.\n\n      }, seriesLayoutBy, dataArrayRows, 10);\n    } else {\n      startIndex = isNumber(sourceHeader) ? sourceHeader : sourceHeader ? 1 : 0;\n    }\n\n    if (!dimensionsDefine && startIndex === 1) {\n      dimensionsDefine = [];\n      arrayRowsTravelFirst(function (val, index) {\n        dimensionsDefine[index] = val != null ? val + '' : '';\n      }, seriesLayoutBy, dataArrayRows, Infinity);\n    }\n\n    dimensionsDetectedCount = dimensionsDefine ? dimensionsDefine.length : seriesLayoutBy === SERIES_LAYOUT_BY_ROW ? dataArrayRows.length : dataArrayRows[0] ? dataArrayRows[0].length : null;\n  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = objectRowsCollectDimensions(data);\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = [];\n      each(data, function (colArr, key) {\n        dimensionsDefine.push(key);\n      });\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var value0 = getDataItemValue(data[0]);\n    dimensionsDetectedCount = isArray(value0) && value0.length || 1;\n  } else if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(!!dimensionsDefine, 'dimensions must be given if data is TypedArray.');\n    }\n  }\n\n  return {\n    startIndex: startIndex,\n    dimensionsDefine: normalizeDimensionsOption(dimensionsDefine),\n    dimensionsDetectedCount: dimensionsDetectedCount\n  };\n}\n\nfunction objectRowsCollectDimensions(data) {\n  var firstIndex = 0;\n  var obj;\n\n  while (firstIndex < data.length && !(obj = data[firstIndex++])) {} // jshint ignore: line\n\n\n  if (obj) {\n    var dimensions_1 = [];\n    each(obj, function (value, key) {\n      dimensions_1.push(key);\n    });\n    return dimensions_1;\n  }\n} // Consider dimensions defined like ['A', 'price', 'B', 'price', 'C', 'price'],\n// which is reasonable. But dimension name is duplicated.\n// Returns undefined or an array contains only object without null/undefiend or string.\n\n\nfunction normalizeDimensionsOption(dimensionsDefine) {\n  if (!dimensionsDefine) {\n    // The meaning of null/undefined is different from empty array.\n    return;\n  }\n\n  var nameMap = createHashMap();\n  return map(dimensionsDefine, function (rawItem, index) {\n    rawItem = isObject(rawItem) ? rawItem : {\n      name: rawItem\n    }; // Other fields will be discarded.\n\n    var item = {\n      name: rawItem.name,\n      displayName: rawItem.displayName,\n      type: rawItem.type\n    }; // User can set null in dimensions.\n    // We dont auto specify name, othewise a given name may\n    // cause it be refered unexpectedly.\n\n    if (item.name == null) {\n      return item;\n    } // Also consider number form like 2012.\n\n\n    item.name += ''; // User may also specify displayName.\n    // displayName will always exists except user not\n    // specified or dim name is not specified or detected.\n    // (A auto generated dim name will not be used as\n    // displayName).\n\n    if (item.displayName == null) {\n      item.displayName = item.name;\n    }\n\n    var exist = nameMap.get(item.name);\n\n    if (!exist) {\n      nameMap.set(item.name, {\n        count: 1\n      });\n    } else {\n      item.name += '-' + exist.count++;\n    }\n\n    return item;\n  });\n}\n\nfunction arrayRowsTravelFirst(cb, seriesLayoutBy, data, maxLoop) {\n  if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {\n    for (var i = 0; i < data.length && i < maxLoop; i++) {\n      cb(data[i] ? data[i][0] : null, i);\n    }\n  } else {\n    var value0 = data[0] || [];\n\n    for (var i = 0; i < value0.length && i < maxLoop; i++) {\n      cb(value0[i], i);\n    }\n  }\n}\n\nexport function shouldRetrieveDataByName(source) {\n  var sourceFormat = source.sourceFormat;\n  return sourceFormat === SOURCE_FORMAT_OBJECT_ROWS || sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS;\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/data/Source.js"],"names":["isTypedArray","clone","createHashMap","isArray","isObject","isArrayLike","hasOwn","assert","each","map","isNumber","isString","SOURCE_FORMAT_ORIGINAL","SERIES_LAYOUT_BY_COLUMN","SOURCE_FORMAT_UNKNOWN","SOURCE_FORMAT_KEYED_COLUMNS","SOURCE_FORMAT_TYPED_ARRAY","SOURCE_FORMAT_ARRAY_ROWS","SOURCE_FORMAT_OBJECT_ROWS","SERIES_LAYOUT_BY_ROW","getDataItemValue","BE_ORDINAL","guessOrdinal","SourceImpl","fields","data","sourceFormat","seriesLayoutBy","startIndex","dimensionsDetectedCount","metaRawOption","dimensionsDefine","i","length","dim","type","Must","isSourceInstance","val","createSource","sourceData","thisMetaRawOption","detectSourceFormat","determined","determineSourceDimensions","sourceHeader","dimensions","source","createSourceFromSeriesDataOption","cloneSourceShallow","len","item","key","normalizeDimensionsOption","dataArrayRows","arrayRowsTravelFirst","index","Infinity","objectRowsCollectDimensions","colArr","push","value0","process","env","NODE_ENV","firstIndex","obj","dimensions_1","value","nameMap","rawItem","name","displayName","exist","get","set","count","cb","maxLoop","shouldRetrieveDataByName"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { isTypedArray, clone, createHashMap, isArray, isObject, isArrayLike, hasOwn, assert, each, map, isNumber, isString } from 'zrender/lib/core/util';\nimport { SOURCE_FORMAT_ORIGINAL, SERIES_LAYOUT_BY_COLUMN, SOURCE_FORMAT_UNKNOWN, SOURCE_FORMAT_KEYED_COLUMNS, SOURCE_FORMAT_TYPED_ARRAY, SOURCE_FORMAT_ARRAY_ROWS, SOURCE_FORMAT_OBJECT_ROWS, SERIES_LAYOUT_BY_ROW } from '../util/types';\nimport { getDataItemValue } from '../util/model';\nimport { BE_ORDINAL, guessOrdinal } from './helper/sourceHelper';\n; // @inner\n\nvar SourceImpl =\n/** @class */\nfunction () {\n  function SourceImpl(fields) {\n    this.data = fields.data || (fields.sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS ? {} : []);\n    this.sourceFormat = fields.sourceFormat || SOURCE_FORMAT_UNKNOWN; // Visit config\n\n    this.seriesLayoutBy = fields.seriesLayoutBy || SERIES_LAYOUT_BY_COLUMN;\n    this.startIndex = fields.startIndex || 0;\n    this.dimensionsDetectedCount = fields.dimensionsDetectedCount;\n    this.metaRawOption = fields.metaRawOption;\n    var dimensionsDefine = this.dimensionsDefine = fields.dimensionsDefine;\n\n    if (dimensionsDefine) {\n      for (var i = 0; i < dimensionsDefine.length; i++) {\n        var dim = dimensionsDefine[i];\n\n        if (dim.type == null) {\n          if (guessOrdinal(this, i) === BE_ORDINAL.Must) {\n            dim.type = 'ordinal';\n          }\n        }\n      }\n    }\n  }\n\n  return SourceImpl;\n}();\n\nexport function isSourceInstance(val) {\n  return val instanceof SourceImpl;\n}\n/**\n * Create a source from option.\n * NOTE: Created source is immutable. Don't change any properties in it.\n */\n\nexport function createSource(sourceData, thisMetaRawOption, // can be null. If not provided, auto detect it from `sourceData`.\nsourceFormat) {\n  sourceFormat = sourceFormat || detectSourceFormat(sourceData);\n  var seriesLayoutBy = thisMetaRawOption.seriesLayoutBy;\n  var determined = determineSourceDimensions(sourceData, sourceFormat, seriesLayoutBy, thisMetaRawOption.sourceHeader, thisMetaRawOption.dimensions);\n  var source = new SourceImpl({\n    data: sourceData,\n    sourceFormat: sourceFormat,\n    seriesLayoutBy: seriesLayoutBy,\n    dimensionsDefine: determined.dimensionsDefine,\n    startIndex: determined.startIndex,\n    dimensionsDetectedCount: determined.dimensionsDetectedCount,\n    metaRawOption: clone(thisMetaRawOption)\n  });\n  return source;\n}\n/**\n * Wrap original series data for some compatibility cases.\n */\n\nexport function createSourceFromSeriesDataOption(data) {\n  return new SourceImpl({\n    data: data,\n    sourceFormat: isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL\n  });\n}\n/**\n * Clone source but excludes source data.\n */\n\nexport function cloneSourceShallow(source) {\n  return new SourceImpl({\n    data: source.data,\n    sourceFormat: source.sourceFormat,\n    seriesLayoutBy: source.seriesLayoutBy,\n    dimensionsDefine: clone(source.dimensionsDefine),\n    startIndex: source.startIndex,\n    dimensionsDetectedCount: source.dimensionsDetectedCount\n  });\n}\n/**\n * Note: An empty array will be detected as `SOURCE_FORMAT_ARRAY_ROWS`.\n */\n\nexport function detectSourceFormat(data) {\n  var sourceFormat = SOURCE_FORMAT_UNKNOWN;\n\n  if (isTypedArray(data)) {\n    sourceFormat = SOURCE_FORMAT_TYPED_ARRAY;\n  } else if (isArray(data)) {\n    // FIXME Whether tolerate null in top level array?\n    if (data.length === 0) {\n      sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n    }\n\n    for (var i = 0, len = data.length; i < len; i++) {\n      var item = data[i];\n\n      if (item == null) {\n        continue;\n      } else if (isArray(item)) {\n        sourceFormat = SOURCE_FORMAT_ARRAY_ROWS;\n        break;\n      } else if (isObject(item)) {\n        sourceFormat = SOURCE_FORMAT_OBJECT_ROWS;\n        break;\n      }\n    }\n  } else if (isObject(data)) {\n    for (var key in data) {\n      if (hasOwn(data, key) && isArrayLike(data[key])) {\n        sourceFormat = SOURCE_FORMAT_KEYED_COLUMNS;\n        break;\n      }\n    }\n  }\n\n  return sourceFormat;\n}\n/**\n * Determine the source definitions from data standalone dimensions definitions\n * are not specified.\n */\n\nfunction determineSourceDimensions(data, sourceFormat, seriesLayoutBy, sourceHeader, // standalone raw dimensions definition, like:\n// {\n//     dimensions: ['aa', 'bb', { name: 'cc', type: 'time' }]\n// }\n// in `dataset` or `series`\ndimensionsDefine) {\n  var dimensionsDetectedCount;\n  var startIndex; // PEDING: could data be null/undefined here?\n  // currently, if `dataset.source` not specified, error thrown.\n  // if `series.data` not specified, nothing rendered without error thrown.\n  // Should test these cases.\n\n  if (!data) {\n    return {\n      dimensionsDefine: normalizeDimensionsOption(dimensionsDefine),\n      startIndex: startIndex,\n      dimensionsDetectedCount: dimensionsDetectedCount\n    };\n  }\n\n  if (sourceFormat === SOURCE_FORMAT_ARRAY_ROWS) {\n    var dataArrayRows = data; // Rule: Most of the first line are string: it is header.\n    // Caution: consider a line with 5 string and 1 number,\n    // it still can not be sure it is a head, because the\n    // 5 string may be 5 values of category columns.\n\n    if (sourceHeader === 'auto' || sourceHeader == null) {\n      arrayRowsTravelFirst(function (val) {\n        // '-' is regarded as null/undefined.\n        if (val != null && val !== '-') {\n          if (isString(val)) {\n            startIndex == null && (startIndex = 1);\n          } else {\n            startIndex = 0;\n          }\n        } // 10 is an experience number, avoid long loop.\n\n      }, seriesLayoutBy, dataArrayRows, 10);\n    } else {\n      startIndex = isNumber(sourceHeader) ? sourceHeader : sourceHeader ? 1 : 0;\n    }\n\n    if (!dimensionsDefine && startIndex === 1) {\n      dimensionsDefine = [];\n      arrayRowsTravelFirst(function (val, index) {\n        dimensionsDefine[index] = val != null ? val + '' : '';\n      }, seriesLayoutBy, dataArrayRows, Infinity);\n    }\n\n    dimensionsDetectedCount = dimensionsDefine ? dimensionsDefine.length : seriesLayoutBy === SERIES_LAYOUT_BY_ROW ? dataArrayRows.length : dataArrayRows[0] ? dataArrayRows[0].length : null;\n  } else if (sourceFormat === SOURCE_FORMAT_OBJECT_ROWS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = objectRowsCollectDimensions(data);\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS) {\n    if (!dimensionsDefine) {\n      dimensionsDefine = [];\n      each(data, function (colArr, key) {\n        dimensionsDefine.push(key);\n      });\n    }\n  } else if (sourceFormat === SOURCE_FORMAT_ORIGINAL) {\n    var value0 = getDataItemValue(data[0]);\n    dimensionsDetectedCount = isArray(value0) && value0.length || 1;\n  } else if (sourceFormat === SOURCE_FORMAT_TYPED_ARRAY) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(!!dimensionsDefine, 'dimensions must be given if data is TypedArray.');\n    }\n  }\n\n  return {\n    startIndex: startIndex,\n    dimensionsDefine: normalizeDimensionsOption(dimensionsDefine),\n    dimensionsDetectedCount: dimensionsDetectedCount\n  };\n}\n\nfunction objectRowsCollectDimensions(data) {\n  var firstIndex = 0;\n  var obj;\n\n  while (firstIndex < data.length && !(obj = data[firstIndex++])) {} // jshint ignore: line\n\n\n  if (obj) {\n    var dimensions_1 = [];\n    each(obj, function (value, key) {\n      dimensions_1.push(key);\n    });\n    return dimensions_1;\n  }\n} // Consider dimensions defined like ['A', 'price', 'B', 'price', 'C', 'price'],\n// which is reasonable. But dimension name is duplicated.\n// Returns undefined or an array contains only object without null/undefiend or string.\n\n\nfunction normalizeDimensionsOption(dimensionsDefine) {\n  if (!dimensionsDefine) {\n    // The meaning of null/undefined is different from empty array.\n    return;\n  }\n\n  var nameMap = createHashMap();\n  return map(dimensionsDefine, function (rawItem, index) {\n    rawItem = isObject(rawItem) ? rawItem : {\n      name: rawItem\n    }; // Other fields will be discarded.\n\n    var item = {\n      name: rawItem.name,\n      displayName: rawItem.displayName,\n      type: rawItem.type\n    }; // User can set null in dimensions.\n    // We dont auto specify name, othewise a given name may\n    // cause it be refered unexpectedly.\n\n    if (item.name == null) {\n      return item;\n    } // Also consider number form like 2012.\n\n\n    item.name += ''; // User may also specify displayName.\n    // displayName will always exists except user not\n    // specified or dim name is not specified or detected.\n    // (A auto generated dim name will not be used as\n    // displayName).\n\n    if (item.displayName == null) {\n      item.displayName = item.name;\n    }\n\n    var exist = nameMap.get(item.name);\n\n    if (!exist) {\n      nameMap.set(item.name, {\n        count: 1\n      });\n    } else {\n      item.name += '-' + exist.count++;\n    }\n\n    return item;\n  });\n}\n\nfunction arrayRowsTravelFirst(cb, seriesLayoutBy, data, maxLoop) {\n  if (seriesLayoutBy === SERIES_LAYOUT_BY_ROW) {\n    for (var i = 0; i < data.length && i < maxLoop; i++) {\n      cb(data[i] ? data[i][0] : null, i);\n    }\n  } else {\n    var value0 = data[0] || [];\n\n    for (var i = 0; i < value0.length && i < maxLoop; i++) {\n      cb(value0[i], i);\n    }\n  }\n}\n\nexport function shouldRetrieveDataByName(source) {\n  var sourceFormat = source.sourceFormat;\n  return sourceFormat === SOURCE_FORMAT_OBJECT_ROWS || sourceFormat === SOURCE_FORMAT_KEYED_COLUMNS;\n}"]},"metadata":{},"sourceType":"module"}