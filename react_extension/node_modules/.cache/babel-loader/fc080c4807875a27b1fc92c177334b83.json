{"ast":null,"code":"import Clip from './Clip';\nimport * as color from '../tool/color';\nimport { isArrayLike, keys, logError } from '../core/util';\nvar arraySlice = Array.prototype.slice;\nexport function interpolateNumber(p0, p1, percent) {\n  return (p1 - p0) * percent + p0;\n}\nexport function step(p0, p1, percent) {\n  return percent > 0.5 ? p1 : p0;\n}\nexport function interpolate1DArray(out, p0, p1, percent) {\n  var len = p0.length;\n\n  for (var i = 0; i < len; i++) {\n    out[i] = interpolateNumber(p0[i], p1[i], percent);\n  }\n}\nexport function interpolate2DArray(out, p0, p1, percent) {\n  var len = p0.length;\n  var len2 = len && p0[0].length;\n\n  for (var i = 0; i < len; i++) {\n    if (!out[i]) {\n      out[i] = [];\n    }\n\n    for (var j = 0; j < len2; j++) {\n      out[i][j] = interpolateNumber(p0[i][j], p1[i][j], percent);\n    }\n  }\n}\n\nfunction add1DArray(out, p0, p1, sign) {\n  var len = p0.length;\n\n  for (var i = 0; i < len; i++) {\n    out[i] = p0[i] + p1[i] * sign;\n  }\n\n  return out;\n}\n\nfunction add2DArray(out, p0, p1, sign) {\n  var len = p0.length;\n  var len2 = len && p0[0].length;\n\n  for (var i = 0; i < len; i++) {\n    if (!out[i]) {\n      out[i] = [];\n    }\n\n    for (var j = 0; j < len2; j++) {\n      out[i][j] = p0[i][j] + p1[i][j] * sign;\n    }\n  }\n\n  return out;\n}\n\nfunction fillArray(val0, val1, arrDim) {\n  var arr0 = val0;\n  var arr1 = val1;\n\n  if (!arr0.push || !arr1.push) {\n    return;\n  }\n\n  var arr0Len = arr0.length;\n  var arr1Len = arr1.length;\n\n  if (arr0Len !== arr1Len) {\n    var isPreviousLarger = arr0Len > arr1Len;\n\n    if (isPreviousLarger) {\n      arr0.length = arr1Len;\n    } else {\n      for (var i = arr0Len; i < arr1Len; i++) {\n        arr0.push(arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i]));\n      }\n    }\n  }\n\n  var len2 = arr0[0] && arr0[0].length;\n\n  for (var i = 0; i < arr0.length; i++) {\n    if (arrDim === 1) {\n      if (isNaN(arr0[i])) {\n        arr0[i] = arr1[i];\n      }\n    } else {\n      for (var j = 0; j < len2; j++) {\n        if (isNaN(arr0[i][j])) {\n          arr0[i][j] = arr1[i][j];\n        }\n      }\n    }\n  }\n}\n\nfunction is1DArraySame(arr0, arr1) {\n  var len = arr0.length;\n\n  if (len !== arr1.length) {\n    return false;\n  }\n\n  for (var i = 0; i < len; i++) {\n    if (arr0[i] !== arr1[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {\n  var v0 = (p2 - p0) * 0.5;\n  var v1 = (p3 - p1) * 0.5;\n  return (2 * (p1 - p2) + v0 + v1) * t3 + (-3 * (p1 - p2) - 2 * v0 - v1) * t2 + v0 * t + p1;\n}\n\nfunction catmullRomInterpolate1DArray(out, p0, p1, p2, p3, t, t2, t3) {\n  var len = p0.length;\n\n  for (var i = 0; i < len; i++) {\n    out[i] = catmullRomInterpolate(p0[i], p1[i], p2[i], p3[i], t, t2, t3);\n  }\n}\n\nfunction catmullRomInterpolate2DArray(out, p0, p1, p2, p3, t, t2, t3) {\n  var len = p0.length;\n  var len2 = p0[0].length;\n\n  for (var i = 0; i < len; i++) {\n    if (!out[i]) {\n      out[1] = [];\n    }\n\n    for (var j = 0; j < len2; j++) {\n      out[i][j] = catmullRomInterpolate(p0[i][j], p1[i][j], p2[i][j], p3[i][j], t, t2, t3);\n    }\n  }\n}\n\nexport function cloneValue(value) {\n  if (isArrayLike(value)) {\n    var len = value.length;\n\n    if (isArrayLike(value[0])) {\n      var ret = [];\n\n      for (var i = 0; i < len; i++) {\n        ret.push(arraySlice.call(value[i]));\n      }\n\n      return ret;\n    }\n\n    return arraySlice.call(value);\n  }\n\n  return value;\n}\n\nfunction rgba2String(rgba) {\n  rgba[0] = Math.floor(rgba[0]);\n  rgba[1] = Math.floor(rgba[1]);\n  rgba[2] = Math.floor(rgba[2]);\n  return 'rgba(' + rgba.join(',') + ')';\n}\n\nfunction guessArrayDim(value) {\n  return isArrayLike(value && value[0]) ? 2 : 1;\n}\n\nvar tmpRgba = [0, 0, 0, 0];\n\nvar Track = function () {\n  function Track(propName) {\n    this.keyframes = [];\n    this.maxTime = 0;\n    this.arrDim = 0;\n    this.interpolable = true;\n    this._needsSort = false;\n    this._isAllValueEqual = true;\n    this._lastFrame = 0;\n    this._lastFramePercent = 0;\n    this.propName = propName;\n  }\n\n  Track.prototype.isFinished = function () {\n    return this._finished;\n  };\n\n  Track.prototype.setFinished = function () {\n    this._finished = true;\n\n    if (this._additiveTrack) {\n      this._additiveTrack.setFinished();\n    }\n  };\n\n  Track.prototype.needsAnimate = function () {\n    return !this._isAllValueEqual && this.keyframes.length >= 2 && this.interpolable && this.maxTime > 0;\n  };\n\n  Track.prototype.getAdditiveTrack = function () {\n    return this._additiveTrack;\n  };\n\n  Track.prototype.addKeyframe = function (time, value) {\n    if (time >= this.maxTime) {\n      this.maxTime = time;\n    } else {\n      this._needsSort = true;\n    }\n\n    var keyframes = this.keyframes;\n    var len = keyframes.length;\n\n    if (this.interpolable) {\n      if (isArrayLike(value)) {\n        var arrayDim = guessArrayDim(value);\n\n        if (len > 0 && this.arrDim !== arrayDim) {\n          this.interpolable = false;\n          return;\n        }\n\n        if (arrayDim === 1 && typeof value[0] !== 'number' || arrayDim === 2 && typeof value[0][0] !== 'number') {\n          this.interpolable = false;\n          return;\n        }\n\n        if (len > 0) {\n          var lastFrame = keyframes[len - 1];\n\n          if (this._isAllValueEqual) {\n            if (arrayDim === 1) {\n              if (!is1DArraySame(value, lastFrame.value)) {\n                this._isAllValueEqual = false;\n              }\n            } else {\n              this._isAllValueEqual = false;\n            }\n          }\n        }\n\n        this.arrDim = arrayDim;\n      } else {\n        if (this.arrDim > 0) {\n          this.interpolable = false;\n          return;\n        }\n\n        if (typeof value === 'string') {\n          var colorArray = color.parse(value);\n\n          if (colorArray) {\n            value = colorArray;\n            this.isValueColor = true;\n          } else {\n            this.interpolable = false;\n          }\n        } else if (typeof value !== 'number' || isNaN(value)) {\n          this.interpolable = false;\n          return;\n        }\n\n        if (this._isAllValueEqual && len > 0) {\n          var lastFrame = keyframes[len - 1];\n\n          if (this.isValueColor && !is1DArraySame(lastFrame.value, value)) {\n            this._isAllValueEqual = false;\n          } else if (lastFrame.value !== value) {\n            this._isAllValueEqual = false;\n          }\n        }\n      }\n    }\n\n    var kf = {\n      time: time,\n      value: value,\n      percent: 0\n    };\n    this.keyframes.push(kf);\n    return kf;\n  };\n\n  Track.prototype.prepare = function (additiveTrack) {\n    var kfs = this.keyframes;\n\n    if (this._needsSort) {\n      kfs.sort(function (a, b) {\n        return a.time - b.time;\n      });\n    }\n\n    var arrDim = this.arrDim;\n    var kfsLen = kfs.length;\n    var lastKf = kfs[kfsLen - 1];\n\n    for (var i = 0; i < kfsLen; i++) {\n      kfs[i].percent = kfs[i].time / this.maxTime;\n\n      if (arrDim > 0 && i !== kfsLen - 1) {\n        fillArray(kfs[i].value, lastKf.value, arrDim);\n      }\n    }\n\n    if (additiveTrack && this.needsAnimate() && additiveTrack.needsAnimate() && arrDim === additiveTrack.arrDim && this.isValueColor === additiveTrack.isValueColor && !additiveTrack._finished) {\n      this._additiveTrack = additiveTrack;\n      var startValue = kfs[0].value;\n\n      for (var i = 0; i < kfsLen; i++) {\n        if (arrDim === 0) {\n          if (this.isValueColor) {\n            kfs[i].additiveValue = add1DArray([], kfs[i].value, startValue, -1);\n          } else {\n            kfs[i].additiveValue = kfs[i].value - startValue;\n          }\n        } else if (arrDim === 1) {\n          kfs[i].additiveValue = add1DArray([], kfs[i].value, startValue, -1);\n        } else if (arrDim === 2) {\n          kfs[i].additiveValue = add2DArray([], kfs[i].value, startValue, -1);\n        }\n      }\n    }\n  };\n\n  Track.prototype.step = function (target, percent) {\n    if (this._finished) {\n      return;\n    }\n\n    if (this._additiveTrack && this._additiveTrack._finished) {\n      this._additiveTrack = null;\n    }\n\n    var isAdditive = this._additiveTrack != null;\n    var valueKey = isAdditive ? 'additiveValue' : 'value';\n    var keyframes = this.keyframes;\n    var kfsNum = this.keyframes.length;\n    var propName = this.propName;\n    var arrDim = this.arrDim;\n    var isValueColor = this.isValueColor;\n    var frameIdx;\n\n    if (percent < 0) {\n      frameIdx = 0;\n    } else if (percent < this._lastFramePercent) {\n      var start = Math.min(this._lastFrame + 1, kfsNum - 1);\n\n      for (frameIdx = start; frameIdx >= 0; frameIdx--) {\n        if (keyframes[frameIdx].percent <= percent) {\n          break;\n        }\n      }\n\n      frameIdx = Math.min(frameIdx, kfsNum - 2);\n    } else {\n      for (frameIdx = this._lastFrame; frameIdx < kfsNum; frameIdx++) {\n        if (keyframes[frameIdx].percent > percent) {\n          break;\n        }\n      }\n\n      frameIdx = Math.min(frameIdx - 1, kfsNum - 2);\n    }\n\n    var nextFrame = keyframes[frameIdx + 1];\n    var frame = keyframes[frameIdx];\n\n    if (!(frame && nextFrame)) {\n      return;\n    }\n\n    this._lastFrame = frameIdx;\n    this._lastFramePercent = percent;\n    var range = nextFrame.percent - frame.percent;\n\n    if (range === 0) {\n      return;\n    }\n\n    var w = (percent - frame.percent) / range;\n    var targetArr = isAdditive ? this._additiveValue : isValueColor ? tmpRgba : target[propName];\n\n    if ((arrDim > 0 || isValueColor) && !targetArr) {\n      targetArr = this._additiveValue = [];\n    }\n\n    if (this.useSpline) {\n      var p1 = keyframes[frameIdx][valueKey];\n      var p0 = keyframes[frameIdx === 0 ? frameIdx : frameIdx - 1][valueKey];\n      var p2 = keyframes[frameIdx > kfsNum - 2 ? kfsNum - 1 : frameIdx + 1][valueKey];\n      var p3 = keyframes[frameIdx > kfsNum - 3 ? kfsNum - 1 : frameIdx + 2][valueKey];\n\n      if (arrDim > 0) {\n        arrDim === 1 ? catmullRomInterpolate1DArray(targetArr, p0, p1, p2, p3, w, w * w, w * w * w) : catmullRomInterpolate2DArray(targetArr, p0, p1, p2, p3, w, w * w, w * w * w);\n      } else if (isValueColor) {\n        catmullRomInterpolate1DArray(targetArr, p0, p1, p2, p3, w, w * w, w * w * w);\n\n        if (!isAdditive) {\n          target[propName] = rgba2String(targetArr);\n        }\n      } else {\n        var value = void 0;\n\n        if (!this.interpolable) {\n          value = p2;\n        } else {\n          value = catmullRomInterpolate(p0, p1, p2, p3, w, w * w, w * w * w);\n        }\n\n        if (isAdditive) {\n          this._additiveValue = value;\n        } else {\n          target[propName] = value;\n        }\n      }\n    } else {\n      if (arrDim > 0) {\n        arrDim === 1 ? interpolate1DArray(targetArr, frame[valueKey], nextFrame[valueKey], w) : interpolate2DArray(targetArr, frame[valueKey], nextFrame[valueKey], w);\n      } else if (isValueColor) {\n        interpolate1DArray(targetArr, frame[valueKey], nextFrame[valueKey], w);\n\n        if (!isAdditive) {\n          target[propName] = rgba2String(targetArr);\n        }\n      } else {\n        var value = void 0;\n\n        if (!this.interpolable) {\n          value = step(frame[valueKey], nextFrame[valueKey], w);\n        } else {\n          value = interpolateNumber(frame[valueKey], nextFrame[valueKey], w);\n        }\n\n        if (isAdditive) {\n          this._additiveValue = value;\n        } else {\n          target[propName] = value;\n        }\n      }\n    }\n\n    if (isAdditive) {\n      this._addToTarget(target);\n    }\n  };\n\n  Track.prototype._addToTarget = function (target) {\n    var arrDim = this.arrDim;\n    var propName = this.propName;\n    var additiveValue = this._additiveValue;\n\n    if (arrDim === 0) {\n      if (this.isValueColor) {\n        color.parse(target[propName], tmpRgba);\n        add1DArray(tmpRgba, tmpRgba, additiveValue, 1);\n        target[propName] = rgba2String(tmpRgba);\n      } else {\n        target[propName] = target[propName] + additiveValue;\n      }\n    } else if (arrDim === 1) {\n      add1DArray(target[propName], target[propName], additiveValue, 1);\n    } else if (arrDim === 2) {\n      add2DArray(target[propName], target[propName], additiveValue, 1);\n    }\n  };\n\n  return Track;\n}();\n\nvar Animator = function () {\n  function Animator(target, loop, additiveTo) {\n    this._tracks = {};\n    this._trackKeys = [];\n    this._delay = 0;\n    this._maxTime = 0;\n    this._paused = false;\n    this._started = 0;\n    this._clip = null;\n    this._target = target;\n    this._loop = loop;\n\n    if (loop && additiveTo) {\n      logError('Can\\' use additive animation on looped animation.');\n      return;\n    }\n\n    this._additiveAnimators = additiveTo;\n  }\n\n  Animator.prototype.getTarget = function () {\n    return this._target;\n  };\n\n  Animator.prototype.changeTarget = function (target) {\n    this._target = target;\n  };\n\n  Animator.prototype.when = function (time, props) {\n    return this.whenWithKeys(time, props, keys(props));\n  };\n\n  Animator.prototype.whenWithKeys = function (time, props, propNames) {\n    var tracks = this._tracks;\n\n    for (var i = 0; i < propNames.length; i++) {\n      var propName = propNames[i];\n      var track = tracks[propName];\n\n      if (!track) {\n        track = tracks[propName] = new Track(propName);\n        var initialValue = void 0;\n\n        var additiveTrack = this._getAdditiveTrack(propName);\n\n        if (additiveTrack) {\n          var lastFinalKf = additiveTrack.keyframes[additiveTrack.keyframes.length - 1];\n          initialValue = lastFinalKf && lastFinalKf.value;\n\n          if (additiveTrack.isValueColor && initialValue) {\n            initialValue = rgba2String(initialValue);\n          }\n        } else {\n          initialValue = this._target[propName];\n        }\n\n        if (initialValue == null) {\n          continue;\n        }\n\n        if (time !== 0) {\n          track.addKeyframe(0, cloneValue(initialValue));\n        }\n\n        this._trackKeys.push(propName);\n      }\n\n      track.addKeyframe(time, cloneValue(props[propName]));\n    }\n\n    this._maxTime = Math.max(this._maxTime, time);\n    return this;\n  };\n\n  Animator.prototype.pause = function () {\n    this._clip.pause();\n\n    this._paused = true;\n  };\n\n  Animator.prototype.resume = function () {\n    this._clip.resume();\n\n    this._paused = false;\n  };\n\n  Animator.prototype.isPaused = function () {\n    return !!this._paused;\n  };\n\n  Animator.prototype._doneCallback = function () {\n    this._setTracksFinished();\n\n    this._clip = null;\n    var doneList = this._doneCbs;\n\n    if (doneList) {\n      var len = doneList.length;\n\n      for (var i = 0; i < len; i++) {\n        doneList[i].call(this);\n      }\n    }\n  };\n\n  Animator.prototype._abortedCallback = function () {\n    this._setTracksFinished();\n\n    var animation = this.animation;\n    var abortedList = this._abortedCbs;\n\n    if (animation) {\n      animation.removeClip(this._clip);\n    }\n\n    this._clip = null;\n\n    if (abortedList) {\n      for (var i = 0; i < abortedList.length; i++) {\n        abortedList[i].call(this);\n      }\n    }\n  };\n\n  Animator.prototype._setTracksFinished = function () {\n    var tracks = this._tracks;\n    var tracksKeys = this._trackKeys;\n\n    for (var i = 0; i < tracksKeys.length; i++) {\n      tracks[tracksKeys[i]].setFinished();\n    }\n  };\n\n  Animator.prototype._getAdditiveTrack = function (trackName) {\n    var additiveTrack;\n    var additiveAnimators = this._additiveAnimators;\n\n    if (additiveAnimators) {\n      for (var i = 0; i < additiveAnimators.length; i++) {\n        var track = additiveAnimators[i].getTrack(trackName);\n\n        if (track) {\n          additiveTrack = track;\n        }\n      }\n    }\n\n    return additiveTrack;\n  };\n\n  Animator.prototype.start = function (easing, forceAnimate) {\n    if (this._started > 0) {\n      return;\n    }\n\n    this._started = 1;\n    var self = this;\n    var tracks = [];\n\n    for (var i = 0; i < this._trackKeys.length; i++) {\n      var propName = this._trackKeys[i];\n      var track = this._tracks[propName];\n\n      var additiveTrack = this._getAdditiveTrack(propName);\n\n      var kfs = track.keyframes;\n      track.prepare(additiveTrack);\n\n      if (track.needsAnimate()) {\n        tracks.push(track);\n      } else if (!track.interpolable) {\n        var lastKf = kfs[kfs.length - 1];\n\n        if (lastKf) {\n          self._target[track.propName] = lastKf.value;\n        }\n      }\n    }\n\n    if (tracks.length || forceAnimate) {\n      var clip = new Clip({\n        life: this._maxTime,\n        loop: this._loop,\n        delay: this._delay,\n        onframe: function (percent) {\n          self._started = 2;\n          var additiveAnimators = self._additiveAnimators;\n\n          if (additiveAnimators) {\n            var stillHasAdditiveAnimator = false;\n\n            for (var i = 0; i < additiveAnimators.length; i++) {\n              if (additiveAnimators[i]._clip) {\n                stillHasAdditiveAnimator = true;\n                break;\n              }\n            }\n\n            if (!stillHasAdditiveAnimator) {\n              self._additiveAnimators = null;\n            }\n          }\n\n          for (var i = 0; i < tracks.length; i++) {\n            tracks[i].step(self._target, percent);\n          }\n\n          var onframeList = self._onframeCbs;\n\n          if (onframeList) {\n            for (var i = 0; i < onframeList.length; i++) {\n              onframeList[i](self._target, percent);\n            }\n          }\n        },\n        ondestroy: function () {\n          self._doneCallback();\n        }\n      });\n      this._clip = clip;\n\n      if (this.animation) {\n        this.animation.addClip(clip);\n      }\n\n      if (easing && easing !== 'spline') {\n        clip.easing = easing;\n      }\n    } else {\n      this._doneCallback();\n    }\n\n    return this;\n  };\n\n  Animator.prototype.stop = function (forwardToLast) {\n    if (!this._clip) {\n      return;\n    }\n\n    var clip = this._clip;\n\n    if (forwardToLast) {\n      clip.onframe(1);\n    }\n\n    this._abortedCallback();\n  };\n\n  Animator.prototype.delay = function (time) {\n    this._delay = time;\n    return this;\n  };\n\n  Animator.prototype.during = function (cb) {\n    if (cb) {\n      if (!this._onframeCbs) {\n        this._onframeCbs = [];\n      }\n\n      this._onframeCbs.push(cb);\n    }\n\n    return this;\n  };\n\n  Animator.prototype.done = function (cb) {\n    if (cb) {\n      if (!this._doneCbs) {\n        this._doneCbs = [];\n      }\n\n      this._doneCbs.push(cb);\n    }\n\n    return this;\n  };\n\n  Animator.prototype.aborted = function (cb) {\n    if (cb) {\n      if (!this._abortedCbs) {\n        this._abortedCbs = [];\n      }\n\n      this._abortedCbs.push(cb);\n    }\n\n    return this;\n  };\n\n  Animator.prototype.getClip = function () {\n    return this._clip;\n  };\n\n  Animator.prototype.getTrack = function (propName) {\n    return this._tracks[propName];\n  };\n\n  Animator.prototype.stopTracks = function (propNames, forwardToLast) {\n    if (!propNames.length || !this._clip) {\n      return true;\n    }\n\n    var tracks = this._tracks;\n    var tracksKeys = this._trackKeys;\n\n    for (var i = 0; i < propNames.length; i++) {\n      var track = tracks[propNames[i]];\n\n      if (track) {\n        if (forwardToLast) {\n          track.step(this._target, 1);\n        } else if (this._started === 1) {\n          track.step(this._target, 0);\n        }\n\n        track.setFinished();\n      }\n    }\n\n    var allAborted = true;\n\n    for (var i = 0; i < tracksKeys.length; i++) {\n      if (!tracks[tracksKeys[i]].isFinished()) {\n        allAborted = false;\n        break;\n      }\n    }\n\n    if (allAborted) {\n      this._abortedCallback();\n    }\n\n    return allAborted;\n  };\n\n  Animator.prototype.saveFinalToTarget = function (target, trackKeys) {\n    if (!target) {\n      return;\n    }\n\n    trackKeys = trackKeys || this._trackKeys;\n\n    for (var i = 0; i < trackKeys.length; i++) {\n      var propName = trackKeys[i];\n      var track = this._tracks[propName];\n\n      if (!track || track.isFinished()) {\n        continue;\n      }\n\n      var kfs = track.keyframes;\n      var lastKf = kfs[kfs.length - 1];\n\n      if (lastKf) {\n        var val = cloneValue(lastKf.value);\n\n        if (track.isValueColor) {\n          val = rgba2String(val);\n        }\n\n        target[propName] = val;\n      }\n    }\n  };\n\n  Animator.prototype.__changeFinalValue = function (finalProps, trackKeys) {\n    trackKeys = trackKeys || keys(finalProps);\n\n    for (var i = 0; i < trackKeys.length; i++) {\n      var propName = trackKeys[i];\n      var track = this._tracks[propName];\n\n      if (!track) {\n        continue;\n      }\n\n      var kfs = track.keyframes;\n\n      if (kfs.length > 1) {\n        var lastKf = kfs.pop();\n        track.addKeyframe(lastKf.time, finalProps[propName]);\n        track.prepare(track.getAdditiveTrack());\n      }\n    }\n  };\n\n  return Animator;\n}();\n\nexport default Animator;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/zrender/lib/animation/Animator.js"],"names":["Clip","color","isArrayLike","keys","logError","arraySlice","Array","prototype","slice","interpolateNumber","p0","p1","percent","step","interpolate1DArray","out","len","length","i","interpolate2DArray","len2","j","add1DArray","sign","add2DArray","fillArray","val0","val1","arrDim","arr0","arr1","push","arr0Len","arr1Len","isPreviousLarger","call","isNaN","is1DArraySame","catmullRomInterpolate","p2","p3","t","t2","t3","v0","v1","catmullRomInterpolate1DArray","catmullRomInterpolate2DArray","cloneValue","value","ret","rgba2String","rgba","Math","floor","join","guessArrayDim","tmpRgba","Track","propName","keyframes","maxTime","interpolable","_needsSort","_isAllValueEqual","_lastFrame","_lastFramePercent","isFinished","_finished","setFinished","_additiveTrack","needsAnimate","getAdditiveTrack","addKeyframe","time","arrayDim","lastFrame","colorArray","parse","isValueColor","kf","prepare","additiveTrack","kfs","sort","a","b","kfsLen","lastKf","startValue","additiveValue","target","isAdditive","valueKey","kfsNum","frameIdx","start","min","nextFrame","frame","range","w","targetArr","_additiveValue","useSpline","_addToTarget","Animator","loop","additiveTo","_tracks","_trackKeys","_delay","_maxTime","_paused","_started","_clip","_target","_loop","_additiveAnimators","getTarget","changeTarget","when","props","whenWithKeys","propNames","tracks","track","initialValue","_getAdditiveTrack","lastFinalKf","max","pause","resume","isPaused","_doneCallback","_setTracksFinished","doneList","_doneCbs","_abortedCallback","animation","abortedList","_abortedCbs","removeClip","tracksKeys","trackName","additiveAnimators","getTrack","easing","forceAnimate","self","clip","life","delay","onframe","stillHasAdditiveAnimator","onframeList","_onframeCbs","ondestroy","addClip","stop","forwardToLast","during","cb","done","aborted","getClip","stopTracks","allAborted","saveFinalToTarget","trackKeys","val","__changeFinalValue","finalProps","pop"],"mappings":"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","sourcesContent":["import Clip from './Clip';\nimport * as color from '../tool/color';\nimport { isArrayLike, keys, logError } from '../core/util';\nvar arraySlice = Array.prototype.slice;\nexport function interpolateNumber(p0, p1, percent) {\n    return (p1 - p0) * percent + p0;\n}\nexport function step(p0, p1, percent) {\n    return percent > 0.5 ? p1 : p0;\n}\nexport function interpolate1DArray(out, p0, p1, percent) {\n    var len = p0.length;\n    for (var i = 0; i < len; i++) {\n        out[i] = interpolateNumber(p0[i], p1[i], percent);\n    }\n}\nexport function interpolate2DArray(out, p0, p1, percent) {\n    var len = p0.length;\n    var len2 = len && p0[0].length;\n    for (var i = 0; i < len; i++) {\n        if (!out[i]) {\n            out[i] = [];\n        }\n        for (var j = 0; j < len2; j++) {\n            out[i][j] = interpolateNumber(p0[i][j], p1[i][j], percent);\n        }\n    }\n}\nfunction add1DArray(out, p0, p1, sign) {\n    var len = p0.length;\n    for (var i = 0; i < len; i++) {\n        out[i] = p0[i] + p1[i] * sign;\n    }\n    return out;\n}\nfunction add2DArray(out, p0, p1, sign) {\n    var len = p0.length;\n    var len2 = len && p0[0].length;\n    for (var i = 0; i < len; i++) {\n        if (!out[i]) {\n            out[i] = [];\n        }\n        for (var j = 0; j < len2; j++) {\n            out[i][j] = p0[i][j] + p1[i][j] * sign;\n        }\n    }\n    return out;\n}\nfunction fillArray(val0, val1, arrDim) {\n    var arr0 = val0;\n    var arr1 = val1;\n    if (!arr0.push || !arr1.push) {\n        return;\n    }\n    var arr0Len = arr0.length;\n    var arr1Len = arr1.length;\n    if (arr0Len !== arr1Len) {\n        var isPreviousLarger = arr0Len > arr1Len;\n        if (isPreviousLarger) {\n            arr0.length = arr1Len;\n        }\n        else {\n            for (var i = arr0Len; i < arr1Len; i++) {\n                arr0.push(arrDim === 1 ? arr1[i] : arraySlice.call(arr1[i]));\n            }\n        }\n    }\n    var len2 = arr0[0] && arr0[0].length;\n    for (var i = 0; i < arr0.length; i++) {\n        if (arrDim === 1) {\n            if (isNaN(arr0[i])) {\n                arr0[i] = arr1[i];\n            }\n        }\n        else {\n            for (var j = 0; j < len2; j++) {\n                if (isNaN(arr0[i][j])) {\n                    arr0[i][j] = arr1[i][j];\n                }\n            }\n        }\n    }\n}\nfunction is1DArraySame(arr0, arr1) {\n    var len = arr0.length;\n    if (len !== arr1.length) {\n        return false;\n    }\n    for (var i = 0; i < len; i++) {\n        if (arr0[i] !== arr1[i]) {\n            return false;\n        }\n    }\n    return true;\n}\nfunction catmullRomInterpolate(p0, p1, p2, p3, t, t2, t3) {\n    var v0 = (p2 - p0) * 0.5;\n    var v1 = (p3 - p1) * 0.5;\n    return (2 * (p1 - p2) + v0 + v1) * t3\n        + (-3 * (p1 - p2) - 2 * v0 - v1) * t2\n        + v0 * t + p1;\n}\nfunction catmullRomInterpolate1DArray(out, p0, p1, p2, p3, t, t2, t3) {\n    var len = p0.length;\n    for (var i = 0; i < len; i++) {\n        out[i] = catmullRomInterpolate(p0[i], p1[i], p2[i], p3[i], t, t2, t3);\n    }\n}\nfunction catmullRomInterpolate2DArray(out, p0, p1, p2, p3, t, t2, t3) {\n    var len = p0.length;\n    var len2 = p0[0].length;\n    for (var i = 0; i < len; i++) {\n        if (!out[i]) {\n            out[1] = [];\n        }\n        for (var j = 0; j < len2; j++) {\n            out[i][j] = catmullRomInterpolate(p0[i][j], p1[i][j], p2[i][j], p3[i][j], t, t2, t3);\n        }\n    }\n}\nexport function cloneValue(value) {\n    if (isArrayLike(value)) {\n        var len = value.length;\n        if (isArrayLike(value[0])) {\n            var ret = [];\n            for (var i = 0; i < len; i++) {\n                ret.push(arraySlice.call(value[i]));\n            }\n            return ret;\n        }\n        return arraySlice.call(value);\n    }\n    return value;\n}\nfunction rgba2String(rgba) {\n    rgba[0] = Math.floor(rgba[0]);\n    rgba[1] = Math.floor(rgba[1]);\n    rgba[2] = Math.floor(rgba[2]);\n    return 'rgba(' + rgba.join(',') + ')';\n}\nfunction guessArrayDim(value) {\n    return isArrayLike(value && value[0]) ? 2 : 1;\n}\nvar tmpRgba = [0, 0, 0, 0];\nvar Track = (function () {\n    function Track(propName) {\n        this.keyframes = [];\n        this.maxTime = 0;\n        this.arrDim = 0;\n        this.interpolable = true;\n        this._needsSort = false;\n        this._isAllValueEqual = true;\n        this._lastFrame = 0;\n        this._lastFramePercent = 0;\n        this.propName = propName;\n    }\n    Track.prototype.isFinished = function () {\n        return this._finished;\n    };\n    Track.prototype.setFinished = function () {\n        this._finished = true;\n        if (this._additiveTrack) {\n            this._additiveTrack.setFinished();\n        }\n    };\n    Track.prototype.needsAnimate = function () {\n        return !this._isAllValueEqual\n            && this.keyframes.length >= 2\n            && this.interpolable\n            && this.maxTime > 0;\n    };\n    Track.prototype.getAdditiveTrack = function () {\n        return this._additiveTrack;\n    };\n    Track.prototype.addKeyframe = function (time, value) {\n        if (time >= this.maxTime) {\n            this.maxTime = time;\n        }\n        else {\n            this._needsSort = true;\n        }\n        var keyframes = this.keyframes;\n        var len = keyframes.length;\n        if (this.interpolable) {\n            if (isArrayLike(value)) {\n                var arrayDim = guessArrayDim(value);\n                if (len > 0 && this.arrDim !== arrayDim) {\n                    this.interpolable = false;\n                    return;\n                }\n                if (arrayDim === 1 && typeof value[0] !== 'number'\n                    || arrayDim === 2 && typeof value[0][0] !== 'number') {\n                    this.interpolable = false;\n                    return;\n                }\n                if (len > 0) {\n                    var lastFrame = keyframes[len - 1];\n                    if (this._isAllValueEqual) {\n                        if (arrayDim === 1) {\n                            if (!is1DArraySame(value, lastFrame.value)) {\n                                this._isAllValueEqual = false;\n                            }\n                        }\n                        else {\n                            this._isAllValueEqual = false;\n                        }\n                    }\n                }\n                this.arrDim = arrayDim;\n            }\n            else {\n                if (this.arrDim > 0) {\n                    this.interpolable = false;\n                    return;\n                }\n                if (typeof value === 'string') {\n                    var colorArray = color.parse(value);\n                    if (colorArray) {\n                        value = colorArray;\n                        this.isValueColor = true;\n                    }\n                    else {\n                        this.interpolable = false;\n                    }\n                }\n                else if (typeof value !== 'number' || isNaN(value)) {\n                    this.interpolable = false;\n                    return;\n                }\n                if (this._isAllValueEqual && len > 0) {\n                    var lastFrame = keyframes[len - 1];\n                    if (this.isValueColor && !is1DArraySame(lastFrame.value, value)) {\n                        this._isAllValueEqual = false;\n                    }\n                    else if (lastFrame.value !== value) {\n                        this._isAllValueEqual = false;\n                    }\n                }\n            }\n        }\n        var kf = {\n            time: time,\n            value: value,\n            percent: 0\n        };\n        this.keyframes.push(kf);\n        return kf;\n    };\n    Track.prototype.prepare = function (additiveTrack) {\n        var kfs = this.keyframes;\n        if (this._needsSort) {\n            kfs.sort(function (a, b) {\n                return a.time - b.time;\n            });\n        }\n        var arrDim = this.arrDim;\n        var kfsLen = kfs.length;\n        var lastKf = kfs[kfsLen - 1];\n        for (var i = 0; i < kfsLen; i++) {\n            kfs[i].percent = kfs[i].time / this.maxTime;\n            if (arrDim > 0 && i !== kfsLen - 1) {\n                fillArray(kfs[i].value, lastKf.value, arrDim);\n            }\n        }\n        if (additiveTrack\n            && this.needsAnimate()\n            && additiveTrack.needsAnimate()\n            && arrDim === additiveTrack.arrDim\n            && this.isValueColor === additiveTrack.isValueColor\n            && !additiveTrack._finished) {\n            this._additiveTrack = additiveTrack;\n            var startValue = kfs[0].value;\n            for (var i = 0; i < kfsLen; i++) {\n                if (arrDim === 0) {\n                    if (this.isValueColor) {\n                        kfs[i].additiveValue =\n                            add1DArray([], kfs[i].value, startValue, -1);\n                    }\n                    else {\n                        kfs[i].additiveValue = kfs[i].value - startValue;\n                    }\n                }\n                else if (arrDim === 1) {\n                    kfs[i].additiveValue = add1DArray([], kfs[i].value, startValue, -1);\n                }\n                else if (arrDim === 2) {\n                    kfs[i].additiveValue = add2DArray([], kfs[i].value, startValue, -1);\n                }\n            }\n        }\n    };\n    Track.prototype.step = function (target, percent) {\n        if (this._finished) {\n            return;\n        }\n        if (this._additiveTrack && this._additiveTrack._finished) {\n            this._additiveTrack = null;\n        }\n        var isAdditive = this._additiveTrack != null;\n        var valueKey = isAdditive ? 'additiveValue' : 'value';\n        var keyframes = this.keyframes;\n        var kfsNum = this.keyframes.length;\n        var propName = this.propName;\n        var arrDim = this.arrDim;\n        var isValueColor = this.isValueColor;\n        var frameIdx;\n        if (percent < 0) {\n            frameIdx = 0;\n        }\n        else if (percent < this._lastFramePercent) {\n            var start = Math.min(this._lastFrame + 1, kfsNum - 1);\n            for (frameIdx = start; frameIdx >= 0; frameIdx--) {\n                if (keyframes[frameIdx].percent <= percent) {\n                    break;\n                }\n            }\n            frameIdx = Math.min(frameIdx, kfsNum - 2);\n        }\n        else {\n            for (frameIdx = this._lastFrame; frameIdx < kfsNum; frameIdx++) {\n                if (keyframes[frameIdx].percent > percent) {\n                    break;\n                }\n            }\n            frameIdx = Math.min(frameIdx - 1, kfsNum - 2);\n        }\n        var nextFrame = keyframes[frameIdx + 1];\n        var frame = keyframes[frameIdx];\n        if (!(frame && nextFrame)) {\n            return;\n        }\n        this._lastFrame = frameIdx;\n        this._lastFramePercent = percent;\n        var range = (nextFrame.percent - frame.percent);\n        if (range === 0) {\n            return;\n        }\n        var w = (percent - frame.percent) / range;\n        var targetArr = isAdditive ? this._additiveValue\n            : (isValueColor ? tmpRgba : target[propName]);\n        if ((arrDim > 0 || isValueColor) && !targetArr) {\n            targetArr = this._additiveValue = [];\n        }\n        if (this.useSpline) {\n            var p1 = keyframes[frameIdx][valueKey];\n            var p0 = keyframes[frameIdx === 0 ? frameIdx : frameIdx - 1][valueKey];\n            var p2 = keyframes[frameIdx > kfsNum - 2 ? kfsNum - 1 : frameIdx + 1][valueKey];\n            var p3 = keyframes[frameIdx > kfsNum - 3 ? kfsNum - 1 : frameIdx + 2][valueKey];\n            if (arrDim > 0) {\n                arrDim === 1\n                    ? catmullRomInterpolate1DArray(targetArr, p0, p1, p2, p3, w, w * w, w * w * w)\n                    : catmullRomInterpolate2DArray(targetArr, p0, p1, p2, p3, w, w * w, w * w * w);\n            }\n            else if (isValueColor) {\n                catmullRomInterpolate1DArray(targetArr, p0, p1, p2, p3, w, w * w, w * w * w);\n                if (!isAdditive) {\n                    target[propName] = rgba2String(targetArr);\n                }\n            }\n            else {\n                var value = void 0;\n                if (!this.interpolable) {\n                    value = p2;\n                }\n                else {\n                    value = catmullRomInterpolate(p0, p1, p2, p3, w, w * w, w * w * w);\n                }\n                if (isAdditive) {\n                    this._additiveValue = value;\n                }\n                else {\n                    target[propName] = value;\n                }\n            }\n        }\n        else {\n            if (arrDim > 0) {\n                arrDim === 1\n                    ? interpolate1DArray(targetArr, frame[valueKey], nextFrame[valueKey], w)\n                    : interpolate2DArray(targetArr, frame[valueKey], nextFrame[valueKey], w);\n            }\n            else if (isValueColor) {\n                interpolate1DArray(targetArr, frame[valueKey], nextFrame[valueKey], w);\n                if (!isAdditive) {\n                    target[propName] = rgba2String(targetArr);\n                }\n            }\n            else {\n                var value = void 0;\n                if (!this.interpolable) {\n                    value = step(frame[valueKey], nextFrame[valueKey], w);\n                }\n                else {\n                    value = interpolateNumber(frame[valueKey], nextFrame[valueKey], w);\n                }\n                if (isAdditive) {\n                    this._additiveValue = value;\n                }\n                else {\n                    target[propName] = value;\n                }\n            }\n        }\n        if (isAdditive) {\n            this._addToTarget(target);\n        }\n    };\n    Track.prototype._addToTarget = function (target) {\n        var arrDim = this.arrDim;\n        var propName = this.propName;\n        var additiveValue = this._additiveValue;\n        if (arrDim === 0) {\n            if (this.isValueColor) {\n                color.parse(target[propName], tmpRgba);\n                add1DArray(tmpRgba, tmpRgba, additiveValue, 1);\n                target[propName] = rgba2String(tmpRgba);\n            }\n            else {\n                target[propName] = target[propName] + additiveValue;\n            }\n        }\n        else if (arrDim === 1) {\n            add1DArray(target[propName], target[propName], additiveValue, 1);\n        }\n        else if (arrDim === 2) {\n            add2DArray(target[propName], target[propName], additiveValue, 1);\n        }\n    };\n    return Track;\n}());\nvar Animator = (function () {\n    function Animator(target, loop, additiveTo) {\n        this._tracks = {};\n        this._trackKeys = [];\n        this._delay = 0;\n        this._maxTime = 0;\n        this._paused = false;\n        this._started = 0;\n        this._clip = null;\n        this._target = target;\n        this._loop = loop;\n        if (loop && additiveTo) {\n            logError('Can\\' use additive animation on looped animation.');\n            return;\n        }\n        this._additiveAnimators = additiveTo;\n    }\n    Animator.prototype.getTarget = function () {\n        return this._target;\n    };\n    Animator.prototype.changeTarget = function (target) {\n        this._target = target;\n    };\n    Animator.prototype.when = function (time, props) {\n        return this.whenWithKeys(time, props, keys(props));\n    };\n    Animator.prototype.whenWithKeys = function (time, props, propNames) {\n        var tracks = this._tracks;\n        for (var i = 0; i < propNames.length; i++) {\n            var propName = propNames[i];\n            var track = tracks[propName];\n            if (!track) {\n                track = tracks[propName] = new Track(propName);\n                var initialValue = void 0;\n                var additiveTrack = this._getAdditiveTrack(propName);\n                if (additiveTrack) {\n                    var lastFinalKf = additiveTrack.keyframes[additiveTrack.keyframes.length - 1];\n                    initialValue = lastFinalKf && lastFinalKf.value;\n                    if (additiveTrack.isValueColor && initialValue) {\n                        initialValue = rgba2String(initialValue);\n                    }\n                }\n                else {\n                    initialValue = this._target[propName];\n                }\n                if (initialValue == null) {\n                    continue;\n                }\n                if (time !== 0) {\n                    track.addKeyframe(0, cloneValue(initialValue));\n                }\n                this._trackKeys.push(propName);\n            }\n            track.addKeyframe(time, cloneValue(props[propName]));\n        }\n        this._maxTime = Math.max(this._maxTime, time);\n        return this;\n    };\n    Animator.prototype.pause = function () {\n        this._clip.pause();\n        this._paused = true;\n    };\n    Animator.prototype.resume = function () {\n        this._clip.resume();\n        this._paused = false;\n    };\n    Animator.prototype.isPaused = function () {\n        return !!this._paused;\n    };\n    Animator.prototype._doneCallback = function () {\n        this._setTracksFinished();\n        this._clip = null;\n        var doneList = this._doneCbs;\n        if (doneList) {\n            var len = doneList.length;\n            for (var i = 0; i < len; i++) {\n                doneList[i].call(this);\n            }\n        }\n    };\n    Animator.prototype._abortedCallback = function () {\n        this._setTracksFinished();\n        var animation = this.animation;\n        var abortedList = this._abortedCbs;\n        if (animation) {\n            animation.removeClip(this._clip);\n        }\n        this._clip = null;\n        if (abortedList) {\n            for (var i = 0; i < abortedList.length; i++) {\n                abortedList[i].call(this);\n            }\n        }\n    };\n    Animator.prototype._setTracksFinished = function () {\n        var tracks = this._tracks;\n        var tracksKeys = this._trackKeys;\n        for (var i = 0; i < tracksKeys.length; i++) {\n            tracks[tracksKeys[i]].setFinished();\n        }\n    };\n    Animator.prototype._getAdditiveTrack = function (trackName) {\n        var additiveTrack;\n        var additiveAnimators = this._additiveAnimators;\n        if (additiveAnimators) {\n            for (var i = 0; i < additiveAnimators.length; i++) {\n                var track = additiveAnimators[i].getTrack(trackName);\n                if (track) {\n                    additiveTrack = track;\n                }\n            }\n        }\n        return additiveTrack;\n    };\n    Animator.prototype.start = function (easing, forceAnimate) {\n        if (this._started > 0) {\n            return;\n        }\n        this._started = 1;\n        var self = this;\n        var tracks = [];\n        for (var i = 0; i < this._trackKeys.length; i++) {\n            var propName = this._trackKeys[i];\n            var track = this._tracks[propName];\n            var additiveTrack = this._getAdditiveTrack(propName);\n            var kfs = track.keyframes;\n            track.prepare(additiveTrack);\n            if (track.needsAnimate()) {\n                tracks.push(track);\n            }\n            else if (!track.interpolable) {\n                var lastKf = kfs[kfs.length - 1];\n                if (lastKf) {\n                    self._target[track.propName] = lastKf.value;\n                }\n            }\n        }\n        if (tracks.length || forceAnimate) {\n            var clip = new Clip({\n                life: this._maxTime,\n                loop: this._loop,\n                delay: this._delay,\n                onframe: function (percent) {\n                    self._started = 2;\n                    var additiveAnimators = self._additiveAnimators;\n                    if (additiveAnimators) {\n                        var stillHasAdditiveAnimator = false;\n                        for (var i = 0; i < additiveAnimators.length; i++) {\n                            if (additiveAnimators[i]._clip) {\n                                stillHasAdditiveAnimator = true;\n                                break;\n                            }\n                        }\n                        if (!stillHasAdditiveAnimator) {\n                            self._additiveAnimators = null;\n                        }\n                    }\n                    for (var i = 0; i < tracks.length; i++) {\n                        tracks[i].step(self._target, percent);\n                    }\n                    var onframeList = self._onframeCbs;\n                    if (onframeList) {\n                        for (var i = 0; i < onframeList.length; i++) {\n                            onframeList[i](self._target, percent);\n                        }\n                    }\n                },\n                ondestroy: function () {\n                    self._doneCallback();\n                }\n            });\n            this._clip = clip;\n            if (this.animation) {\n                this.animation.addClip(clip);\n            }\n            if (easing && easing !== 'spline') {\n                clip.easing = easing;\n            }\n        }\n        else {\n            this._doneCallback();\n        }\n        return this;\n    };\n    Animator.prototype.stop = function (forwardToLast) {\n        if (!this._clip) {\n            return;\n        }\n        var clip = this._clip;\n        if (forwardToLast) {\n            clip.onframe(1);\n        }\n        this._abortedCallback();\n    };\n    Animator.prototype.delay = function (time) {\n        this._delay = time;\n        return this;\n    };\n    Animator.prototype.during = function (cb) {\n        if (cb) {\n            if (!this._onframeCbs) {\n                this._onframeCbs = [];\n            }\n            this._onframeCbs.push(cb);\n        }\n        return this;\n    };\n    Animator.prototype.done = function (cb) {\n        if (cb) {\n            if (!this._doneCbs) {\n                this._doneCbs = [];\n            }\n            this._doneCbs.push(cb);\n        }\n        return this;\n    };\n    Animator.prototype.aborted = function (cb) {\n        if (cb) {\n            if (!this._abortedCbs) {\n                this._abortedCbs = [];\n            }\n            this._abortedCbs.push(cb);\n        }\n        return this;\n    };\n    Animator.prototype.getClip = function () {\n        return this._clip;\n    };\n    Animator.prototype.getTrack = function (propName) {\n        return this._tracks[propName];\n    };\n    Animator.prototype.stopTracks = function (propNames, forwardToLast) {\n        if (!propNames.length || !this._clip) {\n            return true;\n        }\n        var tracks = this._tracks;\n        var tracksKeys = this._trackKeys;\n        for (var i = 0; i < propNames.length; i++) {\n            var track = tracks[propNames[i]];\n            if (track) {\n                if (forwardToLast) {\n                    track.step(this._target, 1);\n                }\n                else if (this._started === 1) {\n                    track.step(this._target, 0);\n                }\n                track.setFinished();\n            }\n        }\n        var allAborted = true;\n        for (var i = 0; i < tracksKeys.length; i++) {\n            if (!tracks[tracksKeys[i]].isFinished()) {\n                allAborted = false;\n                break;\n            }\n        }\n        if (allAborted) {\n            this._abortedCallback();\n        }\n        return allAborted;\n    };\n    Animator.prototype.saveFinalToTarget = function (target, trackKeys) {\n        if (!target) {\n            return;\n        }\n        trackKeys = trackKeys || this._trackKeys;\n        for (var i = 0; i < trackKeys.length; i++) {\n            var propName = trackKeys[i];\n            var track = this._tracks[propName];\n            if (!track || track.isFinished()) {\n                continue;\n            }\n            var kfs = track.keyframes;\n            var lastKf = kfs[kfs.length - 1];\n            if (lastKf) {\n                var val = cloneValue(lastKf.value);\n                if (track.isValueColor) {\n                    val = rgba2String(val);\n                }\n                target[propName] = val;\n            }\n        }\n    };\n    Animator.prototype.__changeFinalValue = function (finalProps, trackKeys) {\n        trackKeys = trackKeys || keys(finalProps);\n        for (var i = 0; i < trackKeys.length; i++) {\n            var propName = trackKeys[i];\n            var track = this._tracks[propName];\n            if (!track) {\n                continue;\n            }\n            var kfs = track.keyframes;\n            if (kfs.length > 1) {\n                var lastKf = kfs.pop();\n                track.addKeyframe(lastKf.time, finalProps[propName]);\n                track.prepare(track.getAdditiveTrack());\n            }\n        }\n    };\n    return Animator;\n}());\nexport default Animator;\n"]},"metadata":{},"sourceType":"module"}