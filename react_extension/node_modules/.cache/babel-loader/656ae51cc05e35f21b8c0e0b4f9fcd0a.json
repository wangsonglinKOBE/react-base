{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport SeriesModel from '../../model/Series';\nimport createSeriesDataSimply from '../helper/createSeriesDataSimply';\nimport * as zrUtil from 'zrender/lib/core/util';\nimport LegendVisualProvider from '../../visual/LegendVisualProvider';\nimport { createTooltipMarkup, retrieveVisualColorForTooltipMarker } from '../../component/tooltip/tooltipMarkup';\n\nvar RadarSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(RadarSeriesModel, _super);\n\n  function RadarSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = RadarSeriesModel.type;\n    _this.hasSymbolVisual = true;\n    return _this;\n  } // Overwrite\n\n\n  RadarSeriesModel.prototype.init = function (option) {\n    _super.prototype.init.apply(this, arguments); // Enable legend selection for each data item\n    // Use a function instead of direct access because data reference may changed\n\n\n    this.legendVisualProvider = new LegendVisualProvider(zrUtil.bind(this.getData, this), zrUtil.bind(this.getRawData, this));\n  };\n\n  RadarSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    return createSeriesDataSimply(this, {\n      generateCoord: 'indicator_',\n      generateCoordCount: Infinity\n    });\n  };\n\n  RadarSeriesModel.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    var data = this.getData();\n    var coordSys = this.coordinateSystem;\n    var indicatorAxes = coordSys.getIndicatorAxes();\n    var name = this.getData().getName(dataIndex);\n    var nameToDisplay = name === '' ? this.name : name;\n    var markerColor = retrieveVisualColorForTooltipMarker(this, dataIndex);\n    return createTooltipMarkup('section', {\n      header: nameToDisplay,\n      sortBlocks: true,\n      blocks: zrUtil.map(indicatorAxes, function (axis) {\n        var val = data.get(data.mapDimension(axis.dim), dataIndex);\n        return createTooltipMarkup('nameValue', {\n          markerType: 'subItem',\n          markerColor: markerColor,\n          name: axis.name,\n          value: val,\n          sortParam: val\n        });\n      })\n    });\n  };\n\n  RadarSeriesModel.prototype.getTooltipPosition = function (dataIndex) {\n    if (dataIndex != null) {\n      var data_1 = this.getData();\n      var coordSys = this.coordinateSystem;\n      var values = data_1.getValues(zrUtil.map(coordSys.dimensions, function (dim) {\n        return data_1.mapDimension(dim);\n      }), dataIndex);\n\n      for (var i = 0, len = values.length; i < len; i++) {\n        if (!isNaN(values[i])) {\n          var indicatorAxes = coordSys.getIndicatorAxes();\n          return coordSys.coordToPoint(indicatorAxes[i].dataToCoord(values[i]), i);\n        }\n      }\n    }\n  };\n\n  RadarSeriesModel.type = 'series.radar';\n  RadarSeriesModel.dependencies = ['radar'];\n  RadarSeriesModel.defaultOption = {\n    zlevel: 0,\n    z: 2,\n    colorBy: 'data',\n    coordinateSystem: 'radar',\n    legendHoverLink: true,\n    radarIndex: 0,\n    lineStyle: {\n      width: 2,\n      type: 'solid',\n      join: 'round'\n    },\n    label: {\n      position: 'top'\n    },\n    // areaStyle: {\n    // },\n    // itemStyle: {}\n    symbolSize: 8 // symbolRotate: null\n\n  };\n  return RadarSeriesModel;\n}(SeriesModel);\n\nexport default RadarSeriesModel;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/chart/radar/RadarSeries.js"],"names":["__extends","SeriesModel","createSeriesDataSimply","zrUtil","LegendVisualProvider","createTooltipMarkup","retrieveVisualColorForTooltipMarker","RadarSeriesModel","_super","_this","apply","arguments","type","hasSymbolVisual","prototype","init","option","legendVisualProvider","bind","getData","getRawData","getInitialData","ecModel","generateCoord","generateCoordCount","Infinity","formatTooltip","dataIndex","multipleSeries","dataType","data","coordSys","coordinateSystem","indicatorAxes","getIndicatorAxes","name","getName","nameToDisplay","markerColor","header","sortBlocks","blocks","map","axis","val","get","mapDimension","dim","markerType","value","sortParam","getTooltipPosition","data_1","values","getValues","dimensions","i","len","length","isNaN","coordToPoint","dataToCoord","dependencies","defaultOption","zlevel","z","colorBy","legendHoverLink","radarIndex","lineStyle","width","join","label","position","symbolSize"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport SeriesModel from '../../model/Series';\nimport createSeriesDataSimply from '../helper/createSeriesDataSimply';\nimport * as zrUtil from 'zrender/lib/core/util';\nimport LegendVisualProvider from '../../visual/LegendVisualProvider';\nimport { createTooltipMarkup, retrieveVisualColorForTooltipMarker } from '../../component/tooltip/tooltipMarkup';\n\nvar RadarSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(RadarSeriesModel, _super);\n\n  function RadarSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = RadarSeriesModel.type;\n    _this.hasSymbolVisual = true;\n    return _this;\n  } // Overwrite\n\n\n  RadarSeriesModel.prototype.init = function (option) {\n    _super.prototype.init.apply(this, arguments); // Enable legend selection for each data item\n    // Use a function instead of direct access because data reference may changed\n\n\n    this.legendVisualProvider = new LegendVisualProvider(zrUtil.bind(this.getData, this), zrUtil.bind(this.getRawData, this));\n  };\n\n  RadarSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    return createSeriesDataSimply(this, {\n      generateCoord: 'indicator_',\n      generateCoordCount: Infinity\n    });\n  };\n\n  RadarSeriesModel.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    var data = this.getData();\n    var coordSys = this.coordinateSystem;\n    var indicatorAxes = coordSys.getIndicatorAxes();\n    var name = this.getData().getName(dataIndex);\n    var nameToDisplay = name === '' ? this.name : name;\n    var markerColor = retrieveVisualColorForTooltipMarker(this, dataIndex);\n    return createTooltipMarkup('section', {\n      header: nameToDisplay,\n      sortBlocks: true,\n      blocks: zrUtil.map(indicatorAxes, function (axis) {\n        var val = data.get(data.mapDimension(axis.dim), dataIndex);\n        return createTooltipMarkup('nameValue', {\n          markerType: 'subItem',\n          markerColor: markerColor,\n          name: axis.name,\n          value: val,\n          sortParam: val\n        });\n      })\n    });\n  };\n\n  RadarSeriesModel.prototype.getTooltipPosition = function (dataIndex) {\n    if (dataIndex != null) {\n      var data_1 = this.getData();\n      var coordSys = this.coordinateSystem;\n      var values = data_1.getValues(zrUtil.map(coordSys.dimensions, function (dim) {\n        return data_1.mapDimension(dim);\n      }), dataIndex);\n\n      for (var i = 0, len = values.length; i < len; i++) {\n        if (!isNaN(values[i])) {\n          var indicatorAxes = coordSys.getIndicatorAxes();\n          return coordSys.coordToPoint(indicatorAxes[i].dataToCoord(values[i]), i);\n        }\n      }\n    }\n  };\n\n  RadarSeriesModel.type = 'series.radar';\n  RadarSeriesModel.dependencies = ['radar'];\n  RadarSeriesModel.defaultOption = {\n    zlevel: 0,\n    z: 2,\n    colorBy: 'data',\n    coordinateSystem: 'radar',\n    legendHoverLink: true,\n    radarIndex: 0,\n    lineStyle: {\n      width: 2,\n      type: 'solid',\n      join: 'round'\n    },\n    label: {\n      position: 'top'\n    },\n    // areaStyle: {\n    // },\n    // itemStyle: {}\n    symbolSize: 8 // symbolRotate: null\n\n  };\n  return RadarSeriesModel;\n}(SeriesModel);\n\nexport default RadarSeriesModel;"]},"metadata":{},"sourceType":"module"}