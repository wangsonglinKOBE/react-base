{"ast":null,"code":"import { __extends } from \"tslib\";\nimport Definable from './Definable';\nimport * as zrUtil from '../../core/util';\nimport { isClipPathChanged } from '../../canvas/helper';\n\nfunction generateClipPathsKey(clipPaths) {\n  var key = [];\n\n  if (clipPaths) {\n    for (var i = 0; i < clipPaths.length; i++) {\n      var clipPath = clipPaths[i];\n      key.push(clipPath.id);\n    }\n  }\n\n  return key.join(',');\n}\n\nexport function hasClipPath(displayable) {\n  var clipPaths = displayable.__clipPaths;\n  return clipPaths && clipPaths.length > 0;\n}\n\nvar ClippathManager = function (_super) {\n  __extends(ClippathManager, _super);\n\n  function ClippathManager(zrId, svgRoot) {\n    var _this = _super.call(this, zrId, svgRoot, 'clipPath', '__clippath_in_use__') || this;\n\n    _this._refGroups = {};\n    _this._keyDuplicateCount = {};\n    return _this;\n  }\n\n  ClippathManager.prototype.markAllUnused = function () {\n    _super.prototype.markAllUnused.call(this);\n\n    var refGroups = this._refGroups;\n\n    for (var key in refGroups) {\n      if (refGroups.hasOwnProperty(key)) {\n        this.markDomUnused(refGroups[key]);\n      }\n    }\n\n    this._keyDuplicateCount = {};\n  };\n\n  ClippathManager.prototype._getClipPathGroup = function (displayable, prevDisplayable) {\n    if (!hasClipPath(displayable)) {\n      return;\n    }\n\n    var clipPaths = displayable.__clipPaths;\n    var keyDuplicateCount = this._keyDuplicateCount;\n    var clipPathKey = generateClipPathsKey(clipPaths);\n\n    if (isClipPathChanged(clipPaths, prevDisplayable && prevDisplayable.__clipPaths)) {\n      keyDuplicateCount[clipPathKey] = keyDuplicateCount[clipPathKey] || 0;\n      keyDuplicateCount[clipPathKey] && (clipPathKey += '-' + keyDuplicateCount[clipPathKey]);\n      keyDuplicateCount[clipPathKey]++;\n    }\n\n    return this._refGroups[clipPathKey] || (this._refGroups[clipPathKey] = this.createElement('g'));\n  };\n\n  ClippathManager.prototype.update = function (displayable, prevDisplayable) {\n    var clipGroup = this._getClipPathGroup(displayable, prevDisplayable);\n\n    if (clipGroup) {\n      this.markDomUsed(clipGroup);\n      this.updateDom(clipGroup, displayable.__clipPaths);\n    }\n\n    return clipGroup;\n  };\n\n  ;\n\n  ClippathManager.prototype.updateDom = function (parentEl, clipPaths) {\n    if (clipPaths && clipPaths.length > 0) {\n      var defs = this.getDefs(true);\n      var clipPath = clipPaths[0];\n      var clipPathEl = void 0;\n      var id = void 0;\n\n      if (clipPath._dom) {\n        id = clipPath._dom.getAttribute('id');\n        clipPathEl = clipPath._dom;\n\n        if (!defs.contains(clipPathEl)) {\n          defs.appendChild(clipPathEl);\n        }\n      } else {\n        id = 'zr' + this._zrId + '-clip-' + this.nextId;\n        ++this.nextId;\n        clipPathEl = this.createElement('clipPath');\n        clipPathEl.setAttribute('id', id);\n        defs.appendChild(clipPathEl);\n        clipPath._dom = clipPathEl;\n      }\n\n      var svgProxy = this.getSvgProxy(clipPath);\n      svgProxy.brush(clipPath);\n      var pathEl = this.getSvgElement(clipPath);\n      clipPathEl.innerHTML = '';\n      clipPathEl.appendChild(pathEl);\n      parentEl.setAttribute('clip-path', 'url(#' + id + ')');\n\n      if (clipPaths.length > 1) {\n        this.updateDom(clipPathEl, clipPaths.slice(1));\n      }\n    } else {\n      if (parentEl) {\n        parentEl.setAttribute('clip-path', 'none');\n      }\n    }\n  };\n\n  ;\n\n  ClippathManager.prototype.markUsed = function (displayable) {\n    var _this = this;\n\n    if (displayable.__clipPaths) {\n      zrUtil.each(displayable.__clipPaths, function (clipPath) {\n        if (clipPath._dom) {\n          _super.prototype.markDomUsed.call(_this, clipPath._dom);\n        }\n      });\n    }\n  };\n\n  ;\n\n  ClippathManager.prototype.removeUnused = function () {\n    _super.prototype.removeUnused.call(this);\n\n    var newRefGroupsMap = {};\n    var refGroups = this._refGroups;\n\n    for (var key in refGroups) {\n      if (refGroups.hasOwnProperty(key)) {\n        var group = refGroups[key];\n\n        if (!this.isDomUnused(group)) {\n          newRefGroupsMap[key] = group;\n        } else if (group.parentNode) {\n          group.parentNode.removeChild(group);\n        }\n      }\n    }\n\n    this._refGroups = newRefGroupsMap;\n  };\n\n  return ClippathManager;\n}(Definable);\n\nexport default ClippathManager;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/zrender/lib/svg/helper/ClippathManager.js"],"names":["__extends","Definable","zrUtil","isClipPathChanged","generateClipPathsKey","clipPaths","key","i","length","clipPath","push","id","join","hasClipPath","displayable","__clipPaths","ClippathManager","_super","zrId","svgRoot","_this","call","_refGroups","_keyDuplicateCount","prototype","markAllUnused","refGroups","hasOwnProperty","markDomUnused","_getClipPathGroup","prevDisplayable","keyDuplicateCount","clipPathKey","createElement","update","clipGroup","markDomUsed","updateDom","parentEl","defs","getDefs","clipPathEl","_dom","getAttribute","contains","appendChild","_zrId","nextId","setAttribute","svgProxy","getSvgProxy","brush","pathEl","getSvgElement","innerHTML","slice","markUsed","each","removeUnused","newRefGroupsMap","group","isDomUnused","parentNode","removeChild"],"mappings":"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","sourcesContent":["import { __extends } from \"tslib\";\nimport Definable from './Definable';\nimport * as zrUtil from '../../core/util';\nimport { isClipPathChanged } from '../../canvas/helper';\nfunction generateClipPathsKey(clipPaths) {\n    var key = [];\n    if (clipPaths) {\n        for (var i = 0; i < clipPaths.length; i++) {\n            var clipPath = clipPaths[i];\n            key.push(clipPath.id);\n        }\n    }\n    return key.join(',');\n}\nexport function hasClipPath(displayable) {\n    var clipPaths = displayable.__clipPaths;\n    return clipPaths && clipPaths.length > 0;\n}\nvar ClippathManager = (function (_super) {\n    __extends(ClippathManager, _super);\n    function ClippathManager(zrId, svgRoot) {\n        var _this = _super.call(this, zrId, svgRoot, 'clipPath', '__clippath_in_use__') || this;\n        _this._refGroups = {};\n        _this._keyDuplicateCount = {};\n        return _this;\n    }\n    ClippathManager.prototype.markAllUnused = function () {\n        _super.prototype.markAllUnused.call(this);\n        var refGroups = this._refGroups;\n        for (var key in refGroups) {\n            if (refGroups.hasOwnProperty(key)) {\n                this.markDomUnused(refGroups[key]);\n            }\n        }\n        this._keyDuplicateCount = {};\n    };\n    ClippathManager.prototype._getClipPathGroup = function (displayable, prevDisplayable) {\n        if (!hasClipPath(displayable)) {\n            return;\n        }\n        var clipPaths = displayable.__clipPaths;\n        var keyDuplicateCount = this._keyDuplicateCount;\n        var clipPathKey = generateClipPathsKey(clipPaths);\n        if (isClipPathChanged(clipPaths, prevDisplayable && prevDisplayable.__clipPaths)) {\n            keyDuplicateCount[clipPathKey] = keyDuplicateCount[clipPathKey] || 0;\n            keyDuplicateCount[clipPathKey] && (clipPathKey += '-' + keyDuplicateCount[clipPathKey]);\n            keyDuplicateCount[clipPathKey]++;\n        }\n        return this._refGroups[clipPathKey]\n            || (this._refGroups[clipPathKey] = this.createElement('g'));\n    };\n    ClippathManager.prototype.update = function (displayable, prevDisplayable) {\n        var clipGroup = this._getClipPathGroup(displayable, prevDisplayable);\n        if (clipGroup) {\n            this.markDomUsed(clipGroup);\n            this.updateDom(clipGroup, displayable.__clipPaths);\n        }\n        return clipGroup;\n    };\n    ;\n    ClippathManager.prototype.updateDom = function (parentEl, clipPaths) {\n        if (clipPaths && clipPaths.length > 0) {\n            var defs = this.getDefs(true);\n            var clipPath = clipPaths[0];\n            var clipPathEl = void 0;\n            var id = void 0;\n            if (clipPath._dom) {\n                id = clipPath._dom.getAttribute('id');\n                clipPathEl = clipPath._dom;\n                if (!defs.contains(clipPathEl)) {\n                    defs.appendChild(clipPathEl);\n                }\n            }\n            else {\n                id = 'zr' + this._zrId + '-clip-' + this.nextId;\n                ++this.nextId;\n                clipPathEl = this.createElement('clipPath');\n                clipPathEl.setAttribute('id', id);\n                defs.appendChild(clipPathEl);\n                clipPath._dom = clipPathEl;\n            }\n            var svgProxy = this.getSvgProxy(clipPath);\n            svgProxy.brush(clipPath);\n            var pathEl = this.getSvgElement(clipPath);\n            clipPathEl.innerHTML = '';\n            clipPathEl.appendChild(pathEl);\n            parentEl.setAttribute('clip-path', 'url(#' + id + ')');\n            if (clipPaths.length > 1) {\n                this.updateDom(clipPathEl, clipPaths.slice(1));\n            }\n        }\n        else {\n            if (parentEl) {\n                parentEl.setAttribute('clip-path', 'none');\n            }\n        }\n    };\n    ;\n    ClippathManager.prototype.markUsed = function (displayable) {\n        var _this = this;\n        if (displayable.__clipPaths) {\n            zrUtil.each(displayable.__clipPaths, function (clipPath) {\n                if (clipPath._dom) {\n                    _super.prototype.markDomUsed.call(_this, clipPath._dom);\n                }\n            });\n        }\n    };\n    ;\n    ClippathManager.prototype.removeUnused = function () {\n        _super.prototype.removeUnused.call(this);\n        var newRefGroupsMap = {};\n        var refGroups = this._refGroups;\n        for (var key in refGroups) {\n            if (refGroups.hasOwnProperty(key)) {\n                var group = refGroups[key];\n                if (!this.isDomUnused(group)) {\n                    newRefGroupsMap[key] = group;\n                }\n                else if (group.parentNode) {\n                    group.parentNode.removeChild(group);\n                }\n            }\n        }\n        this._refGroups = newRefGroupsMap;\n    };\n    return ClippathManager;\n}(Definable));\nexport default ClippathManager;\n"]},"metadata":{},"sourceType":"module"}