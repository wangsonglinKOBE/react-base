{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { trim, isArray, each, reduce } from 'zrender/lib/core/util';\nimport { retrieveVisualColorForTooltipMarker, createTooltipMarkup } from './tooltipMarkup';\nimport { retrieveRawValue } from '../../data/helper/dataProvider';\nimport { isNameSpecified } from '../../util/model';\nexport function defaultSeriesFormatTooltip(opt) {\n  var series = opt.series;\n  var dataIndex = opt.dataIndex;\n  var multipleSeries = opt.multipleSeries;\n  var data = series.getData();\n  var tooltipDims = data.mapDimensionsAll('defaultedTooltip');\n  var tooltipDimLen = tooltipDims.length;\n  var value = series.getRawValue(dataIndex);\n  var isValueArr = isArray(value);\n  var markerColor = retrieveVisualColorForTooltipMarker(series, dataIndex); // Complicated rule for pretty tooltip.\n\n  var inlineValue;\n  var inlineValueType;\n  var subBlocks;\n  var sortParam;\n\n  if (tooltipDimLen > 1 || isValueArr && !tooltipDimLen) {\n    var formatArrResult = formatTooltipArrayValue(value, series, dataIndex, tooltipDims, markerColor);\n    inlineValue = formatArrResult.inlineValues;\n    inlineValueType = formatArrResult.inlineValueTypes;\n    subBlocks = formatArrResult.blocks; // Only support tooltip sort by the first inline value. It's enough in most cases.\n\n    sortParam = formatArrResult.inlineValues[0];\n  } else if (tooltipDimLen) {\n    var dimInfo = data.getDimensionInfo(tooltipDims[0]);\n    sortParam = inlineValue = retrieveRawValue(data, dataIndex, tooltipDims[0]);\n    inlineValueType = dimInfo.type;\n  } else {\n    sortParam = inlineValue = isValueArr ? value[0] : value;\n  } // Do not show generated series name. It might not be readable.\n\n\n  var seriesNameSpecified = isNameSpecified(series);\n  var seriesName = seriesNameSpecified && series.name || '';\n  var itemName = data.getName(dataIndex);\n  var inlineName = multipleSeries ? seriesName : itemName;\n  return createTooltipMarkup('section', {\n    header: seriesName,\n    // When series name not specified, do not show a header line with only '-'.\n    // This case alway happen in tooltip.trigger: 'item'.\n    noHeader: multipleSeries || !seriesNameSpecified,\n    sortParam: sortParam,\n    blocks: [createTooltipMarkup('nameValue', {\n      markerType: 'item',\n      markerColor: markerColor,\n      // Do not mix display seriesName and itemName in one tooltip,\n      // which might confuses users.\n      name: inlineName,\n      // name dimension might be auto assigned, where the name might\n      // be not readable. So we check trim here.\n      noName: !trim(inlineName),\n      value: inlineValue,\n      valueType: inlineValueType\n    })].concat(subBlocks || [])\n  });\n}\n\nfunction formatTooltipArrayValue(value, series, dataIndex, tooltipDims, colorStr) {\n  // check: category-no-encode-has-axis-data in dataset.html\n  var data = series.getData();\n  var isValueMultipleLine = reduce(value, function (isValueMultipleLine, val, idx) {\n    var dimItem = data.getDimensionInfo(idx);\n    return isValueMultipleLine = isValueMultipleLine || dimItem && dimItem.tooltip !== false && dimItem.displayName != null;\n  }, false);\n  var inlineValues = [];\n  var inlineValueTypes = [];\n  var blocks = [];\n  tooltipDims.length ? each(tooltipDims, function (dim) {\n    setEachItem(retrieveRawValue(data, dataIndex, dim), dim);\n  }) // By default, all dims is used on tooltip.\n  : each(value, setEachItem);\n\n  function setEachItem(val, dim) {\n    var dimInfo = data.getDimensionInfo(dim); // If `dimInfo.tooltip` is not set, show tooltip.\n\n    if (!dimInfo || dimInfo.otherDims.tooltip === false) {\n      return;\n    }\n\n    if (isValueMultipleLine) {\n      blocks.push(createTooltipMarkup('nameValue', {\n        markerType: 'subItem',\n        markerColor: colorStr,\n        name: dimInfo.displayName,\n        value: val,\n        valueType: dimInfo.type\n      }));\n    } else {\n      inlineValues.push(val);\n      inlineValueTypes.push(dimInfo.type);\n    }\n  }\n\n  return {\n    inlineValues: inlineValues,\n    inlineValueTypes: inlineValueTypes,\n    blocks: blocks\n  };\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/component/tooltip/seriesFormatTooltip.js"],"names":["trim","isArray","each","reduce","retrieveVisualColorForTooltipMarker","createTooltipMarkup","retrieveRawValue","isNameSpecified","defaultSeriesFormatTooltip","opt","series","dataIndex","multipleSeries","data","getData","tooltipDims","mapDimensionsAll","tooltipDimLen","length","value","getRawValue","isValueArr","markerColor","inlineValue","inlineValueType","subBlocks","sortParam","formatArrResult","formatTooltipArrayValue","inlineValues","inlineValueTypes","blocks","dimInfo","getDimensionInfo","type","seriesNameSpecified","seriesName","name","itemName","getName","inlineName","header","noHeader","markerType","noName","valueType","concat","colorStr","isValueMultipleLine","val","idx","dimItem","tooltip","displayName","dim","setEachItem","otherDims","push"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,IAAT,EAAeC,OAAf,EAAwBC,IAAxB,EAA8BC,MAA9B,QAA4C,uBAA5C;AACA,SAASC,mCAAT,EAA8CC,mBAA9C,QAAyE,iBAAzE;AACA,SAASC,gBAAT,QAAiC,gCAAjC;AACA,SAASC,eAAT,QAAgC,kBAAhC;AACA,OAAO,SAASC,0BAAT,CAAoCC,GAApC,EAAyC;AAC9C,MAAIC,MAAM,GAAGD,GAAG,CAACC,MAAjB;AACA,MAAIC,SAAS,GAAGF,GAAG,CAACE,SAApB;AACA,MAAIC,cAAc,GAAGH,GAAG,CAACG,cAAzB;AACA,MAAIC,IAAI,GAAGH,MAAM,CAACI,OAAP,EAAX;AACA,MAAIC,WAAW,GAAGF,IAAI,CAACG,gBAAL,CAAsB,kBAAtB,CAAlB;AACA,MAAIC,aAAa,GAAGF,WAAW,CAACG,MAAhC;AACA,MAAIC,KAAK,GAAGT,MAAM,CAACU,WAAP,CAAmBT,SAAnB,CAAZ;AACA,MAAIU,UAAU,GAAGpB,OAAO,CAACkB,KAAD,CAAxB;AACA,MAAIG,WAAW,GAAGlB,mCAAmC,CAACM,MAAD,EAASC,SAAT,CAArD,CAT8C,CAS4B;;AAE1E,MAAIY,WAAJ;AACA,MAAIC,eAAJ;AACA,MAAIC,SAAJ;AACA,MAAIC,SAAJ;;AAEA,MAAIT,aAAa,GAAG,CAAhB,IAAqBI,UAAU,IAAI,CAACJ,aAAxC,EAAuD;AACrD,QAAIU,eAAe,GAAGC,uBAAuB,CAACT,KAAD,EAAQT,MAAR,EAAgBC,SAAhB,EAA2BI,WAA3B,EAAwCO,WAAxC,CAA7C;AACAC,IAAAA,WAAW,GAAGI,eAAe,CAACE,YAA9B;AACAL,IAAAA,eAAe,GAAGG,eAAe,CAACG,gBAAlC;AACAL,IAAAA,SAAS,GAAGE,eAAe,CAACI,MAA5B,CAJqD,CAIjB;;AAEpCL,IAAAA,SAAS,GAAGC,eAAe,CAACE,YAAhB,CAA6B,CAA7B,CAAZ;AACD,GAPD,MAOO,IAAIZ,aAAJ,EAAmB;AACxB,QAAIe,OAAO,GAAGnB,IAAI,CAACoB,gBAAL,CAAsBlB,WAAW,CAAC,CAAD,CAAjC,CAAd;AACAW,IAAAA,SAAS,GAAGH,WAAW,GAAGjB,gBAAgB,CAACO,IAAD,EAAOF,SAAP,EAAkBI,WAAW,CAAC,CAAD,CAA7B,CAA1C;AACAS,IAAAA,eAAe,GAAGQ,OAAO,CAACE,IAA1B;AACD,GAJM,MAIA;AACLR,IAAAA,SAAS,GAAGH,WAAW,GAAGF,UAAU,GAAGF,KAAK,CAAC,CAAD,CAAR,GAAcA,KAAlD;AACD,GA7B6C,CA6B5C;;;AAGF,MAAIgB,mBAAmB,GAAG5B,eAAe,CAACG,MAAD,CAAzC;AACA,MAAI0B,UAAU,GAAGD,mBAAmB,IAAIzB,MAAM,CAAC2B,IAA9B,IAAsC,EAAvD;AACA,MAAIC,QAAQ,GAAGzB,IAAI,CAAC0B,OAAL,CAAa5B,SAAb,CAAf;AACA,MAAI6B,UAAU,GAAG5B,cAAc,GAAGwB,UAAH,GAAgBE,QAA/C;AACA,SAAOjC,mBAAmB,CAAC,SAAD,EAAY;AACpCoC,IAAAA,MAAM,EAAEL,UAD4B;AAEpC;AACA;AACAM,IAAAA,QAAQ,EAAE9B,cAAc,IAAI,CAACuB,mBAJO;AAKpCT,IAAAA,SAAS,EAAEA,SALyB;AAMpCK,IAAAA,MAAM,EAAE,CAAC1B,mBAAmB,CAAC,WAAD,EAAc;AACxCsC,MAAAA,UAAU,EAAE,MAD4B;AAExCrB,MAAAA,WAAW,EAAEA,WAF2B;AAGxC;AACA;AACAe,MAAAA,IAAI,EAAEG,UALkC;AAMxC;AACA;AACAI,MAAAA,MAAM,EAAE,CAAC5C,IAAI,CAACwC,UAAD,CAR2B;AASxCrB,MAAAA,KAAK,EAAEI,WATiC;AAUxCsB,MAAAA,SAAS,EAAErB;AAV6B,KAAd,CAApB,EAWJsB,MAXI,CAWGrB,SAAS,IAAI,EAXhB;AAN4B,GAAZ,CAA1B;AAmBD;;AAED,SAASG,uBAAT,CAAiCT,KAAjC,EAAwCT,MAAxC,EAAgDC,SAAhD,EAA2DI,WAA3D,EAAwEgC,QAAxE,EAAkF;AAChF;AACA,MAAIlC,IAAI,GAAGH,MAAM,CAACI,OAAP,EAAX;AACA,MAAIkC,mBAAmB,GAAG7C,MAAM,CAACgB,KAAD,EAAQ,UAAU6B,mBAAV,EAA+BC,GAA/B,EAAoCC,GAApC,EAAyC;AAC/E,QAAIC,OAAO,GAAGtC,IAAI,CAACoB,gBAAL,CAAsBiB,GAAtB,CAAd;AACA,WAAOF,mBAAmB,GAAGA,mBAAmB,IAAIG,OAAO,IAAIA,OAAO,CAACC,OAAR,KAAoB,KAA/B,IAAwCD,OAAO,CAACE,WAAR,IAAuB,IAAnH;AACD,GAH+B,EAG7B,KAH6B,CAAhC;AAIA,MAAIxB,YAAY,GAAG,EAAnB;AACA,MAAIC,gBAAgB,GAAG,EAAvB;AACA,MAAIC,MAAM,GAAG,EAAb;AACAhB,EAAAA,WAAW,CAACG,MAAZ,GAAqBhB,IAAI,CAACa,WAAD,EAAc,UAAUuC,GAAV,EAAe;AACpDC,IAAAA,WAAW,CAACjD,gBAAgB,CAACO,IAAD,EAAOF,SAAP,EAAkB2C,GAAlB,CAAjB,EAAyCA,GAAzC,CAAX;AACD,GAFwB,CAAzB,CAEG;AAFH,IAGEpD,IAAI,CAACiB,KAAD,EAAQoC,WAAR,CAHN;;AAKA,WAASA,WAAT,CAAqBN,GAArB,EAA0BK,GAA1B,EAA+B;AAC7B,QAAItB,OAAO,GAAGnB,IAAI,CAACoB,gBAAL,CAAsBqB,GAAtB,CAAd,CAD6B,CACa;;AAE1C,QAAI,CAACtB,OAAD,IAAYA,OAAO,CAACwB,SAAR,CAAkBJ,OAAlB,KAA8B,KAA9C,EAAqD;AACnD;AACD;;AAED,QAAIJ,mBAAJ,EAAyB;AACvBjB,MAAAA,MAAM,CAAC0B,IAAP,CAAYpD,mBAAmB,CAAC,WAAD,EAAc;AAC3CsC,QAAAA,UAAU,EAAE,SAD+B;AAE3CrB,QAAAA,WAAW,EAAEyB,QAF8B;AAG3CV,QAAAA,IAAI,EAAEL,OAAO,CAACqB,WAH6B;AAI3ClC,QAAAA,KAAK,EAAE8B,GAJoC;AAK3CJ,QAAAA,SAAS,EAAEb,OAAO,CAACE;AALwB,OAAd,CAA/B;AAOD,KARD,MAQO;AACLL,MAAAA,YAAY,CAAC4B,IAAb,CAAkBR,GAAlB;AACAnB,MAAAA,gBAAgB,CAAC2B,IAAjB,CAAsBzB,OAAO,CAACE,IAA9B;AACD;AACF;;AAED,SAAO;AACLL,IAAAA,YAAY,EAAEA,YADT;AAELC,IAAAA,gBAAgB,EAAEA,gBAFb;AAGLC,IAAAA,MAAM,EAAEA;AAHH,GAAP;AAKD","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { trim, isArray, each, reduce } from 'zrender/lib/core/util';\nimport { retrieveVisualColorForTooltipMarker, createTooltipMarkup } from './tooltipMarkup';\nimport { retrieveRawValue } from '../../data/helper/dataProvider';\nimport { isNameSpecified } from '../../util/model';\nexport function defaultSeriesFormatTooltip(opt) {\n  var series = opt.series;\n  var dataIndex = opt.dataIndex;\n  var multipleSeries = opt.multipleSeries;\n  var data = series.getData();\n  var tooltipDims = data.mapDimensionsAll('defaultedTooltip');\n  var tooltipDimLen = tooltipDims.length;\n  var value = series.getRawValue(dataIndex);\n  var isValueArr = isArray(value);\n  var markerColor = retrieveVisualColorForTooltipMarker(series, dataIndex); // Complicated rule for pretty tooltip.\n\n  var inlineValue;\n  var inlineValueType;\n  var subBlocks;\n  var sortParam;\n\n  if (tooltipDimLen > 1 || isValueArr && !tooltipDimLen) {\n    var formatArrResult = formatTooltipArrayValue(value, series, dataIndex, tooltipDims, markerColor);\n    inlineValue = formatArrResult.inlineValues;\n    inlineValueType = formatArrResult.inlineValueTypes;\n    subBlocks = formatArrResult.blocks; // Only support tooltip sort by the first inline value. It's enough in most cases.\n\n    sortParam = formatArrResult.inlineValues[0];\n  } else if (tooltipDimLen) {\n    var dimInfo = data.getDimensionInfo(tooltipDims[0]);\n    sortParam = inlineValue = retrieveRawValue(data, dataIndex, tooltipDims[0]);\n    inlineValueType = dimInfo.type;\n  } else {\n    sortParam = inlineValue = isValueArr ? value[0] : value;\n  } // Do not show generated series name. It might not be readable.\n\n\n  var seriesNameSpecified = isNameSpecified(series);\n  var seriesName = seriesNameSpecified && series.name || '';\n  var itemName = data.getName(dataIndex);\n  var inlineName = multipleSeries ? seriesName : itemName;\n  return createTooltipMarkup('section', {\n    header: seriesName,\n    // When series name not specified, do not show a header line with only '-'.\n    // This case alway happen in tooltip.trigger: 'item'.\n    noHeader: multipleSeries || !seriesNameSpecified,\n    sortParam: sortParam,\n    blocks: [createTooltipMarkup('nameValue', {\n      markerType: 'item',\n      markerColor: markerColor,\n      // Do not mix display seriesName and itemName in one tooltip,\n      // which might confuses users.\n      name: inlineName,\n      // name dimension might be auto assigned, where the name might\n      // be not readable. So we check trim here.\n      noName: !trim(inlineName),\n      value: inlineValue,\n      valueType: inlineValueType\n    })].concat(subBlocks || [])\n  });\n}\n\nfunction formatTooltipArrayValue(value, series, dataIndex, tooltipDims, colorStr) {\n  // check: category-no-encode-has-axis-data in dataset.html\n  var data = series.getData();\n  var isValueMultipleLine = reduce(value, function (isValueMultipleLine, val, idx) {\n    var dimItem = data.getDimensionInfo(idx);\n    return isValueMultipleLine = isValueMultipleLine || dimItem && dimItem.tooltip !== false && dimItem.displayName != null;\n  }, false);\n  var inlineValues = [];\n  var inlineValueTypes = [];\n  var blocks = [];\n  tooltipDims.length ? each(tooltipDims, function (dim) {\n    setEachItem(retrieveRawValue(data, dataIndex, dim), dim);\n  }) // By default, all dims is used on tooltip.\n  : each(value, setEachItem);\n\n  function setEachItem(val, dim) {\n    var dimInfo = data.getDimensionInfo(dim); // If `dimInfo.tooltip` is not set, show tooltip.\n\n    if (!dimInfo || dimInfo.otherDims.tooltip === false) {\n      return;\n    }\n\n    if (isValueMultipleLine) {\n      blocks.push(createTooltipMarkup('nameValue', {\n        markerType: 'subItem',\n        markerColor: colorStr,\n        name: dimInfo.displayName,\n        value: val,\n        valueType: dimInfo.type\n      }));\n    } else {\n      inlineValues.push(val);\n      inlineValueTypes.push(dimInfo.type);\n    }\n  }\n\n  return {\n    inlineValues: inlineValues,\n    inlineValueTypes: inlineValueTypes,\n    blocks: blocks\n  };\n}"]},"metadata":{},"sourceType":"module"}