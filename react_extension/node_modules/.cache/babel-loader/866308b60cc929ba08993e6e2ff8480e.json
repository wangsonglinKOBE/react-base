{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u684C\\u9762\\\\react\\u57FA\\u7840\\u539F\\u7406\\u5206\\u6790\\\\react_extension\\\\src\\\\components\\\\001_hooks\\u521D\\u8BC6\\\\index.jsx\";\nimport React, { Component, createContext } from 'react'; // 创建一个Context对象\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst AppContext = /*#__PURE__*/createContext(); // 最外层组件(祖父组件) App \n\nconst App = () => {\n  return /*#__PURE__*/_jsxDEV(Middle, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 9,\n    columnNumber: 9\n  }, this);\n}; // 父组件 Middle\n\n\n_c = App;\n\nconst Middle = () => {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [\" \", /*#__PURE__*/_jsxDEV(Foo, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 16\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Bar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 24\n    }, this), \" \", /*#__PURE__*/_jsxDEV(Baz, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 32\n    }, this), \" \"]\n  }, void 0, true);\n}; // 类 孙子 组件 Foo\n\n\n_c2 = Middle;\n\nclass Foo extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"foo\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 17\n    }, this);\n  }\n\n} // 类 孙子 组件 Bar\n\n\nclass Bar extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"bar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 17\n    }, this);\n  }\n\n} // 函数 孙子 组件 Baz\n\n\nconst Baz = () => {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"baz\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 13\n  }, this);\n};\n\n_c3 = Baz;\nexport default App; // const FriendStatus = props => {\n//     // 调用自定义的HOOK => useExample\n//     const isOnline = useExample(props.friend.id)\n//     if (isOnline === null) {\n//         return 'Loading...'\n//     }\n//     return isOnline ? 'Online' : 'Offline'\n// }\n// const FriendListItem = props => {\n//     // 调用自定义的HOOK => useExample\n//     const isOnline = useExample(props.friend.id)\n//     return (\n//         <li style={{color: isOnline ? 'green' : 'black'}}>\n//             {props.friend.name}\n//         </li>\n//     )\n// }\n// export default FriendListItem\n// export const useExample = friendID => {\n//     const [isOnline, setIsOnline] = useState(null)\n//     handleStatusChange = status => {\n//         setIsOnline(status.isOnline)\n//     }\n//     useEffect(() => {\n//         ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange)\n//         return () => {\n//             ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);\n//         }\n//     })\n//     return isOnline\n// }\n// export default function Example(props) {\n//     const [count, setCount] = useState(0)\n//     useEffect(() => {\n//         document.title = `你点击了 ${count} 次按钮`\n//     })\n//     const [isOnline, setIsOnline] = useState(null)\n//     useEffect(() => {\n//         ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange)\n//         return () => {\n//             ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange)\n//         }\n//     })\n//     handleStatusChange = status => {\n//         setIsOnline(status.isOnline)\n//     }\n//     return (\n//         <div>\n//             <p>你点击了 {count} 次按钮</p>\n//             <button onClick={() => setCount(count + 1)} > 点我 </button>\n//         </div>\n//     )\n// }\n// export default function Example(props) {\n//     const [isOnline, setIsOnline] = useState(null)\n//     handleStatusChange = status => {\n//         setIsOnline(status.isOnline)\n//     }\n//     useEffect(() => {\n//         ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange)\n//         return () => {\n//             ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange)\n//         }\n//     }, [props.friend.id])\n//     if (isOnline === null) {\n//         return 'Loading...'\n//     }\n//     return isOnline ? 'Online' : 'Offline'\n// }\n// export default function Example() {\n//     const [count, setCount] = useState(0)\n//     // 相当于 componentDidMount 和 componentDidUpdate\n//     useEffect(() => {\n//         // 使用浏览器的API更新页面标题\n//         document.title = `你点击了 ${count} 次按钮`\n//     })\n//     return (\n//         <div>\n//             <p>你点击了 {count} 次按钮</p>\n//             <button onClick={() => setCount(count + 1)} > 点我 </button>\n//         </div>\n//     )\n// }\n// export default function Example() {\n//     // 声明一个新的 \"state\"变量 “count” \n//     const [count, setCount] = useState(0)\n//     return (\n//         <div>\n//             <p>你点击了 {count} 次按钮</p>\n//             <button onClick={() => setCount(count + 1)} > 点我 </button>\n//         </div>\n//     )\n// }\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"Middle\");\n$RefreshReg$(_c3, \"Baz\");","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/src/components/001_hooks初识/index.jsx"],"names":["React","Component","createContext","AppContext","App","Middle","Foo","render","Bar","Baz"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD,C,CAEA;;;;AACA,MAAMC,UAAU,gBAAGD,aAAa,EAAhC,C,CAEA;;AACA,MAAME,GAAG,GAAG,MAAM;AACd,sBACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAJD,C,CAMA;;;KANMA,G;;AAON,MAAMC,MAAM,GAAG,MAAM;AACjB,sBAAQ;AAAA,iCAAG,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,YAAH,oBAAW,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,YAAX,oBAAmB,QAAC,GAAD;AAAA;AAAA;AAAA;AAAA,YAAnB;AAAA,kBAAR;AACH,CAFD,C,CAIA;;;MAJMA,M;;AAKN,MAAMC,GAAN,SAAkBL,SAAlB,CAA4B;AACxBM,EAAAA,MAAM,GAAG;AACL,wBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AACH;;AAHuB,C,CAM5B;;;AACA,MAAMC,GAAN,SAAkBP,SAAlB,CAA4B;AACxBM,EAAAA,MAAM,GAAG;AACL,wBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAR;AACH;;AAHuB,C,CAM5B;;;AACA,MAAME,GAAG,GAAG,MAAM;AACd,sBAAQ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAR;AACH,CAFD;;MAAMA,G;AAGN,eAAeL,GAAf,C,CAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import React, { Component, createContext } from 'react'\r\n\r\n// 创建一个Context对象\r\nconst AppContext = createContext()\r\n\r\n// 最外层组件(祖父组件) App \r\nconst App = () => {\r\n    return (\r\n        <Middle />\r\n    )\r\n}\r\n\r\n// 父组件 Middle\r\nconst Middle = () => {\r\n    return (<> <Foo /> <Bar /> <Baz /> </>)\r\n}\r\n\r\n// 类 孙子 组件 Foo\r\nclass Foo extends Component {\r\n    render() {\r\n        return (<div>foo</div>)\r\n    }\r\n}\r\n\r\n// 类 孙子 组件 Bar\r\nclass Bar extends Component {\r\n    render() {\r\n        return (<div>bar</div>)\r\n    }\r\n}\r\n\r\n// 函数 孙子 组件 Baz\r\nconst Baz = () => {\r\n    return (<div>baz</div>)\r\n}\r\nexport default App\r\n\r\n// const FriendStatus = props => {\r\n//     // 调用自定义的HOOK => useExample\r\n//     const isOnline = useExample(props.friend.id)\r\n\r\n//     if (isOnline === null) {\r\n//         return 'Loading...'\r\n//     }\r\n//     return isOnline ? 'Online' : 'Offline'\r\n// }\r\n\r\n// const FriendListItem = props => {\r\n//     // 调用自定义的HOOK => useExample\r\n//     const isOnline = useExample(props.friend.id)\r\n\r\n//     return (\r\n//         <li style={{color: isOnline ? 'green' : 'black'}}>\r\n//             {props.friend.name}\r\n//         </li>\r\n//     )\r\n// }\r\n\r\n// export default FriendListItem\r\n\r\n// export const useExample = friendID => {\r\n//     const [isOnline, setIsOnline] = useState(null)\r\n//     handleStatusChange = status => {\r\n//         setIsOnline(status.isOnline)\r\n//     }\r\n\r\n//     useEffect(() => {\r\n//         ChatAPI.subscribeToFriendStatus(friendID, handleStatusChange)\r\n//         return () => {\r\n//             ChatAPI.unsubscribeFromFriendStatus(friendID, handleStatusChange);\r\n//         }\r\n//     })\r\n//     return isOnline\r\n// }\r\n\r\n// export default function Example(props) {\r\n\r\n//     const [count, setCount] = useState(0)\r\n//     useEffect(() => {\r\n//         document.title = `你点击了 ${count} 次按钮`\r\n//     })\r\n\r\n//     const [isOnline, setIsOnline] = useState(null)\r\n//     useEffect(() => {\r\n//         ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange)\r\n//         return () => {\r\n//             ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange)\r\n//         }\r\n//     })\r\n\r\n//     handleStatusChange = status => {\r\n//         setIsOnline(status.isOnline)\r\n//     }\r\n\r\n//     return (\r\n//         <div>\r\n//             <p>你点击了 {count} 次按钮</p>\r\n//             <button onClick={() => setCount(count + 1)} > 点我 </button>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default function Example(props) {\r\n//     const [isOnline, setIsOnline] = useState(null)\r\n\r\n//     handleStatusChange = status => {\r\n//         setIsOnline(status.isOnline)\r\n//     }\r\n\r\n//     useEffect(() => {\r\n//         ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange)\r\n//         return () => {\r\n//             ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange)\r\n//         }\r\n//     }, [props.friend.id])\r\n\r\n//     if (isOnline === null) {\r\n//         return 'Loading...'\r\n//     }\r\n\r\n//     return isOnline ? 'Online' : 'Offline'\r\n// }\r\n\r\n// export default function Example() {\r\n//     const [count, setCount] = useState(0)\r\n\r\n//     // 相当于 componentDidMount 和 componentDidUpdate\r\n//     useEffect(() => {\r\n//         // 使用浏览器的API更新页面标题\r\n//         document.title = `你点击了 ${count} 次按钮`\r\n//     })\r\n\r\n//     return (\r\n//         <div>\r\n//             <p>你点击了 {count} 次按钮</p>\r\n//             <button onClick={() => setCount(count + 1)} > 点我 </button>\r\n//         </div>\r\n//     )\r\n// }\r\n\r\n// export default function Example() {\r\n\r\n//     // 声明一个新的 \"state\"变量 “count” \r\n//     const [count, setCount] = useState(0)\r\n//     return (\r\n//         <div>\r\n//             <p>你点击了 {count} 次按钮</p>\r\n//             <button onClick={() => setCount(count + 1)} > 点我 </button>\r\n//         </div>\r\n//     )\r\n// }\r\n"]},"metadata":{},"sourceType":"module"}