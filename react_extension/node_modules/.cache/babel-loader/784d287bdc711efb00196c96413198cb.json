{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport * as graphic from '../../util/graphic';\nimport AxisBuilder from './AxisBuilder';\nimport AxisView from './AxisView';\nimport * as cartesianAxisHelper from '../../coord/cartesian/cartesianAxisHelper';\nimport { rectCoordAxisBuildSplitArea, rectCoordAxisHandleRemove } from './axisSplitHelper';\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttrs = ['splitArea', 'splitLine', 'minorSplitLine'];\n\nvar CartesianAxisView =\n/** @class */\nfunction (_super) {\n  __extends(CartesianAxisView, _super);\n\n  function CartesianAxisView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CartesianAxisView.type;\n    _this.axisPointerClass = 'CartesianAxisPointer';\n    return _this;\n  }\n  /**\n   * @override\n   */\n\n\n  CartesianAxisView.prototype.render = function (axisModel, ecModel, api, payload) {\n    this.group.removeAll();\n    var oldAxisGroup = this._axisGroup;\n    this._axisGroup = new graphic.Group();\n    this.group.add(this._axisGroup);\n\n    if (!axisModel.get('show')) {\n      return;\n    }\n\n    var gridModel = axisModel.getCoordSysModel();\n    var layout = cartesianAxisHelper.layout(gridModel, axisModel);\n    var axisBuilder = new AxisBuilder(axisModel, zrUtil.extend({\n      handleAutoShown: function (elementType) {\n        var cartesians = gridModel.coordinateSystem.getCartesians();\n\n        for (var i = 0; i < cartesians.length; i++) {\n          var otherAxisType = cartesians[i].getOtherAxis(axisModel.axis).type;\n\n          if (otherAxisType === 'value' || otherAxisType === 'log') {\n            // Still show axis tick or axisLine if other axis is value / log\n            return true;\n          }\n        } // Not show axisTick or axisLine if other axis is category / time\n\n\n        return false;\n      }\n    }, layout));\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n\n    this._axisGroup.add(axisBuilder.getGroup());\n\n    zrUtil.each(selfBuilderAttrs, function (name) {\n      if (axisModel.get([name, 'show'])) {\n        axisElementBuilders[name](this, this._axisGroup, axisModel, gridModel);\n      }\n    }, this); // THIS is a special case for bar racing chart.\n    // Update the axis label from the natural initial layout to\n    // sorted layout should has no animation.\n\n    var isInitialSortFromBarRacing = payload && payload.type === 'changeAxisOrder' && payload.isInitSort;\n\n    if (!isInitialSortFromBarRacing) {\n      graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n    }\n\n    _super.prototype.render.call(this, axisModel, ecModel, api, payload);\n  };\n\n  CartesianAxisView.prototype.remove = function () {\n    rectCoordAxisHandleRemove(this);\n  };\n\n  CartesianAxisView.type = 'cartesianAxis';\n  return CartesianAxisView;\n}(AxisView);\n\nvar axisElementBuilders = {\n  splitLine: function (axisView, axisGroup, axisModel, gridModel) {\n    var axis = axisModel.axis;\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitLineModel = axisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];\n    var gridRect = gridModel.coordinateSystem.getRect();\n    var isHorizontal = axis.isHorizontal();\n    var lineCount = 0;\n    var ticksCoords = axis.getTicksCoords({\n      tickModel: splitLineModel\n    });\n    var p1 = [];\n    var p2 = [];\n    var lineStyle = lineStyleModel.getLineStyle();\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);\n\n      if (isHorizontal) {\n        p1[0] = tickCoord;\n        p1[1] = gridRect.y;\n        p2[0] = tickCoord;\n        p2[1] = gridRect.y + gridRect.height;\n      } else {\n        p1[0] = gridRect.x;\n        p1[1] = tickCoord;\n        p2[0] = gridRect.x + gridRect.width;\n        p2[1] = tickCoord;\n      }\n\n      var colorIndex = lineCount++ % lineColors.length;\n      var tickValue = ticksCoords[i].tickValue;\n      axisGroup.add(new graphic.Line({\n        anid: tickValue != null ? 'line_' + ticksCoords[i].tickValue : null,\n        subPixelOptimize: true,\n        autoBatch: true,\n        shape: {\n          x1: p1[0],\n          y1: p1[1],\n          x2: p2[0],\n          y2: p2[1]\n        },\n        style: zrUtil.defaults({\n          stroke: lineColors[colorIndex]\n        }, lineStyle),\n        silent: true\n      }));\n    }\n  },\n  minorSplitLine: function (axisView, axisGroup, axisModel, gridModel) {\n    var axis = axisModel.axis;\n    var minorSplitLineModel = axisModel.getModel('minorSplitLine');\n    var lineStyleModel = minorSplitLineModel.getModel('lineStyle');\n    var gridRect = gridModel.coordinateSystem.getRect();\n    var isHorizontal = axis.isHorizontal();\n    var minorTicksCoords = axis.getMinorTicksCoords();\n\n    if (!minorTicksCoords.length) {\n      return;\n    }\n\n    var p1 = [];\n    var p2 = [];\n    var lineStyle = lineStyleModel.getLineStyle();\n\n    for (var i = 0; i < minorTicksCoords.length; i++) {\n      for (var k = 0; k < minorTicksCoords[i].length; k++) {\n        var tickCoord = axis.toGlobalCoord(minorTicksCoords[i][k].coord);\n\n        if (isHorizontal) {\n          p1[0] = tickCoord;\n          p1[1] = gridRect.y;\n          p2[0] = tickCoord;\n          p2[1] = gridRect.y + gridRect.height;\n        } else {\n          p1[0] = gridRect.x;\n          p1[1] = tickCoord;\n          p2[0] = gridRect.x + gridRect.width;\n          p2[1] = tickCoord;\n        }\n\n        axisGroup.add(new graphic.Line({\n          anid: 'minor_line_' + minorTicksCoords[i][k].tickValue,\n          subPixelOptimize: true,\n          autoBatch: true,\n          shape: {\n            x1: p1[0],\n            y1: p1[1],\n            x2: p2[0],\n            y2: p2[1]\n          },\n          style: lineStyle,\n          silent: true\n        }));\n      }\n    }\n  },\n  splitArea: function (axisView, axisGroup, axisModel, gridModel) {\n    rectCoordAxisBuildSplitArea(axisView, axisGroup, axisModel, gridModel);\n  }\n};\n\nvar CartesianXAxisView =\n/** @class */\nfunction (_super) {\n  __extends(CartesianXAxisView, _super);\n\n  function CartesianXAxisView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CartesianXAxisView.type;\n    return _this;\n  }\n\n  CartesianXAxisView.type = 'xAxis';\n  return CartesianXAxisView;\n}(CartesianAxisView);\n\nexport { CartesianXAxisView };\n\nvar CartesianYAxisView =\n/** @class */\nfunction (_super) {\n  __extends(CartesianYAxisView, _super);\n\n  function CartesianYAxisView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CartesianXAxisView.type;\n    return _this;\n  }\n\n  CartesianYAxisView.type = 'yAxis';\n  return CartesianYAxisView;\n}(CartesianAxisView);\n\nexport { CartesianYAxisView };\nexport default CartesianAxisView;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/component/axis/CartesianAxisView.js"],"names":["__extends","zrUtil","graphic","AxisBuilder","AxisView","cartesianAxisHelper","rectCoordAxisBuildSplitArea","rectCoordAxisHandleRemove","axisBuilderAttrs","selfBuilderAttrs","CartesianAxisView","_super","_this","apply","arguments","type","axisPointerClass","prototype","render","axisModel","ecModel","api","payload","group","removeAll","oldAxisGroup","_axisGroup","Group","add","get","gridModel","getCoordSysModel","layout","axisBuilder","extend","handleAutoShown","elementType","cartesians","coordinateSystem","getCartesians","i","length","otherAxisType","getOtherAxis","axis","each","getGroup","name","axisElementBuilders","isInitialSortFromBarRacing","isInitSort","groupTransition","call","remove","splitLine","axisView","axisGroup","scale","isBlank","splitLineModel","getModel","lineStyleModel","lineColors","isArray","gridRect","getRect","isHorizontal","lineCount","ticksCoords","getTicksCoords","tickModel","p1","p2","lineStyle","getLineStyle","tickCoord","toGlobalCoord","coord","y","height","x","width","colorIndex","tickValue","Line","anid","subPixelOptimize","autoBatch","shape","x1","y1","x2","y2","style","defaults","stroke","silent","minorSplitLine","minorSplitLineModel","minorTicksCoords","getMinorTicksCoords","k","splitArea","CartesianXAxisView","CartesianYAxisView"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,oBAAzB;AACA,OAAOC,WAAP,MAAwB,eAAxB;AACA,OAAOC,QAAP,MAAqB,YAArB;AACA,OAAO,KAAKC,mBAAZ,MAAqC,2CAArC;AACA,SAASC,2BAAT,EAAsCC,yBAAtC,QAAuE,mBAAvE;AACA,IAAIC,gBAAgB,GAAG,CAAC,UAAD,EAAa,eAAb,EAA8B,UAA9B,CAAvB;AACA,IAAIC,gBAAgB,GAAG,CAAC,WAAD,EAAc,WAAd,EAA2B,gBAA3B,CAAvB;;AAEA,IAAIC,iBAAiB;AACrB;AACA,UAAUC,MAAV,EAAkB;AAChBX,EAAAA,SAAS,CAACU,iBAAD,EAAoBC,MAApB,CAAT;;AAEA,WAASD,iBAAT,GAA6B;AAC3B,QAAIE,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAAhE;;AAEAF,IAAAA,KAAK,CAACG,IAAN,GAAaL,iBAAiB,CAACK,IAA/B;AACAH,IAAAA,KAAK,CAACI,gBAAN,GAAyB,sBAAzB;AACA,WAAOJ,KAAP;AACD;AACD;AACF;AACA;;;AAGEF,EAAAA,iBAAiB,CAACO,SAAlB,CAA4BC,MAA5B,GAAqC,UAAUC,SAAV,EAAqBC,OAArB,EAA8BC,GAA9B,EAAmCC,OAAnC,EAA4C;AAC/E,SAAKC,KAAL,CAAWC,SAAX;AACA,QAAIC,YAAY,GAAG,KAAKC,UAAxB;AACA,SAAKA,UAAL,GAAkB,IAAIxB,OAAO,CAACyB,KAAZ,EAAlB;AACA,SAAKJ,KAAL,CAAWK,GAAX,CAAe,KAAKF,UAApB;;AAEA,QAAI,CAACP,SAAS,CAACU,GAAV,CAAc,MAAd,CAAL,EAA4B;AAC1B;AACD;;AAED,QAAIC,SAAS,GAAGX,SAAS,CAACY,gBAAV,EAAhB;AACA,QAAIC,MAAM,GAAG3B,mBAAmB,CAAC2B,MAApB,CAA2BF,SAA3B,EAAsCX,SAAtC,CAAb;AACA,QAAIc,WAAW,GAAG,IAAI9B,WAAJ,CAAgBgB,SAAhB,EAA2BlB,MAAM,CAACiC,MAAP,CAAc;AACzDC,MAAAA,eAAe,EAAE,UAAUC,WAAV,EAAuB;AACtC,YAAIC,UAAU,GAAGP,SAAS,CAACQ,gBAAV,CAA2BC,aAA3B,EAAjB;;AAEA,aAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,UAAU,CAACI,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,cAAIE,aAAa,GAAGL,UAAU,CAACG,CAAD,CAAV,CAAcG,YAAd,CAA2BxB,SAAS,CAACyB,IAArC,EAA2C7B,IAA/D;;AAEA,cAAI2B,aAAa,KAAK,OAAlB,IAA6BA,aAAa,KAAK,KAAnD,EAA0D;AACxD;AACA,mBAAO,IAAP;AACD;AACF,SAVqC,CAUpC;;;AAGF,eAAO,KAAP;AACD;AAfwD,KAAd,EAgB1CV,MAhB0C,CAA3B,CAAlB;AAiBA/B,IAAAA,MAAM,CAAC4C,IAAP,CAAYrC,gBAAZ,EAA8ByB,WAAW,CAACL,GAA1C,EAA+CK,WAA/C;;AAEA,SAAKP,UAAL,CAAgBE,GAAhB,CAAoBK,WAAW,CAACa,QAAZ,EAApB;;AAEA7C,IAAAA,MAAM,CAAC4C,IAAP,CAAYpC,gBAAZ,EAA8B,UAAUsC,IAAV,EAAgB;AAC5C,UAAI5B,SAAS,CAACU,GAAV,CAAc,CAACkB,IAAD,EAAO,MAAP,CAAd,CAAJ,EAAmC;AACjCC,QAAAA,mBAAmB,CAACD,IAAD,CAAnB,CAA0B,IAA1B,EAAgC,KAAKrB,UAArC,EAAiDP,SAAjD,EAA4DW,SAA5D;AACD;AACF,KAJD,EAIG,IAJH,EAjC+E,CAqCrE;AACV;AACA;;AAEA,QAAImB,0BAA0B,GAAG3B,OAAO,IAAIA,OAAO,CAACP,IAAR,KAAiB,iBAA5B,IAAiDO,OAAO,CAAC4B,UAA1F;;AAEA,QAAI,CAACD,0BAAL,EAAiC;AAC/B/C,MAAAA,OAAO,CAACiD,eAAR,CAAwB1B,YAAxB,EAAsC,KAAKC,UAA3C,EAAuDP,SAAvD;AACD;;AAEDR,IAAAA,MAAM,CAACM,SAAP,CAAiBC,MAAjB,CAAwBkC,IAAxB,CAA6B,IAA7B,EAAmCjC,SAAnC,EAA8CC,OAA9C,EAAuDC,GAAvD,EAA4DC,OAA5D;AACD,GAhDD;;AAkDAZ,EAAAA,iBAAiB,CAACO,SAAlB,CAA4BoC,MAA5B,GAAqC,YAAY;AAC/C9C,IAAAA,yBAAyB,CAAC,IAAD,CAAzB;AACD,GAFD;;AAIAG,EAAAA,iBAAiB,CAACK,IAAlB,GAAyB,eAAzB;AACA,SAAOL,iBAAP;AACD,CAvED,CAuEEN,QAvEF,CAFA;;AA2EA,IAAI4C,mBAAmB,GAAG;AACxBM,EAAAA,SAAS,EAAE,UAAUC,QAAV,EAAoBC,SAApB,EAA+BrC,SAA/B,EAA0CW,SAA1C,EAAqD;AAC9D,QAAIc,IAAI,GAAGzB,SAAS,CAACyB,IAArB;;AAEA,QAAIA,IAAI,CAACa,KAAL,CAAWC,OAAX,EAAJ,EAA0B;AACxB;AACD;;AAED,QAAIC,cAAc,GAAGxC,SAAS,CAACyC,QAAV,CAAmB,WAAnB,CAArB;AACA,QAAIC,cAAc,GAAGF,cAAc,CAACC,QAAf,CAAwB,WAAxB,CAArB;AACA,QAAIE,UAAU,GAAGD,cAAc,CAAChC,GAAf,CAAmB,OAAnB,CAAjB;AACAiC,IAAAA,UAAU,GAAG7D,MAAM,CAAC8D,OAAP,CAAeD,UAAf,IAA6BA,UAA7B,GAA0C,CAACA,UAAD,CAAvD;AACA,QAAIE,QAAQ,GAAGlC,SAAS,CAACQ,gBAAV,CAA2B2B,OAA3B,EAAf;AACA,QAAIC,YAAY,GAAGtB,IAAI,CAACsB,YAAL,EAAnB;AACA,QAAIC,SAAS,GAAG,CAAhB;AACA,QAAIC,WAAW,GAAGxB,IAAI,CAACyB,cAAL,CAAoB;AACpCC,MAAAA,SAAS,EAAEX;AADyB,KAApB,CAAlB;AAGA,QAAIY,EAAE,GAAG,EAAT;AACA,QAAIC,EAAE,GAAG,EAAT;AACA,QAAIC,SAAS,GAAGZ,cAAc,CAACa,YAAf,EAAhB;;AAEA,SAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG4B,WAAW,CAAC3B,MAAhC,EAAwCD,CAAC,EAAzC,EAA6C;AAC3C,UAAImC,SAAS,GAAG/B,IAAI,CAACgC,aAAL,CAAmBR,WAAW,CAAC5B,CAAD,CAAX,CAAeqC,KAAlC,CAAhB;;AAEA,UAAIX,YAAJ,EAAkB;AAChBK,QAAAA,EAAE,CAAC,CAAD,CAAF,GAAQI,SAAR;AACAJ,QAAAA,EAAE,CAAC,CAAD,CAAF,GAAQP,QAAQ,CAACc,CAAjB;AACAN,QAAAA,EAAE,CAAC,CAAD,CAAF,GAAQG,SAAR;AACAH,QAAAA,EAAE,CAAC,CAAD,CAAF,GAAQR,QAAQ,CAACc,CAAT,GAAad,QAAQ,CAACe,MAA9B;AACD,OALD,MAKO;AACLR,QAAAA,EAAE,CAAC,CAAD,CAAF,GAAQP,QAAQ,CAACgB,CAAjB;AACAT,QAAAA,EAAE,CAAC,CAAD,CAAF,GAAQI,SAAR;AACAH,QAAAA,EAAE,CAAC,CAAD,CAAF,GAAQR,QAAQ,CAACgB,CAAT,GAAahB,QAAQ,CAACiB,KAA9B;AACAT,QAAAA,EAAE,CAAC,CAAD,CAAF,GAAQG,SAAR;AACD;;AAED,UAAIO,UAAU,GAAGf,SAAS,KAAKL,UAAU,CAACrB,MAA1C;AACA,UAAI0C,SAAS,GAAGf,WAAW,CAAC5B,CAAD,CAAX,CAAe2C,SAA/B;AACA3B,MAAAA,SAAS,CAAC5B,GAAV,CAAc,IAAI1B,OAAO,CAACkF,IAAZ,CAAiB;AAC7BC,QAAAA,IAAI,EAAEF,SAAS,IAAI,IAAb,GAAoB,UAAUf,WAAW,CAAC5B,CAAD,CAAX,CAAe2C,SAA7C,GAAyD,IADlC;AAE7BG,QAAAA,gBAAgB,EAAE,IAFW;AAG7BC,QAAAA,SAAS,EAAE,IAHkB;AAI7BC,QAAAA,KAAK,EAAE;AACLC,UAAAA,EAAE,EAAElB,EAAE,CAAC,CAAD,CADD;AAELmB,UAAAA,EAAE,EAAEnB,EAAE,CAAC,CAAD,CAFD;AAGLoB,UAAAA,EAAE,EAAEnB,EAAE,CAAC,CAAD,CAHD;AAILoB,UAAAA,EAAE,EAAEpB,EAAE,CAAC,CAAD;AAJD,SAJsB;AAU7BqB,QAAAA,KAAK,EAAE5F,MAAM,CAAC6F,QAAP,CAAgB;AACrBC,UAAAA,MAAM,EAAEjC,UAAU,CAACoB,UAAD;AADG,SAAhB,EAEJT,SAFI,CAVsB;AAa7BuB,QAAAA,MAAM,EAAE;AAbqB,OAAjB,CAAd;AAeD;AACF,GAvDuB;AAwDxBC,EAAAA,cAAc,EAAE,UAAU1C,QAAV,EAAoBC,SAApB,EAA+BrC,SAA/B,EAA0CW,SAA1C,EAAqD;AACnE,QAAIc,IAAI,GAAGzB,SAAS,CAACyB,IAArB;AACA,QAAIsD,mBAAmB,GAAG/E,SAAS,CAACyC,QAAV,CAAmB,gBAAnB,CAA1B;AACA,QAAIC,cAAc,GAAGqC,mBAAmB,CAACtC,QAApB,CAA6B,WAA7B,CAArB;AACA,QAAII,QAAQ,GAAGlC,SAAS,CAACQ,gBAAV,CAA2B2B,OAA3B,EAAf;AACA,QAAIC,YAAY,GAAGtB,IAAI,CAACsB,YAAL,EAAnB;AACA,QAAIiC,gBAAgB,GAAGvD,IAAI,CAACwD,mBAAL,EAAvB;;AAEA,QAAI,CAACD,gBAAgB,CAAC1D,MAAtB,EAA8B;AAC5B;AACD;;AAED,QAAI8B,EAAE,GAAG,EAAT;AACA,QAAIC,EAAE,GAAG,EAAT;AACA,QAAIC,SAAS,GAAGZ,cAAc,CAACa,YAAf,EAAhB;;AAEA,SAAK,IAAIlC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG2D,gBAAgB,CAAC1D,MAArC,EAA6CD,CAAC,EAA9C,EAAkD;AAChD,WAAK,IAAI6D,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,gBAAgB,CAAC3D,CAAD,CAAhB,CAAoBC,MAAxC,EAAgD4D,CAAC,EAAjD,EAAqD;AACnD,YAAI1B,SAAS,GAAG/B,IAAI,CAACgC,aAAL,CAAmBuB,gBAAgB,CAAC3D,CAAD,CAAhB,CAAoB6D,CAApB,EAAuBxB,KAA1C,CAAhB;;AAEA,YAAIX,YAAJ,EAAkB;AAChBK,UAAAA,EAAE,CAAC,CAAD,CAAF,GAAQI,SAAR;AACAJ,UAAAA,EAAE,CAAC,CAAD,CAAF,GAAQP,QAAQ,CAACc,CAAjB;AACAN,UAAAA,EAAE,CAAC,CAAD,CAAF,GAAQG,SAAR;AACAH,UAAAA,EAAE,CAAC,CAAD,CAAF,GAAQR,QAAQ,CAACc,CAAT,GAAad,QAAQ,CAACe,MAA9B;AACD,SALD,MAKO;AACLR,UAAAA,EAAE,CAAC,CAAD,CAAF,GAAQP,QAAQ,CAACgB,CAAjB;AACAT,UAAAA,EAAE,CAAC,CAAD,CAAF,GAAQI,SAAR;AACAH,UAAAA,EAAE,CAAC,CAAD,CAAF,GAAQR,QAAQ,CAACgB,CAAT,GAAahB,QAAQ,CAACiB,KAA9B;AACAT,UAAAA,EAAE,CAAC,CAAD,CAAF,GAAQG,SAAR;AACD;;AAEDnB,QAAAA,SAAS,CAAC5B,GAAV,CAAc,IAAI1B,OAAO,CAACkF,IAAZ,CAAiB;AAC7BC,UAAAA,IAAI,EAAE,gBAAgBc,gBAAgB,CAAC3D,CAAD,CAAhB,CAAoB6D,CAApB,EAAuBlB,SADhB;AAE7BG,UAAAA,gBAAgB,EAAE,IAFW;AAG7BC,UAAAA,SAAS,EAAE,IAHkB;AAI7BC,UAAAA,KAAK,EAAE;AACLC,YAAAA,EAAE,EAAElB,EAAE,CAAC,CAAD,CADD;AAELmB,YAAAA,EAAE,EAAEnB,EAAE,CAAC,CAAD,CAFD;AAGLoB,YAAAA,EAAE,EAAEnB,EAAE,CAAC,CAAD,CAHD;AAILoB,YAAAA,EAAE,EAAEpB,EAAE,CAAC,CAAD;AAJD,WAJsB;AAU7BqB,UAAAA,KAAK,EAAEpB,SAVsB;AAW7BuB,UAAAA,MAAM,EAAE;AAXqB,SAAjB,CAAd;AAaD;AACF;AACF,GAvGuB;AAwGxBM,EAAAA,SAAS,EAAE,UAAU/C,QAAV,EAAoBC,SAApB,EAA+BrC,SAA/B,EAA0CW,SAA1C,EAAqD;AAC9DxB,IAAAA,2BAA2B,CAACiD,QAAD,EAAWC,SAAX,EAAsBrC,SAAtB,EAAiCW,SAAjC,CAA3B;AACD;AA1GuB,CAA1B;;AA6GA,IAAIyE,kBAAkB;AACtB;AACA,UAAU5F,MAAV,EAAkB;AAChBX,EAAAA,SAAS,CAACuG,kBAAD,EAAqB5F,MAArB,CAAT;;AAEA,WAAS4F,kBAAT,GAA8B;AAC5B,QAAI3F,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAAhE;;AAEAF,IAAAA,KAAK,CAACG,IAAN,GAAawF,kBAAkB,CAACxF,IAAhC;AACA,WAAOH,KAAP;AACD;;AAED2F,EAAAA,kBAAkB,CAACxF,IAAnB,GAA0B,OAA1B;AACA,SAAOwF,kBAAP;AACD,CAZD,CAYE7F,iBAZF,CAFA;;AAgBA,SAAS6F,kBAAT;;AAEA,IAAIC,kBAAkB;AACtB;AACA,UAAU7F,MAAV,EAAkB;AAChBX,EAAAA,SAAS,CAACwG,kBAAD,EAAqB7F,MAArB,CAAT;;AAEA,WAAS6F,kBAAT,GAA8B;AAC5B,QAAI5F,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAAhE;;AAEAF,IAAAA,KAAK,CAACG,IAAN,GAAawF,kBAAkB,CAACxF,IAAhC;AACA,WAAOH,KAAP;AACD;;AAED4F,EAAAA,kBAAkB,CAACzF,IAAnB,GAA0B,OAA1B;AACA,SAAOyF,kBAAP;AACD,CAZD,CAYE9F,iBAZF,CAFA;;AAgBA,SAAS8F,kBAAT;AACA,eAAe9F,iBAAf","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport * as graphic from '../../util/graphic';\nimport AxisBuilder from './AxisBuilder';\nimport AxisView from './AxisView';\nimport * as cartesianAxisHelper from '../../coord/cartesian/cartesianAxisHelper';\nimport { rectCoordAxisBuildSplitArea, rectCoordAxisHandleRemove } from './axisSplitHelper';\nvar axisBuilderAttrs = ['axisLine', 'axisTickLabel', 'axisName'];\nvar selfBuilderAttrs = ['splitArea', 'splitLine', 'minorSplitLine'];\n\nvar CartesianAxisView =\n/** @class */\nfunction (_super) {\n  __extends(CartesianAxisView, _super);\n\n  function CartesianAxisView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CartesianAxisView.type;\n    _this.axisPointerClass = 'CartesianAxisPointer';\n    return _this;\n  }\n  /**\n   * @override\n   */\n\n\n  CartesianAxisView.prototype.render = function (axisModel, ecModel, api, payload) {\n    this.group.removeAll();\n    var oldAxisGroup = this._axisGroup;\n    this._axisGroup = new graphic.Group();\n    this.group.add(this._axisGroup);\n\n    if (!axisModel.get('show')) {\n      return;\n    }\n\n    var gridModel = axisModel.getCoordSysModel();\n    var layout = cartesianAxisHelper.layout(gridModel, axisModel);\n    var axisBuilder = new AxisBuilder(axisModel, zrUtil.extend({\n      handleAutoShown: function (elementType) {\n        var cartesians = gridModel.coordinateSystem.getCartesians();\n\n        for (var i = 0; i < cartesians.length; i++) {\n          var otherAxisType = cartesians[i].getOtherAxis(axisModel.axis).type;\n\n          if (otherAxisType === 'value' || otherAxisType === 'log') {\n            // Still show axis tick or axisLine if other axis is value / log\n            return true;\n          }\n        } // Not show axisTick or axisLine if other axis is category / time\n\n\n        return false;\n      }\n    }, layout));\n    zrUtil.each(axisBuilderAttrs, axisBuilder.add, axisBuilder);\n\n    this._axisGroup.add(axisBuilder.getGroup());\n\n    zrUtil.each(selfBuilderAttrs, function (name) {\n      if (axisModel.get([name, 'show'])) {\n        axisElementBuilders[name](this, this._axisGroup, axisModel, gridModel);\n      }\n    }, this); // THIS is a special case for bar racing chart.\n    // Update the axis label from the natural initial layout to\n    // sorted layout should has no animation.\n\n    var isInitialSortFromBarRacing = payload && payload.type === 'changeAxisOrder' && payload.isInitSort;\n\n    if (!isInitialSortFromBarRacing) {\n      graphic.groupTransition(oldAxisGroup, this._axisGroup, axisModel);\n    }\n\n    _super.prototype.render.call(this, axisModel, ecModel, api, payload);\n  };\n\n  CartesianAxisView.prototype.remove = function () {\n    rectCoordAxisHandleRemove(this);\n  };\n\n  CartesianAxisView.type = 'cartesianAxis';\n  return CartesianAxisView;\n}(AxisView);\n\nvar axisElementBuilders = {\n  splitLine: function (axisView, axisGroup, axisModel, gridModel) {\n    var axis = axisModel.axis;\n\n    if (axis.scale.isBlank()) {\n      return;\n    }\n\n    var splitLineModel = axisModel.getModel('splitLine');\n    var lineStyleModel = splitLineModel.getModel('lineStyle');\n    var lineColors = lineStyleModel.get('color');\n    lineColors = zrUtil.isArray(lineColors) ? lineColors : [lineColors];\n    var gridRect = gridModel.coordinateSystem.getRect();\n    var isHorizontal = axis.isHorizontal();\n    var lineCount = 0;\n    var ticksCoords = axis.getTicksCoords({\n      tickModel: splitLineModel\n    });\n    var p1 = [];\n    var p2 = [];\n    var lineStyle = lineStyleModel.getLineStyle();\n\n    for (var i = 0; i < ticksCoords.length; i++) {\n      var tickCoord = axis.toGlobalCoord(ticksCoords[i].coord);\n\n      if (isHorizontal) {\n        p1[0] = tickCoord;\n        p1[1] = gridRect.y;\n        p2[0] = tickCoord;\n        p2[1] = gridRect.y + gridRect.height;\n      } else {\n        p1[0] = gridRect.x;\n        p1[1] = tickCoord;\n        p2[0] = gridRect.x + gridRect.width;\n        p2[1] = tickCoord;\n      }\n\n      var colorIndex = lineCount++ % lineColors.length;\n      var tickValue = ticksCoords[i].tickValue;\n      axisGroup.add(new graphic.Line({\n        anid: tickValue != null ? 'line_' + ticksCoords[i].tickValue : null,\n        subPixelOptimize: true,\n        autoBatch: true,\n        shape: {\n          x1: p1[0],\n          y1: p1[1],\n          x2: p2[0],\n          y2: p2[1]\n        },\n        style: zrUtil.defaults({\n          stroke: lineColors[colorIndex]\n        }, lineStyle),\n        silent: true\n      }));\n    }\n  },\n  minorSplitLine: function (axisView, axisGroup, axisModel, gridModel) {\n    var axis = axisModel.axis;\n    var minorSplitLineModel = axisModel.getModel('minorSplitLine');\n    var lineStyleModel = minorSplitLineModel.getModel('lineStyle');\n    var gridRect = gridModel.coordinateSystem.getRect();\n    var isHorizontal = axis.isHorizontal();\n    var minorTicksCoords = axis.getMinorTicksCoords();\n\n    if (!minorTicksCoords.length) {\n      return;\n    }\n\n    var p1 = [];\n    var p2 = [];\n    var lineStyle = lineStyleModel.getLineStyle();\n\n    for (var i = 0; i < minorTicksCoords.length; i++) {\n      for (var k = 0; k < minorTicksCoords[i].length; k++) {\n        var tickCoord = axis.toGlobalCoord(minorTicksCoords[i][k].coord);\n\n        if (isHorizontal) {\n          p1[0] = tickCoord;\n          p1[1] = gridRect.y;\n          p2[0] = tickCoord;\n          p2[1] = gridRect.y + gridRect.height;\n        } else {\n          p1[0] = gridRect.x;\n          p1[1] = tickCoord;\n          p2[0] = gridRect.x + gridRect.width;\n          p2[1] = tickCoord;\n        }\n\n        axisGroup.add(new graphic.Line({\n          anid: 'minor_line_' + minorTicksCoords[i][k].tickValue,\n          subPixelOptimize: true,\n          autoBatch: true,\n          shape: {\n            x1: p1[0],\n            y1: p1[1],\n            x2: p2[0],\n            y2: p2[1]\n          },\n          style: lineStyle,\n          silent: true\n        }));\n      }\n    }\n  },\n  splitArea: function (axisView, axisGroup, axisModel, gridModel) {\n    rectCoordAxisBuildSplitArea(axisView, axisGroup, axisModel, gridModel);\n  }\n};\n\nvar CartesianXAxisView =\n/** @class */\nfunction (_super) {\n  __extends(CartesianXAxisView, _super);\n\n  function CartesianXAxisView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CartesianXAxisView.type;\n    return _this;\n  }\n\n  CartesianXAxisView.type = 'xAxis';\n  return CartesianXAxisView;\n}(CartesianAxisView);\n\nexport { CartesianXAxisView };\n\nvar CartesianYAxisView =\n/** @class */\nfunction (_super) {\n  __extends(CartesianYAxisView, _super);\n\n  function CartesianYAxisView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = CartesianXAxisView.type;\n    return _this;\n  }\n\n  CartesianYAxisView.type = 'yAxis';\n  return CartesianYAxisView;\n}(CartesianAxisView);\n\nexport { CartesianYAxisView };\nexport default CartesianAxisView;"]},"metadata":{},"sourceType":"module"}