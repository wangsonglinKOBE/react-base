{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { each, map, isFunction, createHashMap, noop, assert } from 'zrender/lib/core/util';\nimport { createTask } from './task';\nimport { getUID } from '../util/component';\nimport GlobalModel from '../model/Global';\nimport ExtensionAPI from './ExtensionAPI';\nimport { normalizeToArray } from '../util/model';\n;\n\nvar Scheduler =\n/** @class */\nfunction () {\n  function Scheduler(ecInstance, api, dataProcessorHandlers, visualHandlers) {\n    // key: handlerUID\n    this._stageTaskMap = createHashMap();\n    this.ecInstance = ecInstance;\n    this.api = api; // Fix current processors in case that in some rear cases that\n    // processors might be registered after echarts instance created.\n    // Register processors incrementally for a echarts instance is\n    // not supported by this stream architecture.\n\n    dataProcessorHandlers = this._dataProcessorHandlers = dataProcessorHandlers.slice();\n    visualHandlers = this._visualHandlers = visualHandlers.slice();\n    this._allHandlers = dataProcessorHandlers.concat(visualHandlers);\n  }\n\n  Scheduler.prototype.restoreData = function (ecModel, payload) {\n    // TODO: Only restore needed series and components, but not all components.\n    // Currently `restoreData` of all of the series and component will be called.\n    // But some independent components like `title`, `legend`, `graphic`, `toolbox`,\n    // `tooltip`, `axisPointer`, etc, do not need series refresh when `setOption`,\n    // and some components like coordinate system, axes, dataZoom, visualMap only\n    // need their target series refresh.\n    // (1) If we are implementing this feature some day, we should consider these cases:\n    // if a data processor depends on a component (e.g., dataZoomProcessor depends\n    // on the settings of `dataZoom`), it should be re-performed if the component\n    // is modified by `setOption`.\n    // (2) If a processor depends on sevral series, speicified by its `getTargetSeries`,\n    // it should be re-performed when the result array of `getTargetSeries` changed.\n    // We use `dependencies` to cover these issues.\n    // (3) How to update target series when coordinate system related components modified.\n    // TODO: simply the dirty mechanism? Check whether only the case here can set tasks dirty,\n    // and this case all of the tasks will be set as dirty.\n    ecModel.restoreData(payload); // Theoretically an overall task not only depends on each of its target series, but also\n    // depends on all of the series.\n    // The overall task is not in pipeline, and `ecModel.restoreData` only set pipeline tasks\n    // dirty. If `getTargetSeries` of an overall task returns nothing, we should also ensure\n    // that the overall task is set as dirty and to be performed, otherwise it probably cause\n    // state chaos. So we have to set dirty of all of the overall tasks manually, otherwise it\n    // probably cause state chaos (consider `dataZoomProcessor`).\n\n    this._stageTaskMap.each(function (taskRecord) {\n      var overallTask = taskRecord.overallTask;\n      overallTask && overallTask.dirty();\n    });\n  }; // If seriesModel provided, incremental threshold is check by series data.\n\n\n  Scheduler.prototype.getPerformArgs = function (task, isBlock) {\n    // For overall task\n    if (!task.__pipeline) {\n      return;\n    }\n\n    var pipeline = this._pipelineMap.get(task.__pipeline.id);\n\n    var pCtx = pipeline.context;\n    var incremental = !isBlock && pipeline.progressiveEnabled && (!pCtx || pCtx.progressiveRender) && task.__idxInPipeline > pipeline.blockIndex;\n    var step = incremental ? pipeline.step : null;\n    var modDataCount = pCtx && pCtx.modDataCount;\n    var modBy = modDataCount != null ? Math.ceil(modDataCount / step) : null;\n    return {\n      step: step,\n      modBy: modBy,\n      modDataCount: modDataCount\n    };\n  };\n\n  Scheduler.prototype.getPipeline = function (pipelineId) {\n    return this._pipelineMap.get(pipelineId);\n  };\n  /**\n   * Current, progressive rendering starts from visual and layout.\n   * Always detect render mode in the same stage, avoiding that incorrect\n   * detection caused by data filtering.\n   * Caution:\n   * `updateStreamModes` use `seriesModel.getData()`.\n   */\n\n\n  Scheduler.prototype.updateStreamModes = function (seriesModel, view) {\n    var pipeline = this._pipelineMap.get(seriesModel.uid);\n\n    var data = seriesModel.getData();\n    var dataLen = data.count(); // `progressiveRender` means that can render progressively in each\n    // animation frame. Note that some types of series do not provide\n    // `view.incrementalPrepareRender` but support `chart.appendData`. We\n    // use the term `incremental` but not `progressive` to describe the\n    // case that `chart.appendData`.\n\n    var progressiveRender = pipeline.progressiveEnabled && view.incrementalPrepareRender && dataLen >= pipeline.threshold;\n    var large = seriesModel.get('large') && dataLen >= seriesModel.get('largeThreshold'); // TODO: modDataCount should not updated if `appendData`, otherwise cause whole repaint.\n    // see `test/candlestick-large3.html`\n\n    var modDataCount = seriesModel.get('progressiveChunkMode') === 'mod' ? dataLen : null;\n    seriesModel.pipelineContext = pipeline.context = {\n      progressiveRender: progressiveRender,\n      modDataCount: modDataCount,\n      large: large\n    };\n  };\n\n  Scheduler.prototype.restorePipelines = function (ecModel) {\n    var scheduler = this;\n    var pipelineMap = scheduler._pipelineMap = createHashMap();\n    ecModel.eachSeries(function (seriesModel) {\n      var progressive = seriesModel.getProgressive();\n      var pipelineId = seriesModel.uid;\n      pipelineMap.set(pipelineId, {\n        id: pipelineId,\n        head: null,\n        tail: null,\n        threshold: seriesModel.getProgressiveThreshold(),\n        progressiveEnabled: progressive && !(seriesModel.preventIncremental && seriesModel.preventIncremental()),\n        blockIndex: -1,\n        step: Math.round(progressive || 700),\n        count: 0\n      });\n\n      scheduler._pipe(seriesModel, seriesModel.dataTask);\n    });\n  };\n\n  Scheduler.prototype.prepareStageTasks = function () {\n    var stageTaskMap = this._stageTaskMap;\n    var ecModel = this.api.getModel();\n    var api = this.api;\n    each(this._allHandlers, function (handler) {\n      var record = stageTaskMap.get(handler.uid) || stageTaskMap.set(handler.uid, {});\n      var errMsg = '';\n\n      if (process.env.NODE_ENV !== 'production') {\n        // Currently do not need to support to sepecify them both.\n        errMsg = '\"reset\" and \"overallReset\" must not be both specified.';\n      }\n\n      assert(!(handler.reset && handler.overallReset), errMsg);\n      handler.reset && this._createSeriesStageTask(handler, record, ecModel, api);\n      handler.overallReset && this._createOverallStageTask(handler, record, ecModel, api);\n    }, this);\n  };\n\n  Scheduler.prototype.prepareView = function (view, model, ecModel, api) {\n    var renderTask = view.renderTask;\n    var context = renderTask.context;\n    context.model = model;\n    context.ecModel = ecModel;\n    context.api = api;\n    renderTask.__block = !view.incrementalPrepareRender;\n\n    this._pipe(model, renderTask);\n  };\n\n  Scheduler.prototype.performDataProcessorTasks = function (ecModel, payload) {\n    // If we do not use `block` here, it should be considered when to update modes.\n    this._performStageTasks(this._dataProcessorHandlers, ecModel, payload, {\n      block: true\n    });\n  };\n\n  Scheduler.prototype.performVisualTasks = function (ecModel, payload, opt) {\n    this._performStageTasks(this._visualHandlers, ecModel, payload, opt);\n  };\n\n  Scheduler.prototype._performStageTasks = function (stageHandlers, ecModel, payload, opt) {\n    opt = opt || {};\n    var unfinished = false;\n    var scheduler = this;\n    each(stageHandlers, function (stageHandler, idx) {\n      if (opt.visualType && opt.visualType !== stageHandler.visualType) {\n        return;\n      }\n\n      var stageHandlerRecord = scheduler._stageTaskMap.get(stageHandler.uid);\n\n      var seriesTaskMap = stageHandlerRecord.seriesTaskMap;\n      var overallTask = stageHandlerRecord.overallTask;\n\n      if (overallTask) {\n        var overallNeedDirty_1;\n        var agentStubMap = overallTask.agentStubMap;\n        agentStubMap.each(function (stub) {\n          if (needSetDirty(opt, stub)) {\n            stub.dirty();\n            overallNeedDirty_1 = true;\n          }\n        });\n        overallNeedDirty_1 && overallTask.dirty();\n        scheduler.updatePayload(overallTask, payload);\n        var performArgs_1 = scheduler.getPerformArgs(overallTask, opt.block); // Execute stubs firstly, which may set the overall task dirty,\n        // then execute the overall task. And stub will call seriesModel.setData,\n        // which ensures that in the overallTask seriesModel.getData() will not\n        // return incorrect data.\n\n        agentStubMap.each(function (stub) {\n          stub.perform(performArgs_1);\n        });\n\n        if (overallTask.perform(performArgs_1)) {\n          unfinished = true;\n        }\n      } else if (seriesTaskMap) {\n        seriesTaskMap.each(function (task, pipelineId) {\n          if (needSetDirty(opt, task)) {\n            task.dirty();\n          }\n\n          var performArgs = scheduler.getPerformArgs(task, opt.block); // FIXME\n          // if intending to decalare `performRawSeries` in handlers, only\n          // stream-independent (specifically, data item independent) operations can be\n          // performed. Because is a series is filtered, most of the tasks will not\n          // be performed. A stream-dependent operation probably cause wrong biz logic.\n          // Perhaps we should not provide a separate callback for this case instead\n          // of providing the config `performRawSeries`. The stream-dependent operaions\n          // and stream-independent operations should better not be mixed.\n\n          performArgs.skip = !stageHandler.performRawSeries && ecModel.isSeriesFiltered(task.context.model);\n          scheduler.updatePayload(task, payload);\n\n          if (task.perform(performArgs)) {\n            unfinished = true;\n          }\n        });\n      }\n    });\n\n    function needSetDirty(opt, task) {\n      return opt.setDirty && (!opt.dirtyMap || opt.dirtyMap.get(task.__pipeline.id));\n    }\n\n    this.unfinished = unfinished || this.unfinished;\n  };\n\n  Scheduler.prototype.performSeriesTasks = function (ecModel) {\n    var unfinished;\n    ecModel.eachSeries(function (seriesModel) {\n      // Progress to the end for dataInit and dataRestore.\n      unfinished = seriesModel.dataTask.perform() || unfinished;\n    });\n    this.unfinished = unfinished || this.unfinished;\n  };\n\n  Scheduler.prototype.plan = function () {\n    // Travel pipelines, check block.\n    this._pipelineMap.each(function (pipeline) {\n      var task = pipeline.tail;\n\n      do {\n        if (task.__block) {\n          pipeline.blockIndex = task.__idxInPipeline;\n          break;\n        }\n\n        task = task.getUpstream();\n      } while (task);\n    });\n  };\n\n  Scheduler.prototype.updatePayload = function (task, payload) {\n    payload !== 'remain' && (task.context.payload = payload);\n  };\n\n  Scheduler.prototype._createSeriesStageTask = function (stageHandler, stageHandlerRecord, ecModel, api) {\n    var scheduler = this;\n    var oldSeriesTaskMap = stageHandlerRecord.seriesTaskMap; // The count of stages are totally about only several dozen, so\n    // do not need to reuse the map.\n\n    var newSeriesTaskMap = stageHandlerRecord.seriesTaskMap = createHashMap();\n    var seriesType = stageHandler.seriesType;\n    var getTargetSeries = stageHandler.getTargetSeries; // If a stageHandler should cover all series, `createOnAllSeries` should be declared mandatorily,\n    // to avoid some typo or abuse. Otherwise if an extension do not specify a `seriesType`,\n    // it works but it may cause other irrelevant charts blocked.\n\n    if (stageHandler.createOnAllSeries) {\n      ecModel.eachRawSeries(create);\n    } else if (seriesType) {\n      ecModel.eachRawSeriesByType(seriesType, create);\n    } else if (getTargetSeries) {\n      getTargetSeries(ecModel, api).each(create);\n    }\n\n    function create(seriesModel) {\n      var pipelineId = seriesModel.uid; // Init tasks for each seriesModel only once.\n      // Reuse original task instance.\n\n      var task = newSeriesTaskMap.set(pipelineId, oldSeriesTaskMap && oldSeriesTaskMap.get(pipelineId) || createTask({\n        plan: seriesTaskPlan,\n        reset: seriesTaskReset,\n        count: seriesTaskCount\n      }));\n      task.context = {\n        model: seriesModel,\n        ecModel: ecModel,\n        api: api,\n        // PENDING: `useClearVisual` not used?\n        useClearVisual: stageHandler.isVisual && !stageHandler.isLayout,\n        plan: stageHandler.plan,\n        reset: stageHandler.reset,\n        scheduler: scheduler\n      };\n\n      scheduler._pipe(seriesModel, task);\n    }\n  };\n\n  Scheduler.prototype._createOverallStageTask = function (stageHandler, stageHandlerRecord, ecModel, api) {\n    var scheduler = this;\n    var overallTask = stageHandlerRecord.overallTask = stageHandlerRecord.overallTask // For overall task, the function only be called on reset stage.\n    || createTask({\n      reset: overallTaskReset\n    });\n    overallTask.context = {\n      ecModel: ecModel,\n      api: api,\n      overallReset: stageHandler.overallReset,\n      scheduler: scheduler\n    };\n    var oldAgentStubMap = overallTask.agentStubMap; // The count of stages are totally about only several dozen, so\n    // do not need to reuse the map.\n\n    var newAgentStubMap = overallTask.agentStubMap = createHashMap();\n    var seriesType = stageHandler.seriesType;\n    var getTargetSeries = stageHandler.getTargetSeries;\n    var overallProgress = true;\n    var shouldOverallTaskDirty = false; // FIXME:TS never used, so comment it\n    // let modifyOutputEnd = stageHandler.modifyOutputEnd;\n    // An overall task with seriesType detected or has `getTargetSeries`, we add\n    // stub in each pipelines, it will set the overall task dirty when the pipeline\n    // progress. Moreover, to avoid call the overall task each frame (too frequent),\n    // we set the pipeline block.\n\n    var errMsg = '';\n\n    if (process.env.NODE_ENV !== 'production') {\n      errMsg = '\"createOnAllSeries\" do not supported for \"overallReset\", ' + 'becuase it will block all streams.';\n    }\n\n    assert(!stageHandler.createOnAllSeries, errMsg);\n\n    if (seriesType) {\n      ecModel.eachRawSeriesByType(seriesType, createStub);\n    } else if (getTargetSeries) {\n      getTargetSeries(ecModel, api).each(createStub);\n    } // Otherwise, (usually it is legancy case), the overall task will only be\n    // executed when upstream dirty. Otherwise the progressive rendering of all\n    // pipelines will be disabled unexpectedly. But it still needs stubs to receive\n    // dirty info from upsteam.\n    else {\n      overallProgress = false;\n      each(ecModel.getSeries(), createStub);\n    }\n\n    function createStub(seriesModel) {\n      var pipelineId = seriesModel.uid;\n      var stub = newAgentStubMap.set(pipelineId, oldAgentStubMap && oldAgentStubMap.get(pipelineId) || ( // When the result of `getTargetSeries` changed, the overallTask\n      // should be set as dirty and re-performed.\n      shouldOverallTaskDirty = true, createTask({\n        reset: stubReset,\n        onDirty: stubOnDirty\n      })));\n      stub.context = {\n        model: seriesModel,\n        overallProgress: overallProgress // FIXME:TS never used, so comment it\n        // modifyOutputEnd: modifyOutputEnd\n\n      };\n      stub.agent = overallTask;\n      stub.__block = overallProgress;\n\n      scheduler._pipe(seriesModel, stub);\n    }\n\n    if (shouldOverallTaskDirty) {\n      overallTask.dirty();\n    }\n  };\n\n  Scheduler.prototype._pipe = function (seriesModel, task) {\n    var pipelineId = seriesModel.uid;\n\n    var pipeline = this._pipelineMap.get(pipelineId);\n\n    !pipeline.head && (pipeline.head = task);\n    pipeline.tail && pipeline.tail.pipe(task);\n    pipeline.tail = task;\n    task.__idxInPipeline = pipeline.count++;\n    task.__pipeline = pipeline;\n  };\n\n  Scheduler.wrapStageHandler = function (stageHandler, visualType) {\n    if (isFunction(stageHandler)) {\n      stageHandler = {\n        overallReset: stageHandler,\n        seriesType: detectSeriseType(stageHandler)\n      };\n    }\n\n    stageHandler.uid = getUID('stageHandler');\n    visualType && (stageHandler.visualType = visualType);\n    return stageHandler;\n  };\n\n  ;\n  return Scheduler;\n}();\n\nfunction overallTaskReset(context) {\n  context.overallReset(context.ecModel, context.api, context.payload);\n}\n\nfunction stubReset(context) {\n  return context.overallProgress && stubProgress;\n}\n\nfunction stubProgress() {\n  this.agent.dirty();\n  this.getDownstream().dirty();\n}\n\nfunction stubOnDirty() {\n  this.agent && this.agent.dirty();\n}\n\nfunction seriesTaskPlan(context) {\n  return context.plan ? context.plan(context.model, context.ecModel, context.api, context.payload) : null;\n}\n\nfunction seriesTaskReset(context) {\n  if (context.useClearVisual) {\n    context.data.clearAllVisual();\n  }\n\n  var resetDefines = context.resetDefines = normalizeToArray(context.reset(context.model, context.ecModel, context.api, context.payload));\n  return resetDefines.length > 1 ? map(resetDefines, function (v, idx) {\n    return makeSeriesTaskProgress(idx);\n  }) : singleSeriesTaskProgress;\n}\n\nvar singleSeriesTaskProgress = makeSeriesTaskProgress(0);\n\nfunction makeSeriesTaskProgress(resetDefineIdx) {\n  return function (params, context) {\n    var data = context.data;\n    var resetDefine = context.resetDefines[resetDefineIdx];\n\n    if (resetDefine && resetDefine.dataEach) {\n      for (var i = params.start; i < params.end; i++) {\n        resetDefine.dataEach(data, i);\n      }\n    } else if (resetDefine && resetDefine.progress) {\n      resetDefine.progress(params, data);\n    }\n  };\n}\n\nfunction seriesTaskCount(context) {\n  return context.data.count();\n}\n/**\n * Only some legacy stage handlers (usually in echarts extensions) are pure function.\n * To ensure that they can work normally, they should work in block mode, that is,\n * they should not be started util the previous tasks finished. So they cause the\n * progressive rendering disabled. We try to detect the series type, to narrow down\n * the block range to only the series type they concern, but not all series.\n */\n\n\nfunction detectSeriseType(legacyFunc) {\n  seriesType = null;\n\n  try {\n    // Assume there is no async when calling `eachSeriesByType`.\n    legacyFunc(ecModelMock, apiMock);\n  } catch (e) {}\n\n  return seriesType;\n}\n\nvar ecModelMock = {};\nvar apiMock = {};\nvar seriesType;\nmockMethods(ecModelMock, GlobalModel);\nmockMethods(apiMock, ExtensionAPI);\n\necModelMock.eachSeriesByType = ecModelMock.eachRawSeriesByType = function (type) {\n  seriesType = type;\n};\n\necModelMock.eachComponent = function (cond) {\n  if (cond.mainType === 'series' && cond.subType) {\n    seriesType = cond.subType;\n  }\n};\n\nfunction mockMethods(target, Clz) {\n  /* eslint-disable */\n  for (var name_1 in Clz.prototype) {\n    // Do not use hasOwnProperty\n    target[name_1] = noop;\n  }\n  /* eslint-enable */\n\n}\n\nexport default Scheduler;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/core/Scheduler.js"],"names":["each","map","isFunction","createHashMap","noop","assert","createTask","getUID","GlobalModel","ExtensionAPI","normalizeToArray","Scheduler","ecInstance","api","dataProcessorHandlers","visualHandlers","_stageTaskMap","_dataProcessorHandlers","slice","_visualHandlers","_allHandlers","concat","prototype","restoreData","ecModel","payload","taskRecord","overallTask","dirty","getPerformArgs","task","isBlock","__pipeline","pipeline","_pipelineMap","get","id","pCtx","context","incremental","progressiveEnabled","progressiveRender","__idxInPipeline","blockIndex","step","modDataCount","modBy","Math","ceil","getPipeline","pipelineId","updateStreamModes","seriesModel","view","uid","data","getData","dataLen","count","incrementalPrepareRender","threshold","large","pipelineContext","restorePipelines","scheduler","pipelineMap","eachSeries","progressive","getProgressive","set","head","tail","getProgressiveThreshold","preventIncremental","round","_pipe","dataTask","prepareStageTasks","stageTaskMap","getModel","handler","record","errMsg","process","env","NODE_ENV","reset","overallReset","_createSeriesStageTask","_createOverallStageTask","prepareView","model","renderTask","__block","performDataProcessorTasks","_performStageTasks","block","performVisualTasks","opt","stageHandlers","unfinished","stageHandler","idx","visualType","stageHandlerRecord","seriesTaskMap","overallNeedDirty_1","agentStubMap","stub","needSetDirty","updatePayload","performArgs_1","perform","performArgs","skip","performRawSeries","isSeriesFiltered","setDirty","dirtyMap","performSeriesTasks","plan","getUpstream","oldSeriesTaskMap","newSeriesTaskMap","seriesType","getTargetSeries","createOnAllSeries","eachRawSeries","create","eachRawSeriesByType","seriesTaskPlan","seriesTaskReset","seriesTaskCount","useClearVisual","isVisual","isLayout","overallTaskReset","oldAgentStubMap","newAgentStubMap","overallProgress","shouldOverallTaskDirty","createStub","getSeries","stubReset","onDirty","stubOnDirty","agent","pipe","wrapStageHandler","detectSeriseType","stubProgress","getDownstream","clearAllVisual","resetDefines","length","v","makeSeriesTaskProgress","singleSeriesTaskProgress","resetDefineIdx","params","resetDefine","dataEach","i","start","end","progress","legacyFunc","ecModelMock","apiMock","e","mockMethods","eachSeriesByType","type","eachComponent","cond","mainType","subType","target","Clz","name_1"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { each, map, isFunction, createHashMap, noop, assert } from 'zrender/lib/core/util';\nimport { createTask } from './task';\nimport { getUID } from '../util/component';\nimport GlobalModel from '../model/Global';\nimport ExtensionAPI from './ExtensionAPI';\nimport { normalizeToArray } from '../util/model';\n;\n\nvar Scheduler =\n/** @class */\nfunction () {\n  function Scheduler(ecInstance, api, dataProcessorHandlers, visualHandlers) {\n    // key: handlerUID\n    this._stageTaskMap = createHashMap();\n    this.ecInstance = ecInstance;\n    this.api = api; // Fix current processors in case that in some rear cases that\n    // processors might be registered after echarts instance created.\n    // Register processors incrementally for a echarts instance is\n    // not supported by this stream architecture.\n\n    dataProcessorHandlers = this._dataProcessorHandlers = dataProcessorHandlers.slice();\n    visualHandlers = this._visualHandlers = visualHandlers.slice();\n    this._allHandlers = dataProcessorHandlers.concat(visualHandlers);\n  }\n\n  Scheduler.prototype.restoreData = function (ecModel, payload) {\n    // TODO: Only restore needed series and components, but not all components.\n    // Currently `restoreData` of all of the series and component will be called.\n    // But some independent components like `title`, `legend`, `graphic`, `toolbox`,\n    // `tooltip`, `axisPointer`, etc, do not need series refresh when `setOption`,\n    // and some components like coordinate system, axes, dataZoom, visualMap only\n    // need their target series refresh.\n    // (1) If we are implementing this feature some day, we should consider these cases:\n    // if a data processor depends on a component (e.g., dataZoomProcessor depends\n    // on the settings of `dataZoom`), it should be re-performed if the component\n    // is modified by `setOption`.\n    // (2) If a processor depends on sevral series, speicified by its `getTargetSeries`,\n    // it should be re-performed when the result array of `getTargetSeries` changed.\n    // We use `dependencies` to cover these issues.\n    // (3) How to update target series when coordinate system related components modified.\n    // TODO: simply the dirty mechanism? Check whether only the case here can set tasks dirty,\n    // and this case all of the tasks will be set as dirty.\n    ecModel.restoreData(payload); // Theoretically an overall task not only depends on each of its target series, but also\n    // depends on all of the series.\n    // The overall task is not in pipeline, and `ecModel.restoreData` only set pipeline tasks\n    // dirty. If `getTargetSeries` of an overall task returns nothing, we should also ensure\n    // that the overall task is set as dirty and to be performed, otherwise it probably cause\n    // state chaos. So we have to set dirty of all of the overall tasks manually, otherwise it\n    // probably cause state chaos (consider `dataZoomProcessor`).\n\n    this._stageTaskMap.each(function (taskRecord) {\n      var overallTask = taskRecord.overallTask;\n      overallTask && overallTask.dirty();\n    });\n  }; // If seriesModel provided, incremental threshold is check by series data.\n\n\n  Scheduler.prototype.getPerformArgs = function (task, isBlock) {\n    // For overall task\n    if (!task.__pipeline) {\n      return;\n    }\n\n    var pipeline = this._pipelineMap.get(task.__pipeline.id);\n\n    var pCtx = pipeline.context;\n    var incremental = !isBlock && pipeline.progressiveEnabled && (!pCtx || pCtx.progressiveRender) && task.__idxInPipeline > pipeline.blockIndex;\n    var step = incremental ? pipeline.step : null;\n    var modDataCount = pCtx && pCtx.modDataCount;\n    var modBy = modDataCount != null ? Math.ceil(modDataCount / step) : null;\n    return {\n      step: step,\n      modBy: modBy,\n      modDataCount: modDataCount\n    };\n  };\n\n  Scheduler.prototype.getPipeline = function (pipelineId) {\n    return this._pipelineMap.get(pipelineId);\n  };\n  /**\n   * Current, progressive rendering starts from visual and layout.\n   * Always detect render mode in the same stage, avoiding that incorrect\n   * detection caused by data filtering.\n   * Caution:\n   * `updateStreamModes` use `seriesModel.getData()`.\n   */\n\n\n  Scheduler.prototype.updateStreamModes = function (seriesModel, view) {\n    var pipeline = this._pipelineMap.get(seriesModel.uid);\n\n    var data = seriesModel.getData();\n    var dataLen = data.count(); // `progressiveRender` means that can render progressively in each\n    // animation frame. Note that some types of series do not provide\n    // `view.incrementalPrepareRender` but support `chart.appendData`. We\n    // use the term `incremental` but not `progressive` to describe the\n    // case that `chart.appendData`.\n\n    var progressiveRender = pipeline.progressiveEnabled && view.incrementalPrepareRender && dataLen >= pipeline.threshold;\n    var large = seriesModel.get('large') && dataLen >= seriesModel.get('largeThreshold'); // TODO: modDataCount should not updated if `appendData`, otherwise cause whole repaint.\n    // see `test/candlestick-large3.html`\n\n    var modDataCount = seriesModel.get('progressiveChunkMode') === 'mod' ? dataLen : null;\n    seriesModel.pipelineContext = pipeline.context = {\n      progressiveRender: progressiveRender,\n      modDataCount: modDataCount,\n      large: large\n    };\n  };\n\n  Scheduler.prototype.restorePipelines = function (ecModel) {\n    var scheduler = this;\n    var pipelineMap = scheduler._pipelineMap = createHashMap();\n    ecModel.eachSeries(function (seriesModel) {\n      var progressive = seriesModel.getProgressive();\n      var pipelineId = seriesModel.uid;\n      pipelineMap.set(pipelineId, {\n        id: pipelineId,\n        head: null,\n        tail: null,\n        threshold: seriesModel.getProgressiveThreshold(),\n        progressiveEnabled: progressive && !(seriesModel.preventIncremental && seriesModel.preventIncremental()),\n        blockIndex: -1,\n        step: Math.round(progressive || 700),\n        count: 0\n      });\n\n      scheduler._pipe(seriesModel, seriesModel.dataTask);\n    });\n  };\n\n  Scheduler.prototype.prepareStageTasks = function () {\n    var stageTaskMap = this._stageTaskMap;\n    var ecModel = this.api.getModel();\n    var api = this.api;\n    each(this._allHandlers, function (handler) {\n      var record = stageTaskMap.get(handler.uid) || stageTaskMap.set(handler.uid, {});\n      var errMsg = '';\n\n      if (process.env.NODE_ENV !== 'production') {\n        // Currently do not need to support to sepecify them both.\n        errMsg = '\"reset\" and \"overallReset\" must not be both specified.';\n      }\n\n      assert(!(handler.reset && handler.overallReset), errMsg);\n      handler.reset && this._createSeriesStageTask(handler, record, ecModel, api);\n      handler.overallReset && this._createOverallStageTask(handler, record, ecModel, api);\n    }, this);\n  };\n\n  Scheduler.prototype.prepareView = function (view, model, ecModel, api) {\n    var renderTask = view.renderTask;\n    var context = renderTask.context;\n    context.model = model;\n    context.ecModel = ecModel;\n    context.api = api;\n    renderTask.__block = !view.incrementalPrepareRender;\n\n    this._pipe(model, renderTask);\n  };\n\n  Scheduler.prototype.performDataProcessorTasks = function (ecModel, payload) {\n    // If we do not use `block` here, it should be considered when to update modes.\n    this._performStageTasks(this._dataProcessorHandlers, ecModel, payload, {\n      block: true\n    });\n  };\n\n  Scheduler.prototype.performVisualTasks = function (ecModel, payload, opt) {\n    this._performStageTasks(this._visualHandlers, ecModel, payload, opt);\n  };\n\n  Scheduler.prototype._performStageTasks = function (stageHandlers, ecModel, payload, opt) {\n    opt = opt || {};\n    var unfinished = false;\n    var scheduler = this;\n    each(stageHandlers, function (stageHandler, idx) {\n      if (opt.visualType && opt.visualType !== stageHandler.visualType) {\n        return;\n      }\n\n      var stageHandlerRecord = scheduler._stageTaskMap.get(stageHandler.uid);\n\n      var seriesTaskMap = stageHandlerRecord.seriesTaskMap;\n      var overallTask = stageHandlerRecord.overallTask;\n\n      if (overallTask) {\n        var overallNeedDirty_1;\n        var agentStubMap = overallTask.agentStubMap;\n        agentStubMap.each(function (stub) {\n          if (needSetDirty(opt, stub)) {\n            stub.dirty();\n            overallNeedDirty_1 = true;\n          }\n        });\n        overallNeedDirty_1 && overallTask.dirty();\n        scheduler.updatePayload(overallTask, payload);\n        var performArgs_1 = scheduler.getPerformArgs(overallTask, opt.block); // Execute stubs firstly, which may set the overall task dirty,\n        // then execute the overall task. And stub will call seriesModel.setData,\n        // which ensures that in the overallTask seriesModel.getData() will not\n        // return incorrect data.\n\n        agentStubMap.each(function (stub) {\n          stub.perform(performArgs_1);\n        });\n\n        if (overallTask.perform(performArgs_1)) {\n          unfinished = true;\n        }\n      } else if (seriesTaskMap) {\n        seriesTaskMap.each(function (task, pipelineId) {\n          if (needSetDirty(opt, task)) {\n            task.dirty();\n          }\n\n          var performArgs = scheduler.getPerformArgs(task, opt.block); // FIXME\n          // if intending to decalare `performRawSeries` in handlers, only\n          // stream-independent (specifically, data item independent) operations can be\n          // performed. Because is a series is filtered, most of the tasks will not\n          // be performed. A stream-dependent operation probably cause wrong biz logic.\n          // Perhaps we should not provide a separate callback for this case instead\n          // of providing the config `performRawSeries`. The stream-dependent operaions\n          // and stream-independent operations should better not be mixed.\n\n          performArgs.skip = !stageHandler.performRawSeries && ecModel.isSeriesFiltered(task.context.model);\n          scheduler.updatePayload(task, payload);\n\n          if (task.perform(performArgs)) {\n            unfinished = true;\n          }\n        });\n      }\n    });\n\n    function needSetDirty(opt, task) {\n      return opt.setDirty && (!opt.dirtyMap || opt.dirtyMap.get(task.__pipeline.id));\n    }\n\n    this.unfinished = unfinished || this.unfinished;\n  };\n\n  Scheduler.prototype.performSeriesTasks = function (ecModel) {\n    var unfinished;\n    ecModel.eachSeries(function (seriesModel) {\n      // Progress to the end for dataInit and dataRestore.\n      unfinished = seriesModel.dataTask.perform() || unfinished;\n    });\n    this.unfinished = unfinished || this.unfinished;\n  };\n\n  Scheduler.prototype.plan = function () {\n    // Travel pipelines, check block.\n    this._pipelineMap.each(function (pipeline) {\n      var task = pipeline.tail;\n\n      do {\n        if (task.__block) {\n          pipeline.blockIndex = task.__idxInPipeline;\n          break;\n        }\n\n        task = task.getUpstream();\n      } while (task);\n    });\n  };\n\n  Scheduler.prototype.updatePayload = function (task, payload) {\n    payload !== 'remain' && (task.context.payload = payload);\n  };\n\n  Scheduler.prototype._createSeriesStageTask = function (stageHandler, stageHandlerRecord, ecModel, api) {\n    var scheduler = this;\n    var oldSeriesTaskMap = stageHandlerRecord.seriesTaskMap; // The count of stages are totally about only several dozen, so\n    // do not need to reuse the map.\n\n    var newSeriesTaskMap = stageHandlerRecord.seriesTaskMap = createHashMap();\n    var seriesType = stageHandler.seriesType;\n    var getTargetSeries = stageHandler.getTargetSeries; // If a stageHandler should cover all series, `createOnAllSeries` should be declared mandatorily,\n    // to avoid some typo or abuse. Otherwise if an extension do not specify a `seriesType`,\n    // it works but it may cause other irrelevant charts blocked.\n\n    if (stageHandler.createOnAllSeries) {\n      ecModel.eachRawSeries(create);\n    } else if (seriesType) {\n      ecModel.eachRawSeriesByType(seriesType, create);\n    } else if (getTargetSeries) {\n      getTargetSeries(ecModel, api).each(create);\n    }\n\n    function create(seriesModel) {\n      var pipelineId = seriesModel.uid; // Init tasks for each seriesModel only once.\n      // Reuse original task instance.\n\n      var task = newSeriesTaskMap.set(pipelineId, oldSeriesTaskMap && oldSeriesTaskMap.get(pipelineId) || createTask({\n        plan: seriesTaskPlan,\n        reset: seriesTaskReset,\n        count: seriesTaskCount\n      }));\n      task.context = {\n        model: seriesModel,\n        ecModel: ecModel,\n        api: api,\n        // PENDING: `useClearVisual` not used?\n        useClearVisual: stageHandler.isVisual && !stageHandler.isLayout,\n        plan: stageHandler.plan,\n        reset: stageHandler.reset,\n        scheduler: scheduler\n      };\n\n      scheduler._pipe(seriesModel, task);\n    }\n  };\n\n  Scheduler.prototype._createOverallStageTask = function (stageHandler, stageHandlerRecord, ecModel, api) {\n    var scheduler = this;\n    var overallTask = stageHandlerRecord.overallTask = stageHandlerRecord.overallTask // For overall task, the function only be called on reset stage.\n    || createTask({\n      reset: overallTaskReset\n    });\n    overallTask.context = {\n      ecModel: ecModel,\n      api: api,\n      overallReset: stageHandler.overallReset,\n      scheduler: scheduler\n    };\n    var oldAgentStubMap = overallTask.agentStubMap; // The count of stages are totally about only several dozen, so\n    // do not need to reuse the map.\n\n    var newAgentStubMap = overallTask.agentStubMap = createHashMap();\n    var seriesType = stageHandler.seriesType;\n    var getTargetSeries = stageHandler.getTargetSeries;\n    var overallProgress = true;\n    var shouldOverallTaskDirty = false; // FIXME:TS never used, so comment it\n    // let modifyOutputEnd = stageHandler.modifyOutputEnd;\n    // An overall task with seriesType detected or has `getTargetSeries`, we add\n    // stub in each pipelines, it will set the overall task dirty when the pipeline\n    // progress. Moreover, to avoid call the overall task each frame (too frequent),\n    // we set the pipeline block.\n\n    var errMsg = '';\n\n    if (process.env.NODE_ENV !== 'production') {\n      errMsg = '\"createOnAllSeries\" do not supported for \"overallReset\", ' + 'becuase it will block all streams.';\n    }\n\n    assert(!stageHandler.createOnAllSeries, errMsg);\n\n    if (seriesType) {\n      ecModel.eachRawSeriesByType(seriesType, createStub);\n    } else if (getTargetSeries) {\n      getTargetSeries(ecModel, api).each(createStub);\n    } // Otherwise, (usually it is legancy case), the overall task will only be\n    // executed when upstream dirty. Otherwise the progressive rendering of all\n    // pipelines will be disabled unexpectedly. But it still needs stubs to receive\n    // dirty info from upsteam.\n    else {\n        overallProgress = false;\n        each(ecModel.getSeries(), createStub);\n      }\n\n    function createStub(seriesModel) {\n      var pipelineId = seriesModel.uid;\n      var stub = newAgentStubMap.set(pipelineId, oldAgentStubMap && oldAgentStubMap.get(pipelineId) || ( // When the result of `getTargetSeries` changed, the overallTask\n      // should be set as dirty and re-performed.\n      shouldOverallTaskDirty = true, createTask({\n        reset: stubReset,\n        onDirty: stubOnDirty\n      })));\n      stub.context = {\n        model: seriesModel,\n        overallProgress: overallProgress // FIXME:TS never used, so comment it\n        // modifyOutputEnd: modifyOutputEnd\n\n      };\n      stub.agent = overallTask;\n      stub.__block = overallProgress;\n\n      scheduler._pipe(seriesModel, stub);\n    }\n\n    if (shouldOverallTaskDirty) {\n      overallTask.dirty();\n    }\n  };\n\n  Scheduler.prototype._pipe = function (seriesModel, task) {\n    var pipelineId = seriesModel.uid;\n\n    var pipeline = this._pipelineMap.get(pipelineId);\n\n    !pipeline.head && (pipeline.head = task);\n    pipeline.tail && pipeline.tail.pipe(task);\n    pipeline.tail = task;\n    task.__idxInPipeline = pipeline.count++;\n    task.__pipeline = pipeline;\n  };\n\n  Scheduler.wrapStageHandler = function (stageHandler, visualType) {\n    if (isFunction(stageHandler)) {\n      stageHandler = {\n        overallReset: stageHandler,\n        seriesType: detectSeriseType(stageHandler)\n      };\n    }\n\n    stageHandler.uid = getUID('stageHandler');\n    visualType && (stageHandler.visualType = visualType);\n    return stageHandler;\n  };\n\n  ;\n  return Scheduler;\n}();\n\nfunction overallTaskReset(context) {\n  context.overallReset(context.ecModel, context.api, context.payload);\n}\n\nfunction stubReset(context) {\n  return context.overallProgress && stubProgress;\n}\n\nfunction stubProgress() {\n  this.agent.dirty();\n  this.getDownstream().dirty();\n}\n\nfunction stubOnDirty() {\n  this.agent && this.agent.dirty();\n}\n\nfunction seriesTaskPlan(context) {\n  return context.plan ? context.plan(context.model, context.ecModel, context.api, context.payload) : null;\n}\n\nfunction seriesTaskReset(context) {\n  if (context.useClearVisual) {\n    context.data.clearAllVisual();\n  }\n\n  var resetDefines = context.resetDefines = normalizeToArray(context.reset(context.model, context.ecModel, context.api, context.payload));\n  return resetDefines.length > 1 ? map(resetDefines, function (v, idx) {\n    return makeSeriesTaskProgress(idx);\n  }) : singleSeriesTaskProgress;\n}\n\nvar singleSeriesTaskProgress = makeSeriesTaskProgress(0);\n\nfunction makeSeriesTaskProgress(resetDefineIdx) {\n  return function (params, context) {\n    var data = context.data;\n    var resetDefine = context.resetDefines[resetDefineIdx];\n\n    if (resetDefine && resetDefine.dataEach) {\n      for (var i = params.start; i < params.end; i++) {\n        resetDefine.dataEach(data, i);\n      }\n    } else if (resetDefine && resetDefine.progress) {\n      resetDefine.progress(params, data);\n    }\n  };\n}\n\nfunction seriesTaskCount(context) {\n  return context.data.count();\n}\n/**\n * Only some legacy stage handlers (usually in echarts extensions) are pure function.\n * To ensure that they can work normally, they should work in block mode, that is,\n * they should not be started util the previous tasks finished. So they cause the\n * progressive rendering disabled. We try to detect the series type, to narrow down\n * the block range to only the series type they concern, but not all series.\n */\n\n\nfunction detectSeriseType(legacyFunc) {\n  seriesType = null;\n\n  try {\n    // Assume there is no async when calling `eachSeriesByType`.\n    legacyFunc(ecModelMock, apiMock);\n  } catch (e) {}\n\n  return seriesType;\n}\n\nvar ecModelMock = {};\nvar apiMock = {};\nvar seriesType;\nmockMethods(ecModelMock, GlobalModel);\nmockMethods(apiMock, ExtensionAPI);\n\necModelMock.eachSeriesByType = ecModelMock.eachRawSeriesByType = function (type) {\n  seriesType = type;\n};\n\necModelMock.eachComponent = function (cond) {\n  if (cond.mainType === 'series' && cond.subType) {\n    seriesType = cond.subType;\n  }\n};\n\nfunction mockMethods(target, Clz) {\n  /* eslint-disable */\n  for (var name_1 in Clz.prototype) {\n    // Do not use hasOwnProperty\n    target[name_1] = noop;\n  }\n  /* eslint-enable */\n\n}\n\nexport default Scheduler;"]},"metadata":{},"sourceType":"module"}