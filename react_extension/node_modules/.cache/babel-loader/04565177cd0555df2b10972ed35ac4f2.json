{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport SeriesModel from '../../model/Series';\nimport prepareSeriesDataSchema from '../../data/helper/createDimensions';\nimport { getDimensionTypeByAxis } from '../../data/helper/dimensionHelper';\nimport SeriesData from '../../data/SeriesData';\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { groupData, SINGLE_REFERRING } from '../../util/model';\nimport LegendVisualProvider from '../../visual/LegendVisualProvider';\nimport { createTooltipMarkup } from '../../component/tooltip/tooltipMarkup';\nvar DATA_NAME_INDEX = 2;\n\nvar ThemeRiverSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(ThemeRiverSeriesModel, _super);\n\n  function ThemeRiverSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = ThemeRiverSeriesModel.type;\n    return _this;\n  }\n  /**\n   * @override\n   */\n\n\n  ThemeRiverSeriesModel.prototype.init = function (option) {\n    // eslint-disable-next-line\n    _super.prototype.init.apply(this, arguments); // Put this function here is for the sake of consistency of code style.\n    // Enable legend selection for each data item\n    // Use a function instead of direct access because data reference may changed\n\n\n    this.legendVisualProvider = new LegendVisualProvider(zrUtil.bind(this.getData, this), zrUtil.bind(this.getRawData, this));\n  };\n  /**\n   * If there is no value of a certain point in the time for some event,set it value to 0.\n   *\n   * @param {Array} data  initial data in the option\n   * @return {Array}\n   */\n\n\n  ThemeRiverSeriesModel.prototype.fixData = function (data) {\n    var rawDataLength = data.length;\n    /**\n     * Make sure every layer data get the same keys.\n     * The value index tells which layer has visited.\n     * {\n     *  2014/01/01: -1\n     * }\n     */\n\n    var timeValueKeys = {}; // grouped data by name\n\n    var groupResult = groupData(data, function (item) {\n      if (!timeValueKeys.hasOwnProperty(item[0] + '')) {\n        timeValueKeys[item[0] + ''] = -1;\n      }\n\n      return item[2];\n    });\n    var layerData = [];\n    groupResult.buckets.each(function (items, key) {\n      layerData.push({\n        name: key,\n        dataList: items\n      });\n    });\n    var layerNum = layerData.length;\n\n    for (var k = 0; k < layerNum; ++k) {\n      var name_1 = layerData[k].name;\n\n      for (var j = 0; j < layerData[k].dataList.length; ++j) {\n        var timeValue = layerData[k].dataList[j][0] + '';\n        timeValueKeys[timeValue] = k;\n      }\n\n      for (var timeValue in timeValueKeys) {\n        if (timeValueKeys.hasOwnProperty(timeValue) && timeValueKeys[timeValue] !== k) {\n          timeValueKeys[timeValue] = k;\n          data[rawDataLength] = [timeValue, 0, name_1];\n          rawDataLength++;\n        }\n      }\n    }\n\n    return data;\n  };\n  /**\n   * @override\n   * @param  option  the initial option that user gived\n   * @param  ecModel  the model object for themeRiver option\n   */\n\n\n  ThemeRiverSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    var singleAxisModel = this.getReferringComponents('singleAxis', SINGLE_REFERRING).models[0];\n    var axisType = singleAxisModel.get('type'); // filter the data item with the value of label is undefined\n\n    var filterData = zrUtil.filter(option.data, function (dataItem) {\n      return dataItem[2] !== undefined;\n    }); // ??? TODO design a stage to transfer data for themeRiver and lines?\n\n    var data = this.fixData(filterData || []);\n    var nameList = [];\n    var nameMap = this.nameMap = zrUtil.createHashMap();\n    var count = 0;\n\n    for (var i = 0; i < data.length; ++i) {\n      nameList.push(data[i][DATA_NAME_INDEX]);\n\n      if (!nameMap.get(data[i][DATA_NAME_INDEX])) {\n        nameMap.set(data[i][DATA_NAME_INDEX], count);\n        count++;\n      }\n    }\n\n    var dimensions = prepareSeriesDataSchema(data, {\n      coordDimensions: ['single'],\n      dimensionsDefine: [{\n        name: 'time',\n        type: getDimensionTypeByAxis(axisType)\n      }, {\n        name: 'value',\n        type: 'float'\n      }, {\n        name: 'name',\n        type: 'ordinal'\n      }],\n      encodeDefine: {\n        single: 0,\n        value: 1,\n        itemName: 2\n      }\n    }).dimensions;\n    var list = new SeriesData(dimensions, this);\n    list.initData(data);\n    return list;\n  };\n  /**\n   * The raw data is divided into multiple layers and each layer\n   *     has same name.\n   */\n\n\n  ThemeRiverSeriesModel.prototype.getLayerSeries = function () {\n    var data = this.getData();\n    var lenCount = data.count();\n    var indexArr = [];\n\n    for (var i = 0; i < lenCount; ++i) {\n      indexArr[i] = i;\n    }\n\n    var timeDim = data.mapDimension('single'); // data group by name\n\n    var groupResult = groupData(indexArr, function (index) {\n      return data.get('name', index);\n    });\n    var layerSeries = [];\n    groupResult.buckets.each(function (items, key) {\n      items.sort(function (index1, index2) {\n        return data.get(timeDim, index1) - data.get(timeDim, index2);\n      });\n      layerSeries.push({\n        name: key,\n        indices: items\n      });\n    });\n    return layerSeries;\n  };\n  /**\n   * Get data indices for show tooltip content\n   */\n\n\n  ThemeRiverSeriesModel.prototype.getAxisTooltipData = function (dim, value, baseAxis) {\n    if (!zrUtil.isArray(dim)) {\n      dim = dim ? [dim] : [];\n    }\n\n    var data = this.getData();\n    var layerSeries = this.getLayerSeries();\n    var indices = [];\n    var layerNum = layerSeries.length;\n    var nestestValue;\n\n    for (var i = 0; i < layerNum; ++i) {\n      var minDist = Number.MAX_VALUE;\n      var nearestIdx = -1;\n      var pointNum = layerSeries[i].indices.length;\n\n      for (var j = 0; j < pointNum; ++j) {\n        var theValue = data.get(dim[0], layerSeries[i].indices[j]);\n        var dist = Math.abs(theValue - value);\n\n        if (dist <= minDist) {\n          nestestValue = theValue;\n          minDist = dist;\n          nearestIdx = layerSeries[i].indices[j];\n        }\n      }\n\n      indices.push(nearestIdx);\n    }\n\n    return {\n      dataIndices: indices,\n      nestestValue: nestestValue\n    };\n  };\n\n  ThemeRiverSeriesModel.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    var data = this.getData();\n    var name = data.getName(dataIndex);\n    var value = data.get(data.mapDimension('value'), dataIndex);\n    return createTooltipMarkup('nameValue', {\n      name: name,\n      value: value\n    });\n  };\n\n  ThemeRiverSeriesModel.type = 'series.themeRiver';\n  ThemeRiverSeriesModel.dependencies = ['singleAxis'];\n  ThemeRiverSeriesModel.defaultOption = {\n    zlevel: 0,\n    z: 2,\n    colorBy: 'data',\n    coordinateSystem: 'singleAxis',\n    // gap in axis's orthogonal orientation\n    boundaryGap: ['10%', '10%'],\n    // legendHoverLink: true,\n    singleAxisIndex: 0,\n    animationEasing: 'linear',\n    label: {\n      margin: 4,\n      show: true,\n      position: 'left',\n      fontSize: 11\n    },\n    emphasis: {\n      label: {\n        show: true\n      }\n    }\n  };\n  return ThemeRiverSeriesModel;\n}(SeriesModel);\n\nexport default ThemeRiverSeriesModel;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/chart/themeRiver/ThemeRiverSeries.js"],"names":["__extends","SeriesModel","prepareSeriesDataSchema","getDimensionTypeByAxis","SeriesData","zrUtil","groupData","SINGLE_REFERRING","LegendVisualProvider","createTooltipMarkup","DATA_NAME_INDEX","ThemeRiverSeriesModel","_super","_this","apply","arguments","type","prototype","init","option","legendVisualProvider","bind","getData","getRawData","fixData","data","rawDataLength","length","timeValueKeys","groupResult","item","hasOwnProperty","layerData","buckets","each","items","key","push","name","dataList","layerNum","k","name_1","j","timeValue","getInitialData","ecModel","singleAxisModel","getReferringComponents","models","axisType","get","filterData","filter","dataItem","undefined","nameList","nameMap","createHashMap","count","i","set","dimensions","coordDimensions","dimensionsDefine","encodeDefine","single","value","itemName","list","initData","getLayerSeries","lenCount","indexArr","timeDim","mapDimension","index","layerSeries","sort","index1","index2","indices","getAxisTooltipData","dim","baseAxis","isArray","nestestValue","minDist","Number","MAX_VALUE","nearestIdx","pointNum","theValue","dist","Math","abs","dataIndices","formatTooltip","dataIndex","multipleSeries","dataType","getName","dependencies","defaultOption","zlevel","z","colorBy","coordinateSystem","boundaryGap","singleAxisIndex","animationEasing","label","margin","show","position","fontSize","emphasis"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,OAAOC,uBAAP,MAAoC,oCAApC;AACA,SAASC,sBAAT,QAAuC,mCAAvC;AACA,OAAOC,UAAP,MAAuB,uBAAvB;AACA,OAAO,KAAKC,MAAZ,MAAwB,uBAAxB;AACA,SAASC,SAAT,EAAoBC,gBAApB,QAA4C,kBAA5C;AACA,OAAOC,oBAAP,MAAiC,mCAAjC;AACA,SAASC,mBAAT,QAAoC,uCAApC;AACA,IAAIC,eAAe,GAAG,CAAtB;;AAEA,IAAIC,qBAAqB;AACzB;AACA,UAAUC,MAAV,EAAkB;AAChBZ,EAAAA,SAAS,CAACW,qBAAD,EAAwBC,MAAxB,CAAT;;AAEA,WAASD,qBAAT,GAAiC;AAC/B,QAAIE,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAAhE;;AAEAF,IAAAA,KAAK,CAACG,IAAN,GAAaL,qBAAqB,CAACK,IAAnC;AACA,WAAOH,KAAP;AACD;AACD;AACF;AACA;;;AAGEF,EAAAA,qBAAqB,CAACM,SAAtB,CAAgCC,IAAhC,GAAuC,UAAUC,MAAV,EAAkB;AACvD;AACAP,IAAAA,MAAM,CAACK,SAAP,CAAiBC,IAAjB,CAAsBJ,KAAtB,CAA4B,IAA5B,EAAkCC,SAAlC,EAFuD,CAET;AAC9C;AACA;;;AAGA,SAAKK,oBAAL,GAA4B,IAAIZ,oBAAJ,CAAyBH,MAAM,CAACgB,IAAP,CAAY,KAAKC,OAAjB,EAA0B,IAA1B,CAAzB,EAA0DjB,MAAM,CAACgB,IAAP,CAAY,KAAKE,UAAjB,EAA6B,IAA7B,CAA1D,CAA5B;AACD,GARD;AASA;AACF;AACA;AACA;AACA;AACA;;;AAGEZ,EAAAA,qBAAqB,CAACM,SAAtB,CAAgCO,OAAhC,GAA0C,UAAUC,IAAV,EAAgB;AACxD,QAAIC,aAAa,GAAGD,IAAI,CAACE,MAAzB;AACA;AACJ;AACA;AACA;AACA;AACA;AACA;;AAEI,QAAIC,aAAa,GAAG,EAApB,CAVwD,CAUhC;;AAExB,QAAIC,WAAW,GAAGvB,SAAS,CAACmB,IAAD,EAAO,UAAUK,IAAV,EAAgB;AAChD,UAAI,CAACF,aAAa,CAACG,cAAd,CAA6BD,IAAI,CAAC,CAAD,CAAJ,GAAU,EAAvC,CAAL,EAAiD;AAC/CF,QAAAA,aAAa,CAACE,IAAI,CAAC,CAAD,CAAJ,GAAU,EAAX,CAAb,GAA8B,CAAC,CAA/B;AACD;;AAED,aAAOA,IAAI,CAAC,CAAD,CAAX;AACD,KAN0B,CAA3B;AAOA,QAAIE,SAAS,GAAG,EAAhB;AACAH,IAAAA,WAAW,CAACI,OAAZ,CAAoBC,IAApB,CAAyB,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AAC7CJ,MAAAA,SAAS,CAACK,IAAV,CAAe;AACbC,QAAAA,IAAI,EAAEF,GADO;AAEbG,QAAAA,QAAQ,EAAEJ;AAFG,OAAf;AAID,KALD;AAMA,QAAIK,QAAQ,GAAGR,SAAS,CAACL,MAAzB;;AAEA,SAAK,IAAIc,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGD,QAApB,EAA8B,EAAEC,CAAhC,EAAmC;AACjC,UAAIC,MAAM,GAAGV,SAAS,CAACS,CAAD,CAAT,CAAaH,IAA1B;;AAEA,WAAK,IAAIK,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGX,SAAS,CAACS,CAAD,CAAT,CAAaF,QAAb,CAAsBZ,MAA1C,EAAkD,EAAEgB,CAApD,EAAuD;AACrD,YAAIC,SAAS,GAAGZ,SAAS,CAACS,CAAD,CAAT,CAAaF,QAAb,CAAsBI,CAAtB,EAAyB,CAAzB,IAA8B,EAA9C;AACAf,QAAAA,aAAa,CAACgB,SAAD,CAAb,GAA2BH,CAA3B;AACD;;AAED,WAAK,IAAIG,SAAT,IAAsBhB,aAAtB,EAAqC;AACnC,YAAIA,aAAa,CAACG,cAAd,CAA6Ba,SAA7B,KAA2ChB,aAAa,CAACgB,SAAD,CAAb,KAA6BH,CAA5E,EAA+E;AAC7Eb,UAAAA,aAAa,CAACgB,SAAD,CAAb,GAA2BH,CAA3B;AACAhB,UAAAA,IAAI,CAACC,aAAD,CAAJ,GAAsB,CAACkB,SAAD,EAAY,CAAZ,EAAeF,MAAf,CAAtB;AACAhB,UAAAA,aAAa;AACd;AACF;AACF;;AAED,WAAOD,IAAP;AACD,GA9CD;AA+CA;AACF;AACA;AACA;AACA;;;AAGEd,EAAAA,qBAAqB,CAACM,SAAtB,CAAgC4B,cAAhC,GAAiD,UAAU1B,MAAV,EAAkB2B,OAAlB,EAA2B;AAC1E,QAAIC,eAAe,GAAG,KAAKC,sBAAL,CAA4B,YAA5B,EAA0CzC,gBAA1C,EAA4D0C,MAA5D,CAAmE,CAAnE,CAAtB;AACA,QAAIC,QAAQ,GAAGH,eAAe,CAACI,GAAhB,CAAoB,MAApB,CAAf,CAF0E,CAE9B;;AAE5C,QAAIC,UAAU,GAAG/C,MAAM,CAACgD,MAAP,CAAclC,MAAM,CAACM,IAArB,EAA2B,UAAU6B,QAAV,EAAoB;AAC9D,aAAOA,QAAQ,CAAC,CAAD,CAAR,KAAgBC,SAAvB;AACD,KAFgB,CAAjB,CAJ0E,CAMtE;;AAEJ,QAAI9B,IAAI,GAAG,KAAKD,OAAL,CAAa4B,UAAU,IAAI,EAA3B,CAAX;AACA,QAAII,QAAQ,GAAG,EAAf;AACA,QAAIC,OAAO,GAAG,KAAKA,OAAL,GAAepD,MAAM,CAACqD,aAAP,EAA7B;AACA,QAAIC,KAAK,GAAG,CAAZ;;AAEA,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGnC,IAAI,CAACE,MAAzB,EAAiC,EAAEiC,CAAnC,EAAsC;AACpCJ,MAAAA,QAAQ,CAACnB,IAAT,CAAcZ,IAAI,CAACmC,CAAD,CAAJ,CAAQlD,eAAR,CAAd;;AAEA,UAAI,CAAC+C,OAAO,CAACN,GAAR,CAAY1B,IAAI,CAACmC,CAAD,CAAJ,CAAQlD,eAAR,CAAZ,CAAL,EAA4C;AAC1C+C,QAAAA,OAAO,CAACI,GAAR,CAAYpC,IAAI,CAACmC,CAAD,CAAJ,CAAQlD,eAAR,CAAZ,EAAsCiD,KAAtC;AACAA,QAAAA,KAAK;AACN;AACF;;AAED,QAAIG,UAAU,GAAG5D,uBAAuB,CAACuB,IAAD,EAAO;AAC7CsC,MAAAA,eAAe,EAAE,CAAC,QAAD,CAD4B;AAE7CC,MAAAA,gBAAgB,EAAE,CAAC;AACjB1B,QAAAA,IAAI,EAAE,MADW;AAEjBtB,QAAAA,IAAI,EAAEb,sBAAsB,CAAC+C,QAAD;AAFX,OAAD,EAGf;AACDZ,QAAAA,IAAI,EAAE,OADL;AAEDtB,QAAAA,IAAI,EAAE;AAFL,OAHe,EAMf;AACDsB,QAAAA,IAAI,EAAE,MADL;AAEDtB,QAAAA,IAAI,EAAE;AAFL,OANe,CAF2B;AAY7CiD,MAAAA,YAAY,EAAE;AACZC,QAAAA,MAAM,EAAE,CADI;AAEZC,QAAAA,KAAK,EAAE,CAFK;AAGZC,QAAAA,QAAQ,EAAE;AAHE;AAZ+B,KAAP,CAAvB,CAiBdN,UAjBH;AAkBA,QAAIO,IAAI,GAAG,IAAIjE,UAAJ,CAAe0D,UAAf,EAA2B,IAA3B,CAAX;AACAO,IAAAA,IAAI,CAACC,QAAL,CAAc7C,IAAd;AACA,WAAO4C,IAAP;AACD,GA3CD;AA4CA;AACF;AACA;AACA;;;AAGE1D,EAAAA,qBAAqB,CAACM,SAAtB,CAAgCsD,cAAhC,GAAiD,YAAY;AAC3D,QAAI9C,IAAI,GAAG,KAAKH,OAAL,EAAX;AACA,QAAIkD,QAAQ,GAAG/C,IAAI,CAACkC,KAAL,EAAf;AACA,QAAIc,QAAQ,GAAG,EAAf;;AAEA,SAAK,IAAIb,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGY,QAApB,EAA8B,EAAEZ,CAAhC,EAAmC;AACjCa,MAAAA,QAAQ,CAACb,CAAD,CAAR,GAAcA,CAAd;AACD;;AAED,QAAIc,OAAO,GAAGjD,IAAI,CAACkD,YAAL,CAAkB,QAAlB,CAAd,CAT2D,CAShB;;AAE3C,QAAI9C,WAAW,GAAGvB,SAAS,CAACmE,QAAD,EAAW,UAAUG,KAAV,EAAiB;AACrD,aAAOnD,IAAI,CAAC0B,GAAL,CAAS,MAAT,EAAiByB,KAAjB,CAAP;AACD,KAF0B,CAA3B;AAGA,QAAIC,WAAW,GAAG,EAAlB;AACAhD,IAAAA,WAAW,CAACI,OAAZ,CAAoBC,IAApB,CAAyB,UAAUC,KAAV,EAAiBC,GAAjB,EAAsB;AAC7CD,MAAAA,KAAK,CAAC2C,IAAN,CAAW,UAAUC,MAAV,EAAkBC,MAAlB,EAA0B;AACnC,eAAOvD,IAAI,CAAC0B,GAAL,CAASuB,OAAT,EAAkBK,MAAlB,IAA4BtD,IAAI,CAAC0B,GAAL,CAASuB,OAAT,EAAkBM,MAAlB,CAAnC;AACD,OAFD;AAGAH,MAAAA,WAAW,CAACxC,IAAZ,CAAiB;AACfC,QAAAA,IAAI,EAAEF,GADS;AAEf6C,QAAAA,OAAO,EAAE9C;AAFM,OAAjB;AAID,KARD;AASA,WAAO0C,WAAP;AACD,GAzBD;AA0BA;AACF;AACA;;;AAGElE,EAAAA,qBAAqB,CAACM,SAAtB,CAAgCiE,kBAAhC,GAAqD,UAAUC,GAAV,EAAehB,KAAf,EAAsBiB,QAAtB,EAAgC;AACnF,QAAI,CAAC/E,MAAM,CAACgF,OAAP,CAAeF,GAAf,CAAL,EAA0B;AACxBA,MAAAA,GAAG,GAAGA,GAAG,GAAG,CAACA,GAAD,CAAH,GAAW,EAApB;AACD;;AAED,QAAI1D,IAAI,GAAG,KAAKH,OAAL,EAAX;AACA,QAAIuD,WAAW,GAAG,KAAKN,cAAL,EAAlB;AACA,QAAIU,OAAO,GAAG,EAAd;AACA,QAAIzC,QAAQ,GAAGqC,WAAW,CAAClD,MAA3B;AACA,QAAI2D,YAAJ;;AAEA,SAAK,IAAI1B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGpB,QAApB,EAA8B,EAAEoB,CAAhC,EAAmC;AACjC,UAAI2B,OAAO,GAAGC,MAAM,CAACC,SAArB;AACA,UAAIC,UAAU,GAAG,CAAC,CAAlB;AACA,UAAIC,QAAQ,GAAGd,WAAW,CAACjB,CAAD,CAAX,CAAeqB,OAAf,CAAuBtD,MAAtC;;AAEA,WAAK,IAAIgB,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGgD,QAApB,EAA8B,EAAEhD,CAAhC,EAAmC;AACjC,YAAIiD,QAAQ,GAAGnE,IAAI,CAAC0B,GAAL,CAASgC,GAAG,CAAC,CAAD,CAAZ,EAAiBN,WAAW,CAACjB,CAAD,CAAX,CAAeqB,OAAf,CAAuBtC,CAAvB,CAAjB,CAAf;AACA,YAAIkD,IAAI,GAAGC,IAAI,CAACC,GAAL,CAASH,QAAQ,GAAGzB,KAApB,CAAX;;AAEA,YAAI0B,IAAI,IAAIN,OAAZ,EAAqB;AACnBD,UAAAA,YAAY,GAAGM,QAAf;AACAL,UAAAA,OAAO,GAAGM,IAAV;AACAH,UAAAA,UAAU,GAAGb,WAAW,CAACjB,CAAD,CAAX,CAAeqB,OAAf,CAAuBtC,CAAvB,CAAb;AACD;AACF;;AAEDsC,MAAAA,OAAO,CAAC5C,IAAR,CAAaqD,UAAb;AACD;;AAED,WAAO;AACLM,MAAAA,WAAW,EAAEf,OADR;AAELK,MAAAA,YAAY,EAAEA;AAFT,KAAP;AAID,GAlCD;;AAoCA3E,EAAAA,qBAAqB,CAACM,SAAtB,CAAgCgF,aAAhC,GAAgD,UAAUC,SAAV,EAAqBC,cAArB,EAAqCC,QAArC,EAA+C;AAC7F,QAAI3E,IAAI,GAAG,KAAKH,OAAL,EAAX;AACA,QAAIgB,IAAI,GAAGb,IAAI,CAAC4E,OAAL,CAAaH,SAAb,CAAX;AACA,QAAI/B,KAAK,GAAG1C,IAAI,CAAC0B,GAAL,CAAS1B,IAAI,CAACkD,YAAL,CAAkB,OAAlB,CAAT,EAAqCuB,SAArC,CAAZ;AACA,WAAOzF,mBAAmB,CAAC,WAAD,EAAc;AACtC6B,MAAAA,IAAI,EAAEA,IADgC;AAEtC6B,MAAAA,KAAK,EAAEA;AAF+B,KAAd,CAA1B;AAID,GARD;;AAUAxD,EAAAA,qBAAqB,CAACK,IAAtB,GAA6B,mBAA7B;AACAL,EAAAA,qBAAqB,CAAC2F,YAAtB,GAAqC,CAAC,YAAD,CAArC;AACA3F,EAAAA,qBAAqB,CAAC4F,aAAtB,GAAsC;AACpCC,IAAAA,MAAM,EAAE,CAD4B;AAEpCC,IAAAA,CAAC,EAAE,CAFiC;AAGpCC,IAAAA,OAAO,EAAE,MAH2B;AAIpCC,IAAAA,gBAAgB,EAAE,YAJkB;AAKpC;AACAC,IAAAA,WAAW,EAAE,CAAC,KAAD,EAAQ,KAAR,CANuB;AAOpC;AACAC,IAAAA,eAAe,EAAE,CARmB;AASpCC,IAAAA,eAAe,EAAE,QATmB;AAUpCC,IAAAA,KAAK,EAAE;AACLC,MAAAA,MAAM,EAAE,CADH;AAELC,MAAAA,IAAI,EAAE,IAFD;AAGLC,MAAAA,QAAQ,EAAE,MAHL;AAILC,MAAAA,QAAQ,EAAE;AAJL,KAV6B;AAgBpCC,IAAAA,QAAQ,EAAE;AACRL,MAAAA,KAAK,EAAE;AACLE,QAAAA,IAAI,EAAE;AADD;AADC;AAhB0B,GAAtC;AAsBA,SAAOtG,qBAAP;AACD,CA7OD,CA6OEV,WA7OF,CAFA;;AAiPA,eAAeU,qBAAf","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport SeriesModel from '../../model/Series';\nimport prepareSeriesDataSchema from '../../data/helper/createDimensions';\nimport { getDimensionTypeByAxis } from '../../data/helper/dimensionHelper';\nimport SeriesData from '../../data/SeriesData';\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { groupData, SINGLE_REFERRING } from '../../util/model';\nimport LegendVisualProvider from '../../visual/LegendVisualProvider';\nimport { createTooltipMarkup } from '../../component/tooltip/tooltipMarkup';\nvar DATA_NAME_INDEX = 2;\n\nvar ThemeRiverSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(ThemeRiverSeriesModel, _super);\n\n  function ThemeRiverSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = ThemeRiverSeriesModel.type;\n    return _this;\n  }\n  /**\n   * @override\n   */\n\n\n  ThemeRiverSeriesModel.prototype.init = function (option) {\n    // eslint-disable-next-line\n    _super.prototype.init.apply(this, arguments); // Put this function here is for the sake of consistency of code style.\n    // Enable legend selection for each data item\n    // Use a function instead of direct access because data reference may changed\n\n\n    this.legendVisualProvider = new LegendVisualProvider(zrUtil.bind(this.getData, this), zrUtil.bind(this.getRawData, this));\n  };\n  /**\n   * If there is no value of a certain point in the time for some event,set it value to 0.\n   *\n   * @param {Array} data  initial data in the option\n   * @return {Array}\n   */\n\n\n  ThemeRiverSeriesModel.prototype.fixData = function (data) {\n    var rawDataLength = data.length;\n    /**\n     * Make sure every layer data get the same keys.\n     * The value index tells which layer has visited.\n     * {\n     *  2014/01/01: -1\n     * }\n     */\n\n    var timeValueKeys = {}; // grouped data by name\n\n    var groupResult = groupData(data, function (item) {\n      if (!timeValueKeys.hasOwnProperty(item[0] + '')) {\n        timeValueKeys[item[0] + ''] = -1;\n      }\n\n      return item[2];\n    });\n    var layerData = [];\n    groupResult.buckets.each(function (items, key) {\n      layerData.push({\n        name: key,\n        dataList: items\n      });\n    });\n    var layerNum = layerData.length;\n\n    for (var k = 0; k < layerNum; ++k) {\n      var name_1 = layerData[k].name;\n\n      for (var j = 0; j < layerData[k].dataList.length; ++j) {\n        var timeValue = layerData[k].dataList[j][0] + '';\n        timeValueKeys[timeValue] = k;\n      }\n\n      for (var timeValue in timeValueKeys) {\n        if (timeValueKeys.hasOwnProperty(timeValue) && timeValueKeys[timeValue] !== k) {\n          timeValueKeys[timeValue] = k;\n          data[rawDataLength] = [timeValue, 0, name_1];\n          rawDataLength++;\n        }\n      }\n    }\n\n    return data;\n  };\n  /**\n   * @override\n   * @param  option  the initial option that user gived\n   * @param  ecModel  the model object for themeRiver option\n   */\n\n\n  ThemeRiverSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    var singleAxisModel = this.getReferringComponents('singleAxis', SINGLE_REFERRING).models[0];\n    var axisType = singleAxisModel.get('type'); // filter the data item with the value of label is undefined\n\n    var filterData = zrUtil.filter(option.data, function (dataItem) {\n      return dataItem[2] !== undefined;\n    }); // ??? TODO design a stage to transfer data for themeRiver and lines?\n\n    var data = this.fixData(filterData || []);\n    var nameList = [];\n    var nameMap = this.nameMap = zrUtil.createHashMap();\n    var count = 0;\n\n    for (var i = 0; i < data.length; ++i) {\n      nameList.push(data[i][DATA_NAME_INDEX]);\n\n      if (!nameMap.get(data[i][DATA_NAME_INDEX])) {\n        nameMap.set(data[i][DATA_NAME_INDEX], count);\n        count++;\n      }\n    }\n\n    var dimensions = prepareSeriesDataSchema(data, {\n      coordDimensions: ['single'],\n      dimensionsDefine: [{\n        name: 'time',\n        type: getDimensionTypeByAxis(axisType)\n      }, {\n        name: 'value',\n        type: 'float'\n      }, {\n        name: 'name',\n        type: 'ordinal'\n      }],\n      encodeDefine: {\n        single: 0,\n        value: 1,\n        itemName: 2\n      }\n    }).dimensions;\n    var list = new SeriesData(dimensions, this);\n    list.initData(data);\n    return list;\n  };\n  /**\n   * The raw data is divided into multiple layers and each layer\n   *     has same name.\n   */\n\n\n  ThemeRiverSeriesModel.prototype.getLayerSeries = function () {\n    var data = this.getData();\n    var lenCount = data.count();\n    var indexArr = [];\n\n    for (var i = 0; i < lenCount; ++i) {\n      indexArr[i] = i;\n    }\n\n    var timeDim = data.mapDimension('single'); // data group by name\n\n    var groupResult = groupData(indexArr, function (index) {\n      return data.get('name', index);\n    });\n    var layerSeries = [];\n    groupResult.buckets.each(function (items, key) {\n      items.sort(function (index1, index2) {\n        return data.get(timeDim, index1) - data.get(timeDim, index2);\n      });\n      layerSeries.push({\n        name: key,\n        indices: items\n      });\n    });\n    return layerSeries;\n  };\n  /**\n   * Get data indices for show tooltip content\n   */\n\n\n  ThemeRiverSeriesModel.prototype.getAxisTooltipData = function (dim, value, baseAxis) {\n    if (!zrUtil.isArray(dim)) {\n      dim = dim ? [dim] : [];\n    }\n\n    var data = this.getData();\n    var layerSeries = this.getLayerSeries();\n    var indices = [];\n    var layerNum = layerSeries.length;\n    var nestestValue;\n\n    for (var i = 0; i < layerNum; ++i) {\n      var minDist = Number.MAX_VALUE;\n      var nearestIdx = -1;\n      var pointNum = layerSeries[i].indices.length;\n\n      for (var j = 0; j < pointNum; ++j) {\n        var theValue = data.get(dim[0], layerSeries[i].indices[j]);\n        var dist = Math.abs(theValue - value);\n\n        if (dist <= minDist) {\n          nestestValue = theValue;\n          minDist = dist;\n          nearestIdx = layerSeries[i].indices[j];\n        }\n      }\n\n      indices.push(nearestIdx);\n    }\n\n    return {\n      dataIndices: indices,\n      nestestValue: nestestValue\n    };\n  };\n\n  ThemeRiverSeriesModel.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    var data = this.getData();\n    var name = data.getName(dataIndex);\n    var value = data.get(data.mapDimension('value'), dataIndex);\n    return createTooltipMarkup('nameValue', {\n      name: name,\n      value: value\n    });\n  };\n\n  ThemeRiverSeriesModel.type = 'series.themeRiver';\n  ThemeRiverSeriesModel.dependencies = ['singleAxis'];\n  ThemeRiverSeriesModel.defaultOption = {\n    zlevel: 0,\n    z: 2,\n    colorBy: 'data',\n    coordinateSystem: 'singleAxis',\n    // gap in axis's orthogonal orientation\n    boundaryGap: ['10%', '10%'],\n    // legendHoverLink: true,\n    singleAxisIndex: 0,\n    animationEasing: 'linear',\n    label: {\n      margin: 4,\n      show: true,\n      position: 'left',\n      fontSize: 11\n    },\n    emphasis: {\n      label: {\n        show: true\n      }\n    }\n  };\n  return ThemeRiverSeriesModel;\n}(SeriesModel);\n\nexport default ThemeRiverSeriesModel;"]},"metadata":{},"sourceType":"module"}