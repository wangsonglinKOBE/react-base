{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { SOURCE_FORMAT_ARRAY_ROWS, SOURCE_FORMAT_OBJECT_ROWS } from '../../util/types';\nimport { makePrintable, throwError } from '../../util/log';\nimport { each } from 'zrender/lib/core/util';\nimport { normalizeToArray } from '../../util/model';\nimport { getRawValueParser, SortOrderComparator } from '../../data/helper/dataValueHelper';\nvar sampleLog = '';\n\nif (process.env.NODE_ENV !== 'production') {\n  sampleLog = ['Valid config is like:', '{ dimension: \"age\", order: \"asc\" }', 'or [{ dimension: \"age\", order: \"asc\"], { dimension: \"date\", order: \"desc\" }]'].join(' ');\n}\n\nexport var sortTransform = {\n  type: 'echarts:sort',\n  transform: function (params) {\n    var upstream = params.upstream;\n    var config = params.config;\n    var errMsg = ''; // Normalize\n    // const orderExprList: OrderExpression[] = isArray(config[0])\n    //     ? config as OrderExpression[]\n    //     : [config as OrderExpression];\n\n    var orderExprList = normalizeToArray(config);\n\n    if (!orderExprList.length) {\n      if (process.env.NODE_ENV !== 'production') {\n        errMsg = 'Empty `config` in sort transform.';\n      }\n\n      throwError(errMsg);\n    }\n\n    var orderDefList = [];\n    each(orderExprList, function (orderExpr) {\n      var dimLoose = orderExpr.dimension;\n      var order = orderExpr.order;\n      var parserName = orderExpr.parser;\n      var incomparable = orderExpr.incomparable;\n\n      if (dimLoose == null) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'Sort transform config must has \"dimension\" specified.' + sampleLog;\n        }\n\n        throwError(errMsg);\n      }\n\n      if (order !== 'asc' && order !== 'desc') {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'Sort transform config must has \"order\" specified.' + sampleLog;\n        }\n\n        throwError(errMsg);\n      }\n\n      if (incomparable && incomparable !== 'min' && incomparable !== 'max') {\n        var errMsg_1 = '';\n\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg_1 = 'incomparable must be \"min\" or \"max\" rather than \"' + incomparable + '\".';\n        }\n\n        throwError(errMsg_1);\n      }\n\n      if (order !== 'asc' && order !== 'desc') {\n        var errMsg_2 = '';\n\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg_2 = 'order must be \"asc\" or \"desc\" rather than \"' + order + '\".';\n        }\n\n        throwError(errMsg_2);\n      }\n\n      var dimInfo = upstream.getDimensionInfo(dimLoose);\n\n      if (!dimInfo) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = makePrintable('Can not find dimension info via: ' + dimLoose + '.\\n', 'Existing dimensions: ', upstream.cloneAllDimensionInfo(), '.\\n', 'Illegal config:', orderExpr, '.\\n');\n        }\n\n        throwError(errMsg);\n      }\n\n      var parser = parserName ? getRawValueParser(parserName) : null;\n\n      if (parserName && !parser) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = makePrintable('Invalid parser name ' + parserName + '.\\n', 'Illegal config:', orderExpr, '.\\n');\n        }\n\n        throwError(errMsg);\n      }\n\n      orderDefList.push({\n        dimIdx: dimInfo.index,\n        parser: parser,\n        comparator: new SortOrderComparator(order, incomparable)\n      });\n    }); // TODO: support it?\n\n    var sourceFormat = upstream.sourceFormat;\n\n    if (sourceFormat !== SOURCE_FORMAT_ARRAY_ROWS && sourceFormat !== SOURCE_FORMAT_OBJECT_ROWS) {\n      if (process.env.NODE_ENV !== 'production') {\n        errMsg = 'sourceFormat \"' + sourceFormat + '\" is not supported yet';\n      }\n\n      throwError(errMsg);\n    } // Other upstream format are all array.\n\n\n    var resultData = [];\n\n    for (var i = 0, len = upstream.count(); i < len; i++) {\n      resultData.push(upstream.getRawDataItem(i));\n    }\n\n    resultData.sort(function (item0, item1) {\n      for (var i = 0; i < orderDefList.length; i++) {\n        var orderDef = orderDefList[i];\n        var val0 = upstream.retrieveValueFromItem(item0, orderDef.dimIdx);\n        var val1 = upstream.retrieveValueFromItem(item1, orderDef.dimIdx);\n\n        if (orderDef.parser) {\n          val0 = orderDef.parser(val0);\n          val1 = orderDef.parser(val1);\n        }\n\n        var result = orderDef.comparator.evaluate(val0, val1);\n\n        if (result !== 0) {\n          return result;\n        }\n      }\n\n      return 0;\n    });\n    return {\n      data: resultData\n    };\n  }\n};","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/component/transform/sortTransform.js"],"names":["SOURCE_FORMAT_ARRAY_ROWS","SOURCE_FORMAT_OBJECT_ROWS","makePrintable","throwError","each","normalizeToArray","getRawValueParser","SortOrderComparator","sampleLog","process","env","NODE_ENV","join","sortTransform","type","transform","params","upstream","config","errMsg","orderExprList","length","orderDefList","orderExpr","dimLoose","dimension","order","parserName","parser","incomparable","errMsg_1","errMsg_2","dimInfo","getDimensionInfo","cloneAllDimensionInfo","push","dimIdx","index","comparator","sourceFormat","resultData","i","len","count","getRawDataItem","sort","item0","item1","orderDef","val0","retrieveValueFromItem","val1","result","evaluate","data"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { SOURCE_FORMAT_ARRAY_ROWS, SOURCE_FORMAT_OBJECT_ROWS } from '../../util/types';\nimport { makePrintable, throwError } from '../../util/log';\nimport { each } from 'zrender/lib/core/util';\nimport { normalizeToArray } from '../../util/model';\nimport { getRawValueParser, SortOrderComparator } from '../../data/helper/dataValueHelper';\nvar sampleLog = '';\n\nif (process.env.NODE_ENV !== 'production') {\n  sampleLog = ['Valid config is like:', '{ dimension: \"age\", order: \"asc\" }', 'or [{ dimension: \"age\", order: \"asc\"], { dimension: \"date\", order: \"desc\" }]'].join(' ');\n}\n\nexport var sortTransform = {\n  type: 'echarts:sort',\n  transform: function (params) {\n    var upstream = params.upstream;\n    var config = params.config;\n    var errMsg = ''; // Normalize\n    // const orderExprList: OrderExpression[] = isArray(config[0])\n    //     ? config as OrderExpression[]\n    //     : [config as OrderExpression];\n\n    var orderExprList = normalizeToArray(config);\n\n    if (!orderExprList.length) {\n      if (process.env.NODE_ENV !== 'production') {\n        errMsg = 'Empty `config` in sort transform.';\n      }\n\n      throwError(errMsg);\n    }\n\n    var orderDefList = [];\n    each(orderExprList, function (orderExpr) {\n      var dimLoose = orderExpr.dimension;\n      var order = orderExpr.order;\n      var parserName = orderExpr.parser;\n      var incomparable = orderExpr.incomparable;\n\n      if (dimLoose == null) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'Sort transform config must has \"dimension\" specified.' + sampleLog;\n        }\n\n        throwError(errMsg);\n      }\n\n      if (order !== 'asc' && order !== 'desc') {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'Sort transform config must has \"order\" specified.' + sampleLog;\n        }\n\n        throwError(errMsg);\n      }\n\n      if (incomparable && incomparable !== 'min' && incomparable !== 'max') {\n        var errMsg_1 = '';\n\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg_1 = 'incomparable must be \"min\" or \"max\" rather than \"' + incomparable + '\".';\n        }\n\n        throwError(errMsg_1);\n      }\n\n      if (order !== 'asc' && order !== 'desc') {\n        var errMsg_2 = '';\n\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg_2 = 'order must be \"asc\" or \"desc\" rather than \"' + order + '\".';\n        }\n\n        throwError(errMsg_2);\n      }\n\n      var dimInfo = upstream.getDimensionInfo(dimLoose);\n\n      if (!dimInfo) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = makePrintable('Can not find dimension info via: ' + dimLoose + '.\\n', 'Existing dimensions: ', upstream.cloneAllDimensionInfo(), '.\\n', 'Illegal config:', orderExpr, '.\\n');\n        }\n\n        throwError(errMsg);\n      }\n\n      var parser = parserName ? getRawValueParser(parserName) : null;\n\n      if (parserName && !parser) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = makePrintable('Invalid parser name ' + parserName + '.\\n', 'Illegal config:', orderExpr, '.\\n');\n        }\n\n        throwError(errMsg);\n      }\n\n      orderDefList.push({\n        dimIdx: dimInfo.index,\n        parser: parser,\n        comparator: new SortOrderComparator(order, incomparable)\n      });\n    }); // TODO: support it?\n\n    var sourceFormat = upstream.sourceFormat;\n\n    if (sourceFormat !== SOURCE_FORMAT_ARRAY_ROWS && sourceFormat !== SOURCE_FORMAT_OBJECT_ROWS) {\n      if (process.env.NODE_ENV !== 'production') {\n        errMsg = 'sourceFormat \"' + sourceFormat + '\" is not supported yet';\n      }\n\n      throwError(errMsg);\n    } // Other upstream format are all array.\n\n\n    var resultData = [];\n\n    for (var i = 0, len = upstream.count(); i < len; i++) {\n      resultData.push(upstream.getRawDataItem(i));\n    }\n\n    resultData.sort(function (item0, item1) {\n      for (var i = 0; i < orderDefList.length; i++) {\n        var orderDef = orderDefList[i];\n        var val0 = upstream.retrieveValueFromItem(item0, orderDef.dimIdx);\n        var val1 = upstream.retrieveValueFromItem(item1, orderDef.dimIdx);\n\n        if (orderDef.parser) {\n          val0 = orderDef.parser(val0);\n          val1 = orderDef.parser(val1);\n        }\n\n        var result = orderDef.comparator.evaluate(val0, val1);\n\n        if (result !== 0) {\n          return result;\n        }\n      }\n\n      return 0;\n    });\n    return {\n      data: resultData\n    };\n  }\n};"]},"metadata":{},"sourceType":"module"}