{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport * as visualSolution from '../../visual/visualSolution';\nimport VisualMapping from '../../visual/VisualMapping';\nimport { getVisualFromData } from '../../visual/helper';\nexport var visualMapEncodingHandlers = [{\n  createOnAllSeries: true,\n  reset: function (seriesModel, ecModel) {\n    var resetDefines = [];\n    ecModel.eachComponent('visualMap', function (visualMapModel) {\n      var pipelineContext = seriesModel.pipelineContext;\n\n      if (!visualMapModel.isTargetSeries(seriesModel) || pipelineContext && pipelineContext.large) {\n        return;\n      }\n\n      resetDefines.push(visualSolution.incrementalApplyVisual(visualMapModel.stateList, visualMapModel.targetVisuals, zrUtil.bind(visualMapModel.getValueState, visualMapModel), visualMapModel.getDataDimensionIndex(seriesModel.getData())));\n    });\n    return resetDefines;\n  }\n}, // Only support color.\n{\n  createOnAllSeries: true,\n  reset: function (seriesModel, ecModel) {\n    var data = seriesModel.getData();\n    var visualMetaList = [];\n    ecModel.eachComponent('visualMap', function (visualMapModel) {\n      if (visualMapModel.isTargetSeries(seriesModel)) {\n        var visualMeta = visualMapModel.getVisualMeta(zrUtil.bind(getColorVisual, null, seriesModel, visualMapModel)) || {\n          stops: [],\n          outerColors: []\n        };\n        var dimIdx = visualMapModel.getDataDimensionIndex(data);\n\n        if (dimIdx >= 0) {\n          // visualMeta.dimension should be dimension index, but not concrete dimension.\n          visualMeta.dimension = dimIdx;\n          visualMetaList.push(visualMeta);\n        }\n      }\n    }); // console.log(JSON.stringify(visualMetaList.map(a => a.stops)));\n\n    seriesModel.getData().setVisual('visualMeta', visualMetaList);\n  }\n}]; // FIXME\n// performance and export for heatmap?\n// value can be Infinity or -Infinity\n\nfunction getColorVisual(seriesModel, visualMapModel, value, valueState) {\n  var mappings = visualMapModel.targetVisuals[valueState];\n  var visualTypes = VisualMapping.prepareVisualTypes(mappings);\n  var resultVisual = {\n    color: getVisualFromData(seriesModel.getData(), 'color') // default color.\n\n  };\n\n  for (var i = 0, len = visualTypes.length; i < len; i++) {\n    var type = visualTypes[i];\n    var mapping = mappings[type === 'opacity' ? '__alphaForOpacity' : type];\n    mapping && mapping.applyVisual(value, getVisual, setVisual);\n  }\n\n  return resultVisual.color;\n\n  function getVisual(key) {\n    return resultVisual[key];\n  }\n\n  function setVisual(key, value) {\n    resultVisual[key] = value;\n  }\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/component/visualMap/visualEncoding.js"],"names":["zrUtil","visualSolution","VisualMapping","getVisualFromData","visualMapEncodingHandlers","createOnAllSeries","reset","seriesModel","ecModel","resetDefines","eachComponent","visualMapModel","pipelineContext","isTargetSeries","large","push","incrementalApplyVisual","stateList","targetVisuals","bind","getValueState","getDataDimensionIndex","getData","data","visualMetaList","visualMeta","getVisualMeta","getColorVisual","stops","outerColors","dimIdx","dimension","setVisual","value","valueState","mappings","visualTypes","prepareVisualTypes","resultVisual","color","i","len","length","type","mapping","applyVisual","getVisual","key"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport * as visualSolution from '../../visual/visualSolution';\nimport VisualMapping from '../../visual/VisualMapping';\nimport { getVisualFromData } from '../../visual/helper';\nexport var visualMapEncodingHandlers = [{\n  createOnAllSeries: true,\n  reset: function (seriesModel, ecModel) {\n    var resetDefines = [];\n    ecModel.eachComponent('visualMap', function (visualMapModel) {\n      var pipelineContext = seriesModel.pipelineContext;\n\n      if (!visualMapModel.isTargetSeries(seriesModel) || pipelineContext && pipelineContext.large) {\n        return;\n      }\n\n      resetDefines.push(visualSolution.incrementalApplyVisual(visualMapModel.stateList, visualMapModel.targetVisuals, zrUtil.bind(visualMapModel.getValueState, visualMapModel), visualMapModel.getDataDimensionIndex(seriesModel.getData())));\n    });\n    return resetDefines;\n  }\n}, // Only support color.\n{\n  createOnAllSeries: true,\n  reset: function (seriesModel, ecModel) {\n    var data = seriesModel.getData();\n    var visualMetaList = [];\n    ecModel.eachComponent('visualMap', function (visualMapModel) {\n      if (visualMapModel.isTargetSeries(seriesModel)) {\n        var visualMeta = visualMapModel.getVisualMeta(zrUtil.bind(getColorVisual, null, seriesModel, visualMapModel)) || {\n          stops: [],\n          outerColors: []\n        };\n        var dimIdx = visualMapModel.getDataDimensionIndex(data);\n\n        if (dimIdx >= 0) {\n          // visualMeta.dimension should be dimension index, but not concrete dimension.\n          visualMeta.dimension = dimIdx;\n          visualMetaList.push(visualMeta);\n        }\n      }\n    }); // console.log(JSON.stringify(visualMetaList.map(a => a.stops)));\n\n    seriesModel.getData().setVisual('visualMeta', visualMetaList);\n  }\n}]; // FIXME\n// performance and export for heatmap?\n// value can be Infinity or -Infinity\n\nfunction getColorVisual(seriesModel, visualMapModel, value, valueState) {\n  var mappings = visualMapModel.targetVisuals[valueState];\n  var visualTypes = VisualMapping.prepareVisualTypes(mappings);\n  var resultVisual = {\n    color: getVisualFromData(seriesModel.getData(), 'color') // default color.\n\n  };\n\n  for (var i = 0, len = visualTypes.length; i < len; i++) {\n    var type = visualTypes[i];\n    var mapping = mappings[type === 'opacity' ? '__alphaForOpacity' : type];\n    mapping && mapping.applyVisual(value, getVisual, setVisual);\n  }\n\n  return resultVisual.color;\n\n  function getVisual(key) {\n    return resultVisual[key];\n  }\n\n  function setVisual(key, value) {\n    resultVisual[key] = value;\n  }\n}"]},"metadata":{},"sourceType":"module"}