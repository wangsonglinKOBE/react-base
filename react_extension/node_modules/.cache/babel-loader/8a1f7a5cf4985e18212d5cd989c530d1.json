{"ast":null,"code":"import easingFuncs from './easing';\n\nvar Clip = function () {\n  function Clip(opts) {\n    this._initialized = false;\n    this._startTime = 0;\n    this._pausedTime = 0;\n    this._paused = false;\n    this._life = opts.life || 1000;\n    this._delay = opts.delay || 0;\n    this.loop = opts.loop == null ? false : opts.loop;\n    this.gap = opts.gap || 0;\n    this.easing = opts.easing || 'linear';\n    this.onframe = opts.onframe;\n    this.ondestroy = opts.ondestroy;\n    this.onrestart = opts.onrestart;\n  }\n\n  Clip.prototype.step = function (globalTime, deltaTime) {\n    if (!this._initialized) {\n      this._startTime = globalTime + this._delay;\n      this._initialized = true;\n    }\n\n    if (this._paused) {\n      this._pausedTime += deltaTime;\n      return;\n    }\n\n    var percent = (globalTime - this._startTime - this._pausedTime) / this._life;\n\n    if (percent < 0) {\n      percent = 0;\n    }\n\n    percent = Math.min(percent, 1);\n    var easing = this.easing;\n    var easingFunc = typeof easing === 'string' ? easingFuncs[easing] : easing;\n    var schedule = typeof easingFunc === 'function' ? easingFunc(percent) : percent;\n    this.onframe && this.onframe(schedule);\n\n    if (percent === 1) {\n      if (this.loop) {\n        this._restart(globalTime);\n\n        this.onrestart && this.onrestart();\n      } else {\n        return true;\n      }\n    }\n\n    return false;\n  };\n\n  Clip.prototype._restart = function (globalTime) {\n    var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;\n    this._startTime = globalTime - remainder + this.gap;\n    this._pausedTime = 0;\n  };\n\n  Clip.prototype.pause = function () {\n    this._paused = true;\n  };\n\n  Clip.prototype.resume = function () {\n    this._paused = false;\n  };\n\n  return Clip;\n}();\n\nexport default Clip;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/zrender/lib/animation/Clip.js"],"names":["easingFuncs","Clip","opts","_initialized","_startTime","_pausedTime","_paused","_life","life","_delay","delay","loop","gap","easing","onframe","ondestroy","onrestart","prototype","step","globalTime","deltaTime","percent","Math","min","easingFunc","schedule","_restart","remainder","pause","resume"],"mappings":"AAAA,OAAOA,WAAP,MAAwB,UAAxB;;AACA,IAAIC,IAAI,GAAI,YAAY;AACpB,WAASA,IAAT,CAAcC,IAAd,EAAoB;AAChB,SAAKC,YAAL,GAAoB,KAApB;AACA,SAAKC,UAAL,GAAkB,CAAlB;AACA,SAAKC,WAAL,GAAmB,CAAnB;AACA,SAAKC,OAAL,GAAe,KAAf;AACA,SAAKC,KAAL,GAAaL,IAAI,CAACM,IAAL,IAAa,IAA1B;AACA,SAAKC,MAAL,GAAcP,IAAI,CAACQ,KAAL,IAAc,CAA5B;AACA,SAAKC,IAAL,GAAYT,IAAI,CAACS,IAAL,IAAa,IAAb,GAAoB,KAApB,GAA4BT,IAAI,CAACS,IAA7C;AACA,SAAKC,GAAL,GAAWV,IAAI,CAACU,GAAL,IAAY,CAAvB;AACA,SAAKC,MAAL,GAAcX,IAAI,CAACW,MAAL,IAAe,QAA7B;AACA,SAAKC,OAAL,GAAeZ,IAAI,CAACY,OAApB;AACA,SAAKC,SAAL,GAAiBb,IAAI,CAACa,SAAtB;AACA,SAAKC,SAAL,GAAiBd,IAAI,CAACc,SAAtB;AACH;;AACDf,EAAAA,IAAI,CAACgB,SAAL,CAAeC,IAAf,GAAsB,UAAUC,UAAV,EAAsBC,SAAtB,EAAiC;AACnD,QAAI,CAAC,KAAKjB,YAAV,EAAwB;AACpB,WAAKC,UAAL,GAAkBe,UAAU,GAAG,KAAKV,MAApC;AACA,WAAKN,YAAL,GAAoB,IAApB;AACH;;AACD,QAAI,KAAKG,OAAT,EAAkB;AACd,WAAKD,WAAL,IAAoBe,SAApB;AACA;AACH;;AACD,QAAIC,OAAO,GAAG,CAACF,UAAU,GAAG,KAAKf,UAAlB,GAA+B,KAAKC,WAArC,IAAoD,KAAKE,KAAvE;;AACA,QAAIc,OAAO,GAAG,CAAd,EAAiB;AACbA,MAAAA,OAAO,GAAG,CAAV;AACH;;AACDA,IAAAA,OAAO,GAAGC,IAAI,CAACC,GAAL,CAASF,OAAT,EAAkB,CAAlB,CAAV;AACA,QAAIR,MAAM,GAAG,KAAKA,MAAlB;AACA,QAAIW,UAAU,GAAG,OAAOX,MAAP,KAAkB,QAAlB,GACXb,WAAW,CAACa,MAAD,CADA,GACWA,MAD5B;AAEA,QAAIY,QAAQ,GAAG,OAAOD,UAAP,KAAsB,UAAtB,GACTA,UAAU,CAACH,OAAD,CADD,GAETA,OAFN;AAGA,SAAKP,OAAL,IAAgB,KAAKA,OAAL,CAAaW,QAAb,CAAhB;;AACA,QAAIJ,OAAO,KAAK,CAAhB,EAAmB;AACf,UAAI,KAAKV,IAAT,EAAe;AACX,aAAKe,QAAL,CAAcP,UAAd;;AACA,aAAKH,SAAL,IAAkB,KAAKA,SAAL,EAAlB;AACH,OAHD,MAIK;AACD,eAAO,IAAP;AACH;AACJ;;AACD,WAAO,KAAP;AACH,GA/BD;;AAgCAf,EAAAA,IAAI,CAACgB,SAAL,CAAeS,QAAf,GAA0B,UAAUP,UAAV,EAAsB;AAC5C,QAAIQ,SAAS,GAAG,CAACR,UAAU,GAAG,KAAKf,UAAlB,GAA+B,KAAKC,WAArC,IAAoD,KAAKE,KAAzE;AACA,SAAKH,UAAL,GAAkBe,UAAU,GAAGQ,SAAb,GAAyB,KAAKf,GAAhD;AACA,SAAKP,WAAL,GAAmB,CAAnB;AACH,GAJD;;AAKAJ,EAAAA,IAAI,CAACgB,SAAL,CAAeW,KAAf,GAAuB,YAAY;AAC/B,SAAKtB,OAAL,GAAe,IAAf;AACH,GAFD;;AAGAL,EAAAA,IAAI,CAACgB,SAAL,CAAeY,MAAf,GAAwB,YAAY;AAChC,SAAKvB,OAAL,GAAe,KAAf;AACH,GAFD;;AAGA,SAAOL,IAAP;AACH,CA3DW,EAAZ;;AA4DA,eAAeA,IAAf","sourcesContent":["import easingFuncs from './easing';\nvar Clip = (function () {\n    function Clip(opts) {\n        this._initialized = false;\n        this._startTime = 0;\n        this._pausedTime = 0;\n        this._paused = false;\n        this._life = opts.life || 1000;\n        this._delay = opts.delay || 0;\n        this.loop = opts.loop == null ? false : opts.loop;\n        this.gap = opts.gap || 0;\n        this.easing = opts.easing || 'linear';\n        this.onframe = opts.onframe;\n        this.ondestroy = opts.ondestroy;\n        this.onrestart = opts.onrestart;\n    }\n    Clip.prototype.step = function (globalTime, deltaTime) {\n        if (!this._initialized) {\n            this._startTime = globalTime + this._delay;\n            this._initialized = true;\n        }\n        if (this._paused) {\n            this._pausedTime += deltaTime;\n            return;\n        }\n        var percent = (globalTime - this._startTime - this._pausedTime) / this._life;\n        if (percent < 0) {\n            percent = 0;\n        }\n        percent = Math.min(percent, 1);\n        var easing = this.easing;\n        var easingFunc = typeof easing === 'string'\n            ? easingFuncs[easing] : easing;\n        var schedule = typeof easingFunc === 'function'\n            ? easingFunc(percent)\n            : percent;\n        this.onframe && this.onframe(schedule);\n        if (percent === 1) {\n            if (this.loop) {\n                this._restart(globalTime);\n                this.onrestart && this.onrestart();\n            }\n            else {\n                return true;\n            }\n        }\n        return false;\n    };\n    Clip.prototype._restart = function (globalTime) {\n        var remainder = (globalTime - this._startTime - this._pausedTime) % this._life;\n        this._startTime = globalTime - remainder + this.gap;\n        this._pausedTime = 0;\n    };\n    Clip.prototype.pause = function () {\n        this._paused = true;\n    };\n    Clip.prototype.resume = function () {\n        this._paused = false;\n    };\n    return Clip;\n}());\nexport default Clip;\n"]},"metadata":{},"sourceType":"module"}