{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u684C\\u9762\\\\react\\u57FA\\u7840\\u539F\\u7406\\u5206\\u6790\\\\react_extension\\\\src\\\\components\\\\6_optimize_\\u4F18\\u5316\\\\index.jsx\";\nimport React, { Component, PureComponent } from 'react';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Parent extends PureComponent {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      carName: '奔驰c63',\n      stus: ['小张', '小李']\n    };\n\n    this.changeCar = () => {\n      // this.setState({carName: '迈巴赫'})\n      // const obj = this.state\n      // obj.carName = '迈巴赫'\n      // console.log(obj === this.state); //他两是一个对象，使用PureComponent时返回false\n      // this.setState(obj)\n\n      /* \r\n      在使用component时可以直接向上面这样修改carName\r\n      但是在PureComponent中向上面这样直接修改state对象是无效的，不会发生更新\r\n      下面是正确的写法：就是写一个新的对象\r\n      */\n      this.setState({\n        carName: '迈巴赫'\n      });\n    };\n\n    this.add = () => {\n      const {\n        stus\n      } = this.state;\n      stus.unshift('小刘');\n      this.setState({\n        stus\n      });\n      /* \r\n      同样的在Component中可以向上面这样操作状态，直接修改原\r\n      */\n    };\n  }\n\n  // shouldComponentUpdate(nextProps, nextState) { //这里注意接收参数的顺序\n  //     // console.log(this.props, this.state); //变化前的props和state\n  //     // console.log(nextProps, nextState); //变成的props和state,变化后的\n  //     // if(this.state.carName === nextState.carName) return false\n  //     // else return true\n  //     // 为啥这里 return !this.state.carName === nextState.carName这么写当我两次的状态不一样的时候\n  //     // 也不更新呢？有点怪\n  //     // return !this.state.carName === nextState.carName\n  // }\n  render() {\n    console.log('Parent--------render');\n    const {\n      carName\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"parent\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u6211\\u662FParent\\u7EC4\\u4EF6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: this.state.stus\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u6211\\u7684\\u8F66\\u540D\\u5B57\\u662F\\uFF1A\", carName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 17\n      }, this), \"  \", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 48\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.changeCar,\n        children: \"\\u70B9\\u6211\\u6362\\u8F66\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.add,\n        children: \"\\u6DFB\\u52A0\\u4E00\\u4E2A\\u5C0F\\u5218\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Child, {\n        carName: \"\\u5965\\u8FEA\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nclass Child extends PureComponent {\n  // shouldComponentUpdate(nextProps, nextState) { //这里注意接收参数的顺序\n  //     console.log(this.props, this.state); //变化前的props和state\n  //     console.log(nextProps, nextState); //变成的props和state,变化后的\n  //     return !this.props.carName === nextProps.carName\n  //     // 同样的情况这里这样写 return !this.props.carName === nextProps.carName，就算发生改变了props\n  //     // 也不更新了，奇怪的很，还是写判断好一些\n  //     // return this.props.carName === nextProps.carName 这句话表示 return trun \n  //     // 如果要表示他两相等返回false，就return !true => return !this.props.carName === nextProps.carName\n  // }\n  render() {\n    console.log('Child--------render');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"child\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"\\u6211\\u662FChild\\u7EC4\\u4EF6\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: [\"\\u6211\\u63A5\\u5230\\u7684\\u8F66\\u662F\\uFF1A\", this.props.carName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n/* \r\n\r\n*/","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/src/components/6_optimize_优化/index.jsx"],"names":["React","Component","PureComponent","Parent","state","carName","stus","changeCar","setState","add","unshift","render","console","log","Child","props"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,aAA3B,QAAgD,OAAhD;AACA,OAAO,aAAP;;AAEA,eAAe,MAAMC,MAAN,SAAqBD,aAArB,CAAmC;AAAA;AAAA;AAAA,SAE9CE,KAF8C,GAEtC;AAACC,MAAAA,OAAO,EAAE,OAAV;AAAmBC,MAAAA,IAAI,EAAE,CAAC,IAAD,EAAO,IAAP;AAAzB,KAFsC;;AAAA,SAI9CC,SAJ8C,GAIlC,MAAM;AACd;AAEA;AACA;AACA;AACA;;AAEA;AACR;AACA;AACA;AACA;AACO,WAAKC,QAAL,CAAc;AAACH,QAAAA,OAAO,EAAE;AAAV,OAAd;AAIF,KArB6C;;AAAA,SAuB9CI,GAvB8C,GAuBxC,MAAM;AACR,YAAM;AAACH,QAAAA;AAAD,UAAS,KAAKF,KAApB;AACAE,MAAAA,IAAI,CAACI,OAAL,CAAa,IAAb;AACA,WAAKF,QAAL,CAAc;AAACF,QAAAA;AAAD,OAAd;AACA;AACR;AACA;AACK,KA9B6C;AAAA;;AAgC9C;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEAK,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,UAAM;AAACR,MAAAA;AAAD,QAAY,KAAKD,KAAvB;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAK,KAAKA,KAAL,CAAWE;AAAhB;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,iEAAcD,OAAd;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,qBAGmC;AAAA;AAAA;AAAA;AAAA,cAHnC,eAII;AAAQ,QAAA,OAAO,EAAE,KAAKE,SAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAQ,QAAA,OAAO,EAAE,KAAKE,GAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI,QAAC,KAAD;AAAO,QAAA,OAAO,EAAC;AAAf;AAAA;AAAA;AAAA;AAAA,cANJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAUH;;AA1D6C;;AA6DlD,MAAMK,KAAN,SAAoBZ,aAApB,CAAkC;AAE9B;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AAEAS,EAAAA,MAAM,GAAG;AACLC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACA,wBACI;AAAK,MAAA,SAAS,EAAC,OAAf;AAAA,8BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,iEAAc,KAAKE,KAAL,CAAWV,OAAzB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAMH;;AAxB6B;AA4BlC;AACA;AACA","sourcesContent":["import React, { Component, PureComponent } from 'react'\r\nimport './index.css'\r\n\r\nexport default class Parent extends PureComponent {\r\n\r\n    state = {carName: '奔驰c63', stus: ['小张', '小李']}\r\n\r\n    changeCar = () => {\r\n        // this.setState({carName: '迈巴赫'})\r\n        \r\n        // const obj = this.state\r\n        // obj.carName = '迈巴赫'\r\n        // console.log(obj === this.state); //他两是一个对象，使用PureComponent时返回false\r\n        // this.setState(obj)\r\n        \r\n        /* \r\n        在使用component时可以直接向上面这样修改carName\r\n        但是在PureComponent中向上面这样直接修改state对象是无效的，不会发生更新\r\n        下面是正确的写法：就是写一个新的对象\r\n        */\r\n       this.setState({carName: '迈巴赫'})\r\n\r\n\r\n\r\n    }\r\n\r\n    add = () => {\r\n        const {stus} = this.state\r\n        stus.unshift('小刘')\r\n        this.setState({stus})\r\n        /* \r\n        同样的在Component中可以向上面这样操作状态，直接修改原\r\n        */\r\n    }\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) { //这里注意接收参数的顺序\r\n    //     // console.log(this.props, this.state); //变化前的props和state\r\n    //     // console.log(nextProps, nextState); //变成的props和state,变化后的\r\n    //     // if(this.state.carName === nextState.carName) return false\r\n    //     // else return true\r\n\r\n    //     // 为啥这里 return !this.state.carName === nextState.carName这么写当我两次的状态不一样的时候\r\n    //     // 也不更新呢？有点怪\r\n\r\n    //     // return !this.state.carName === nextState.carName\r\n\r\n    // }\r\n\r\n    render() {\r\n        console.log('Parent--------render');\r\n        const {carName} = this.state\r\n        return (\r\n            <div className=\"parent\">\r\n                <h3>我是Parent组件</h3>\r\n                <h3>{this.state.stus}</h3>\r\n                <span>我的车名字是：{carName}</span>  <br/>\r\n                <button onClick={this.changeCar}>点我换车</button>\r\n                <button onClick={this.add}>添加一个小刘</button>\r\n                <Child carName='奥迪'/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nclass Child extends PureComponent {\r\n\r\n    // shouldComponentUpdate(nextProps, nextState) { //这里注意接收参数的顺序\r\n    //     console.log(this.props, this.state); //变化前的props和state\r\n    //     console.log(nextProps, nextState); //变成的props和state,变化后的\r\n        \r\n    //     return !this.props.carName === nextProps.carName\r\n    //     // 同样的情况这里这样写 return !this.props.carName === nextProps.carName，就算发生改变了props\r\n    //     // 也不更新了，奇怪的很，还是写判断好一些\r\n\r\n\r\n    //     // return this.props.carName === nextProps.carName 这句话表示 return trun \r\n    //     // 如果要表示他两相等返回false，就return !true => return !this.props.carName === nextProps.carName\r\n\r\n    // }\r\n    \r\n    render() {\r\n        console.log('Child--------render');\r\n        return (\r\n            <div className=\"child\">\r\n                <h3>我是Child组件</h3>\r\n                <span>我接到的车是：{this.props.carName}</span>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\n/* \r\n\r\n*/\r\n\r\n"]},"metadata":{},"sourceType":"module"}