{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { setAsPrimitive, map, isTypedArray, assert, each, retrieve2 } from 'zrender/lib/core/util';\nimport { createSource, cloneSourceShallow } from '../Source';\nimport { SOURCE_FORMAT_TYPED_ARRAY, SOURCE_FORMAT_ORIGINAL } from '../../util/types';\nimport { querySeriesUpstreamDatasetModel, queryDatasetUpstreamDatasetModels } from './sourceHelper';\nimport { applyDataTransform } from './transform';\nimport DataStore from '../DataStore';\nimport { DefaultDataProvider } from './dataProvider';\n/**\n * [REQUIREMENT_MEMO]:\n * (0) `metaRawOption` means `dimensions`/`sourceHeader`/`seriesLayoutBy` in raw option.\n * (1) Keep support the feature: `metaRawOption` can be specified both on `series` and\n * `root-dataset`. Them on `series` has higher priority.\n * (2) Do not support to set `metaRawOption` on a `non-root-dataset`, because it might\n * confuse users: whether those props indicate how to visit the upstream source or visit\n * the transform result source, and some transforms has nothing to do with these props,\n * and some transforms might have multiple upstream.\n * (3) Transforms should specify `metaRawOption` in each output, just like they can be\n * declared in `root-dataset`.\n * (4) At present only support visit source in `SERIES_LAYOUT_BY_COLUMN` in transforms.\n * That is for reducing complexity in transfroms.\n * PENDING: Whether to provide transposition transform?\n *\n * [IMPLEMENTAION_MEMO]:\n * \"sourceVisitConfig\" are calculated from `metaRawOption` and `data`.\n * They will not be calculated until `source` is about to be visited (to prevent from\n * duplicate calcuation). `source` is visited only in series and input to transforms.\n *\n * [DIMENSION_INHERIT_RULE]:\n * By default the dimensions are inherited from ancestors, unless a transform return\n * a new dimensions definition.\n * Consider the case:\n * ```js\n * dataset: [{\n *     source: [ ['Product', 'Sales', 'Prise'], ['Cookies', 321, 44.21], ...]\n * }, {\n *     transform: { type: 'filter', ... }\n * }]\n * dataset: [{\n *     dimension: ['Product', 'Sales', 'Prise'],\n *     source: [ ['Cookies', 321, 44.21], ...]\n * }, {\n *     transform: { type: 'filter', ... }\n * }]\n * ```\n * The two types of option should have the same behavior after transform.\n *\n *\n * [SCENARIO]:\n * (1) Provide source data directly:\n * ```js\n * series: {\n *     encode: {...},\n *     dimensions: [...]\n *     seriesLayoutBy: 'row',\n *     data: [[...]]\n * }\n * ```\n * (2) Series refer to dataset.\n * ```js\n * series: [{\n *     encode: {...}\n *     // Ignore datasetIndex means `datasetIndex: 0`\n *     // and the dimensions defination in dataset is used\n * }, {\n *     encode: {...},\n *     seriesLayoutBy: 'column',\n *     datasetIndex: 1\n * }]\n * ```\n * (3) dataset transform\n * ```js\n * dataset: [{\n *     source: [...]\n * }, {\n *     source: [...]\n * }, {\n *     // By default from 0.\n *     transform: { type: 'filter', config: {...} }\n * }, {\n *     // Piped.\n *     transform: [\n *         { type: 'filter', config: {...} },\n *         { type: 'sort', config: {...} }\n *     ]\n * }, {\n *     id: 'regressionData',\n *     fromDatasetIndex: 1,\n *     // Third-party transform\n *     transform: { type: 'ecStat:regression', config: {...} }\n * }, {\n *     // retrieve the extra result.\n *     id: 'regressionFormula',\n *     fromDatasetId: 'regressionData',\n *     fromTransformResult: 1\n * }]\n * ```\n */\n\nvar SourceManager =\n/** @class */\nfunction () {\n  function SourceManager(sourceHost) {\n    // Cached source. Do not repeat calculating if not dirty.\n    this._sourceList = [];\n    this._storeList = []; // version sign of each upstream source manager.\n\n    this._upstreamSignList = [];\n    this._versionSignBase = 0;\n    this._dirty = true;\n    this._sourceHost = sourceHost;\n  }\n  /**\n   * Mark dirty.\n   */\n\n\n  SourceManager.prototype.dirty = function () {\n    this._setLocalSource([], []);\n\n    this._storeList = [];\n    this._dirty = true;\n  };\n\n  SourceManager.prototype._setLocalSource = function (sourceList, upstreamSignList) {\n    this._sourceList = sourceList;\n    this._upstreamSignList = upstreamSignList;\n    this._versionSignBase++;\n\n    if (this._versionSignBase > 9e10) {\n      this._versionSignBase = 0;\n    }\n  };\n  /**\n   * For detecting whether the upstream source is dirty, so that\n   * the local cached source (in `_sourceList`) should be discarded.\n   */\n\n\n  SourceManager.prototype._getVersionSign = function () {\n    return this._sourceHost.uid + '_' + this._versionSignBase;\n  };\n  /**\n   * Always return a source instance. Otherwise throw error.\n   */\n\n\n  SourceManager.prototype.prepareSource = function () {\n    // For the case that call `setOption` multiple time but no data changed,\n    // cache the result source to prevent from repeating transform.\n    if (this._isDirty()) {\n      this._createSource();\n\n      this._dirty = false;\n    }\n  };\n\n  SourceManager.prototype._createSource = function () {\n    this._setLocalSource([], []);\n\n    var sourceHost = this._sourceHost;\n\n    var upSourceMgrList = this._getUpstreamSourceManagers();\n\n    var hasUpstream = !!upSourceMgrList.length;\n    var resultSourceList;\n    var upstreamSignList;\n\n    if (isSeries(sourceHost)) {\n      var seriesModel = sourceHost;\n      var data = void 0;\n      var sourceFormat = void 0;\n      var upSource = void 0; // Has upstream dataset\n\n      if (hasUpstream) {\n        var upSourceMgr = upSourceMgrList[0];\n        upSourceMgr.prepareSource();\n        upSource = upSourceMgr.getSource();\n        data = upSource.data;\n        sourceFormat = upSource.sourceFormat;\n        upstreamSignList = [upSourceMgr._getVersionSign()];\n      } // Series data is from own.\n      else {\n        data = seriesModel.get('data', true);\n        sourceFormat = isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL;\n        upstreamSignList = [];\n      } // See [REQUIREMENT_MEMO], merge settings on series and parent dataset if it is root.\n\n\n      var newMetaRawOption = this._getSourceMetaRawOption() || {};\n      var upMetaRawOption = upSource && upSource.metaRawOption || {};\n      var seriesLayoutBy = retrieve2(newMetaRawOption.seriesLayoutBy, upMetaRawOption.seriesLayoutBy) || null;\n      var sourceHeader = retrieve2(newMetaRawOption.sourceHeader, upMetaRawOption.sourceHeader) || null; // Note here we should not use `upSource.dimensionsDefine`. Consider the case:\n      // `upSource.dimensionsDefine` is detected by `seriesLayoutBy: 'column'`,\n      // but series need `seriesLayoutBy: 'row'`.\n\n      var dimensions = retrieve2(newMetaRawOption.dimensions, upMetaRawOption.dimensions); // We share source with dataset as much as possible\n      // to avoid extra memroy cost of high dimensional data.\n\n      var needsCreateSource = seriesLayoutBy !== upMetaRawOption.seriesLayoutBy || !!sourceHeader !== !!upMetaRawOption.sourceHeader || dimensions;\n      resultSourceList = needsCreateSource ? [createSource(data, {\n        seriesLayoutBy: seriesLayoutBy,\n        sourceHeader: sourceHeader,\n        dimensions: dimensions\n      }, sourceFormat)] : [];\n    } else {\n      var datasetModel = sourceHost; // Has upstream dataset.\n\n      if (hasUpstream) {\n        var result = this._applyTransform(upSourceMgrList);\n\n        resultSourceList = result.sourceList;\n        upstreamSignList = result.upstreamSignList;\n      } // Is root dataset.\n      else {\n        var sourceData = datasetModel.get('source', true);\n        resultSourceList = [createSource(sourceData, this._getSourceMetaRawOption(), null)];\n        upstreamSignList = [];\n      }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(resultSourceList && upstreamSignList);\n    }\n\n    this._setLocalSource(resultSourceList, upstreamSignList);\n  };\n\n  SourceManager.prototype._applyTransform = function (upMgrList) {\n    var datasetModel = this._sourceHost;\n    var transformOption = datasetModel.get('transform', true);\n    var fromTransformResult = datasetModel.get('fromTransformResult', true);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(fromTransformResult != null || transformOption != null);\n    }\n\n    if (fromTransformResult != null) {\n      var errMsg = '';\n\n      if (upMgrList.length !== 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'When using `fromTransformResult`, there should be only one upstream dataset';\n        }\n\n        doThrow(errMsg);\n      }\n    }\n\n    var sourceList;\n    var upSourceList = [];\n    var upstreamSignList = [];\n    each(upMgrList, function (upMgr) {\n      upMgr.prepareSource();\n      var upSource = upMgr.getSource(fromTransformResult || 0);\n      var errMsg = '';\n\n      if (fromTransformResult != null && !upSource) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'Can not retrieve result by `fromTransformResult`: ' + fromTransformResult;\n        }\n\n        doThrow(errMsg);\n      }\n\n      upSourceList.push(upSource);\n      upstreamSignList.push(upMgr._getVersionSign());\n    });\n\n    if (transformOption) {\n      sourceList = applyDataTransform(transformOption, upSourceList, {\n        datasetIndex: datasetModel.componentIndex\n      });\n    } else if (fromTransformResult != null) {\n      sourceList = [cloneSourceShallow(upSourceList[0])];\n    }\n\n    return {\n      sourceList: sourceList,\n      upstreamSignList: upstreamSignList\n    };\n  };\n\n  SourceManager.prototype._isDirty = function () {\n    if (this._dirty) {\n      return true;\n    } // All sourceList is from the some upsteam.\n\n\n    var upSourceMgrList = this._getUpstreamSourceManagers();\n\n    for (var i = 0; i < upSourceMgrList.length; i++) {\n      var upSrcMgr = upSourceMgrList[i];\n\n      if ( // Consider the case that there is ancestor diry, call it recursively.\n      // The performance is probably not an issue because usually the chain is not long.\n      upSrcMgr._isDirty() || this._upstreamSignList[i] !== upSrcMgr._getVersionSign()) {\n        return true;\n      }\n    }\n  };\n  /**\n   * @param sourceIndex By defualt 0, means \"main source\".\n   *                    Most cases there is only one source.\n   */\n\n\n  SourceManager.prototype.getSource = function (sourceIndex) {\n    sourceIndex = sourceIndex || 0;\n    var source = this._sourceList[sourceIndex];\n\n    if (!source) {\n      // Series may share source instance with dataset.\n      var upSourceMgrList = this._getUpstreamSourceManagers();\n\n      return upSourceMgrList[0] && upSourceMgrList[0].getSource(sourceIndex);\n    }\n\n    return source;\n  };\n  /**\n   *\n   * Get a data store which can be shared across series.\n   * Only available for series.\n   *\n   * @param seriesDimRequest Dimensions that are generated in series.\n   *        Should have been sorted by `storeDimIndex` asc.\n   */\n\n\n  SourceManager.prototype.getSharedDataStore = function (seriesDimRequest) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(isSeries(this._sourceHost), 'Can only call getDataStore on series source manager.');\n    }\n\n    var schema = seriesDimRequest.makeStoreSchema();\n    return this._innerGetDataStore(schema.dimensions, seriesDimRequest.source, schema.hash);\n  };\n\n  SourceManager.prototype._innerGetDataStore = function (storeDims, seriesSource, sourceReadKey) {\n    // TODO Can use other sourceIndex?\n    var sourceIndex = 0;\n    var storeList = this._storeList;\n    var cachedStoreMap = storeList[sourceIndex];\n\n    if (!cachedStoreMap) {\n      cachedStoreMap = storeList[sourceIndex] = {};\n    }\n\n    var cachedStore = cachedStoreMap[sourceReadKey];\n\n    if (!cachedStore) {\n      var upSourceMgr = this._getUpstreamSourceManagers()[0];\n\n      if (isSeries(this._sourceHost) && upSourceMgr) {\n        cachedStore = upSourceMgr._innerGetDataStore(storeDims, seriesSource, sourceReadKey);\n      } else {\n        cachedStore = new DataStore(); // Always create store from source of series.\n\n        cachedStore.initData(new DefaultDataProvider(seriesSource, storeDims.length), storeDims);\n      }\n\n      cachedStoreMap[sourceReadKey] = cachedStore;\n    }\n\n    return cachedStore;\n  };\n  /**\n   * PEDING: Is it fast enough?\n   * If no upstream, return empty array.\n   */\n\n\n  SourceManager.prototype._getUpstreamSourceManagers = function () {\n    // Always get the relationship from the raw option.\n    // Do not cache the link of the dependency graph, so that\n    // no need to update them when change happen.\n    var sourceHost = this._sourceHost;\n\n    if (isSeries(sourceHost)) {\n      var datasetModel = querySeriesUpstreamDatasetModel(sourceHost);\n      return !datasetModel ? [] : [datasetModel.getSourceManager()];\n    } else {\n      return map(queryDatasetUpstreamDatasetModels(sourceHost), function (datasetModel) {\n        return datasetModel.getSourceManager();\n      });\n    }\n  };\n\n  SourceManager.prototype._getSourceMetaRawOption = function () {\n    var sourceHost = this._sourceHost;\n    var seriesLayoutBy;\n    var sourceHeader;\n    var dimensions;\n\n    if (isSeries(sourceHost)) {\n      seriesLayoutBy = sourceHost.get('seriesLayoutBy', true);\n      sourceHeader = sourceHost.get('sourceHeader', true);\n      dimensions = sourceHost.get('dimensions', true);\n    } // See [REQUIREMENT_MEMO], `non-root-dataset` do not support them.\n    else if (!this._getUpstreamSourceManagers().length) {\n      var model = sourceHost;\n      seriesLayoutBy = model.get('seriesLayoutBy', true);\n      sourceHeader = model.get('sourceHeader', true);\n      dimensions = model.get('dimensions', true);\n    }\n\n    return {\n      seriesLayoutBy: seriesLayoutBy,\n      sourceHeader: sourceHeader,\n      dimensions: dimensions\n    };\n  };\n\n  return SourceManager;\n}();\n\nexport { SourceManager }; // Call this method after `super.init` and `super.mergeOption` to\n// disable the transform merge, but do not disable transfrom clone from rawOption.\n\nexport function disableTransformOptionMerge(datasetModel) {\n  var transformOption = datasetModel.option.transform;\n  transformOption && setAsPrimitive(datasetModel.option.transform);\n}\n\nfunction isSeries(sourceHost) {\n  // Avoid circular dependency with Series.ts\n  return sourceHost.mainType === 'series';\n}\n\nfunction doThrow(errMsg) {\n  throw new Error(errMsg);\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/data/helper/sourceManager.js"],"names":["setAsPrimitive","map","isTypedArray","assert","each","retrieve2","createSource","cloneSourceShallow","SOURCE_FORMAT_TYPED_ARRAY","SOURCE_FORMAT_ORIGINAL","querySeriesUpstreamDatasetModel","queryDatasetUpstreamDatasetModels","applyDataTransform","DataStore","DefaultDataProvider","SourceManager","sourceHost","_sourceList","_storeList","_upstreamSignList","_versionSignBase","_dirty","_sourceHost","prototype","dirty","_setLocalSource","sourceList","upstreamSignList","_getVersionSign","uid","prepareSource","_isDirty","_createSource","upSourceMgrList","_getUpstreamSourceManagers","hasUpstream","length","resultSourceList","isSeries","seriesModel","data","sourceFormat","upSource","upSourceMgr","getSource","get","newMetaRawOption","_getSourceMetaRawOption","upMetaRawOption","metaRawOption","seriesLayoutBy","sourceHeader","dimensions","needsCreateSource","datasetModel","result","_applyTransform","sourceData","process","env","NODE_ENV","upMgrList","transformOption","fromTransformResult","errMsg","doThrow","upSourceList","upMgr","push","datasetIndex","componentIndex","i","upSrcMgr","sourceIndex","source","getSharedDataStore","seriesDimRequest","schema","makeStoreSchema","_innerGetDataStore","hash","storeDims","seriesSource","sourceReadKey","storeList","cachedStoreMap","cachedStore","initData","getSourceManager","model","disableTransformOptionMerge","option","transform","mainType","Error"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,cAAT,EAAyBC,GAAzB,EAA8BC,YAA9B,EAA4CC,MAA5C,EAAoDC,IAApD,EAA0DC,SAA1D,QAA2E,uBAA3E;AACA,SAASC,YAAT,EAAuBC,kBAAvB,QAAiD,WAAjD;AACA,SAASC,yBAAT,EAAoCC,sBAApC,QAAkE,kBAAlE;AACA,SAASC,+BAAT,EAA0CC,iCAA1C,QAAmF,gBAAnF;AACA,SAASC,kBAAT,QAAmC,aAAnC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,mBAAT,QAAoC,gBAApC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,IAAIC,aAAa;AACjB;AACA,YAAY;AACV,WAASA,aAAT,CAAuBC,UAAvB,EAAmC;AACjC;AACA,SAAKC,WAAL,GAAmB,EAAnB;AACA,SAAKC,UAAL,GAAkB,EAAlB,CAHiC,CAGX;;AAEtB,SAAKC,iBAAL,GAAyB,EAAzB;AACA,SAAKC,gBAAL,GAAwB,CAAxB;AACA,SAAKC,MAAL,GAAc,IAAd;AACA,SAAKC,WAAL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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { setAsPrimitive, map, isTypedArray, assert, each, retrieve2 } from 'zrender/lib/core/util';\nimport { createSource, cloneSourceShallow } from '../Source';\nimport { SOURCE_FORMAT_TYPED_ARRAY, SOURCE_FORMAT_ORIGINAL } from '../../util/types';\nimport { querySeriesUpstreamDatasetModel, queryDatasetUpstreamDatasetModels } from './sourceHelper';\nimport { applyDataTransform } from './transform';\nimport DataStore from '../DataStore';\nimport { DefaultDataProvider } from './dataProvider';\n/**\n * [REQUIREMENT_MEMO]:\n * (0) `metaRawOption` means `dimensions`/`sourceHeader`/`seriesLayoutBy` in raw option.\n * (1) Keep support the feature: `metaRawOption` can be specified both on `series` and\n * `root-dataset`. Them on `series` has higher priority.\n * (2) Do not support to set `metaRawOption` on a `non-root-dataset`, because it might\n * confuse users: whether those props indicate how to visit the upstream source or visit\n * the transform result source, and some transforms has nothing to do with these props,\n * and some transforms might have multiple upstream.\n * (3) Transforms should specify `metaRawOption` in each output, just like they can be\n * declared in `root-dataset`.\n * (4) At present only support visit source in `SERIES_LAYOUT_BY_COLUMN` in transforms.\n * That is for reducing complexity in transfroms.\n * PENDING: Whether to provide transposition transform?\n *\n * [IMPLEMENTAION_MEMO]:\n * \"sourceVisitConfig\" are calculated from `metaRawOption` and `data`.\n * They will not be calculated until `source` is about to be visited (to prevent from\n * duplicate calcuation). `source` is visited only in series and input to transforms.\n *\n * [DIMENSION_INHERIT_RULE]:\n * By default the dimensions are inherited from ancestors, unless a transform return\n * a new dimensions definition.\n * Consider the case:\n * ```js\n * dataset: [{\n *     source: [ ['Product', 'Sales', 'Prise'], ['Cookies', 321, 44.21], ...]\n * }, {\n *     transform: { type: 'filter', ... }\n * }]\n * dataset: [{\n *     dimension: ['Product', 'Sales', 'Prise'],\n *     source: [ ['Cookies', 321, 44.21], ...]\n * }, {\n *     transform: { type: 'filter', ... }\n * }]\n * ```\n * The two types of option should have the same behavior after transform.\n *\n *\n * [SCENARIO]:\n * (1) Provide source data directly:\n * ```js\n * series: {\n *     encode: {...},\n *     dimensions: [...]\n *     seriesLayoutBy: 'row',\n *     data: [[...]]\n * }\n * ```\n * (2) Series refer to dataset.\n * ```js\n * series: [{\n *     encode: {...}\n *     // Ignore datasetIndex means `datasetIndex: 0`\n *     // and the dimensions defination in dataset is used\n * }, {\n *     encode: {...},\n *     seriesLayoutBy: 'column',\n *     datasetIndex: 1\n * }]\n * ```\n * (3) dataset transform\n * ```js\n * dataset: [{\n *     source: [...]\n * }, {\n *     source: [...]\n * }, {\n *     // By default from 0.\n *     transform: { type: 'filter', config: {...} }\n * }, {\n *     // Piped.\n *     transform: [\n *         { type: 'filter', config: {...} },\n *         { type: 'sort', config: {...} }\n *     ]\n * }, {\n *     id: 'regressionData',\n *     fromDatasetIndex: 1,\n *     // Third-party transform\n *     transform: { type: 'ecStat:regression', config: {...} }\n * }, {\n *     // retrieve the extra result.\n *     id: 'regressionFormula',\n *     fromDatasetId: 'regressionData',\n *     fromTransformResult: 1\n * }]\n * ```\n */\n\nvar SourceManager =\n/** @class */\nfunction () {\n  function SourceManager(sourceHost) {\n    // Cached source. Do not repeat calculating if not dirty.\n    this._sourceList = [];\n    this._storeList = []; // version sign of each upstream source manager.\n\n    this._upstreamSignList = [];\n    this._versionSignBase = 0;\n    this._dirty = true;\n    this._sourceHost = sourceHost;\n  }\n  /**\n   * Mark dirty.\n   */\n\n\n  SourceManager.prototype.dirty = function () {\n    this._setLocalSource([], []);\n\n    this._storeList = [];\n    this._dirty = true;\n  };\n\n  SourceManager.prototype._setLocalSource = function (sourceList, upstreamSignList) {\n    this._sourceList = sourceList;\n    this._upstreamSignList = upstreamSignList;\n    this._versionSignBase++;\n\n    if (this._versionSignBase > 9e10) {\n      this._versionSignBase = 0;\n    }\n  };\n  /**\n   * For detecting whether the upstream source is dirty, so that\n   * the local cached source (in `_sourceList`) should be discarded.\n   */\n\n\n  SourceManager.prototype._getVersionSign = function () {\n    return this._sourceHost.uid + '_' + this._versionSignBase;\n  };\n  /**\n   * Always return a source instance. Otherwise throw error.\n   */\n\n\n  SourceManager.prototype.prepareSource = function () {\n    // For the case that call `setOption` multiple time but no data changed,\n    // cache the result source to prevent from repeating transform.\n    if (this._isDirty()) {\n      this._createSource();\n\n      this._dirty = false;\n    }\n  };\n\n  SourceManager.prototype._createSource = function () {\n    this._setLocalSource([], []);\n\n    var sourceHost = this._sourceHost;\n\n    var upSourceMgrList = this._getUpstreamSourceManagers();\n\n    var hasUpstream = !!upSourceMgrList.length;\n    var resultSourceList;\n    var upstreamSignList;\n\n    if (isSeries(sourceHost)) {\n      var seriesModel = sourceHost;\n      var data = void 0;\n      var sourceFormat = void 0;\n      var upSource = void 0; // Has upstream dataset\n\n      if (hasUpstream) {\n        var upSourceMgr = upSourceMgrList[0];\n        upSourceMgr.prepareSource();\n        upSource = upSourceMgr.getSource();\n        data = upSource.data;\n        sourceFormat = upSource.sourceFormat;\n        upstreamSignList = [upSourceMgr._getVersionSign()];\n      } // Series data is from own.\n      else {\n          data = seriesModel.get('data', true);\n          sourceFormat = isTypedArray(data) ? SOURCE_FORMAT_TYPED_ARRAY : SOURCE_FORMAT_ORIGINAL;\n          upstreamSignList = [];\n        } // See [REQUIREMENT_MEMO], merge settings on series and parent dataset if it is root.\n\n\n      var newMetaRawOption = this._getSourceMetaRawOption() || {};\n      var upMetaRawOption = upSource && upSource.metaRawOption || {};\n      var seriesLayoutBy = retrieve2(newMetaRawOption.seriesLayoutBy, upMetaRawOption.seriesLayoutBy) || null;\n      var sourceHeader = retrieve2(newMetaRawOption.sourceHeader, upMetaRawOption.sourceHeader) || null; // Note here we should not use `upSource.dimensionsDefine`. Consider the case:\n      // `upSource.dimensionsDefine` is detected by `seriesLayoutBy: 'column'`,\n      // but series need `seriesLayoutBy: 'row'`.\n\n      var dimensions = retrieve2(newMetaRawOption.dimensions, upMetaRawOption.dimensions); // We share source with dataset as much as possible\n      // to avoid extra memroy cost of high dimensional data.\n\n      var needsCreateSource = seriesLayoutBy !== upMetaRawOption.seriesLayoutBy || !!sourceHeader !== !!upMetaRawOption.sourceHeader || dimensions;\n      resultSourceList = needsCreateSource ? [createSource(data, {\n        seriesLayoutBy: seriesLayoutBy,\n        sourceHeader: sourceHeader,\n        dimensions: dimensions\n      }, sourceFormat)] : [];\n    } else {\n      var datasetModel = sourceHost; // Has upstream dataset.\n\n      if (hasUpstream) {\n        var result = this._applyTransform(upSourceMgrList);\n\n        resultSourceList = result.sourceList;\n        upstreamSignList = result.upstreamSignList;\n      } // Is root dataset.\n      else {\n          var sourceData = datasetModel.get('source', true);\n          resultSourceList = [createSource(sourceData, this._getSourceMetaRawOption(), null)];\n          upstreamSignList = [];\n        }\n    }\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(resultSourceList && upstreamSignList);\n    }\n\n    this._setLocalSource(resultSourceList, upstreamSignList);\n  };\n\n  SourceManager.prototype._applyTransform = function (upMgrList) {\n    var datasetModel = this._sourceHost;\n    var transformOption = datasetModel.get('transform', true);\n    var fromTransformResult = datasetModel.get('fromTransformResult', true);\n\n    if (process.env.NODE_ENV !== 'production') {\n      assert(fromTransformResult != null || transformOption != null);\n    }\n\n    if (fromTransformResult != null) {\n      var errMsg = '';\n\n      if (upMgrList.length !== 1) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'When using `fromTransformResult`, there should be only one upstream dataset';\n        }\n\n        doThrow(errMsg);\n      }\n    }\n\n    var sourceList;\n    var upSourceList = [];\n    var upstreamSignList = [];\n    each(upMgrList, function (upMgr) {\n      upMgr.prepareSource();\n      var upSource = upMgr.getSource(fromTransformResult || 0);\n      var errMsg = '';\n\n      if (fromTransformResult != null && !upSource) {\n        if (process.env.NODE_ENV !== 'production') {\n          errMsg = 'Can not retrieve result by `fromTransformResult`: ' + fromTransformResult;\n        }\n\n        doThrow(errMsg);\n      }\n\n      upSourceList.push(upSource);\n      upstreamSignList.push(upMgr._getVersionSign());\n    });\n\n    if (transformOption) {\n      sourceList = applyDataTransform(transformOption, upSourceList, {\n        datasetIndex: datasetModel.componentIndex\n      });\n    } else if (fromTransformResult != null) {\n      sourceList = [cloneSourceShallow(upSourceList[0])];\n    }\n\n    return {\n      sourceList: sourceList,\n      upstreamSignList: upstreamSignList\n    };\n  };\n\n  SourceManager.prototype._isDirty = function () {\n    if (this._dirty) {\n      return true;\n    } // All sourceList is from the some upsteam.\n\n\n    var upSourceMgrList = this._getUpstreamSourceManagers();\n\n    for (var i = 0; i < upSourceMgrList.length; i++) {\n      var upSrcMgr = upSourceMgrList[i];\n\n      if ( // Consider the case that there is ancestor diry, call it recursively.\n      // The performance is probably not an issue because usually the chain is not long.\n      upSrcMgr._isDirty() || this._upstreamSignList[i] !== upSrcMgr._getVersionSign()) {\n        return true;\n      }\n    }\n  };\n  /**\n   * @param sourceIndex By defualt 0, means \"main source\".\n   *                    Most cases there is only one source.\n   */\n\n\n  SourceManager.prototype.getSource = function (sourceIndex) {\n    sourceIndex = sourceIndex || 0;\n    var source = this._sourceList[sourceIndex];\n\n    if (!source) {\n      // Series may share source instance with dataset.\n      var upSourceMgrList = this._getUpstreamSourceManagers();\n\n      return upSourceMgrList[0] && upSourceMgrList[0].getSource(sourceIndex);\n    }\n\n    return source;\n  };\n  /**\n   *\n   * Get a data store which can be shared across series.\n   * Only available for series.\n   *\n   * @param seriesDimRequest Dimensions that are generated in series.\n   *        Should have been sorted by `storeDimIndex` asc.\n   */\n\n\n  SourceManager.prototype.getSharedDataStore = function (seriesDimRequest) {\n    if (process.env.NODE_ENV !== 'production') {\n      assert(isSeries(this._sourceHost), 'Can only call getDataStore on series source manager.');\n    }\n\n    var schema = seriesDimRequest.makeStoreSchema();\n    return this._innerGetDataStore(schema.dimensions, seriesDimRequest.source, schema.hash);\n  };\n\n  SourceManager.prototype._innerGetDataStore = function (storeDims, seriesSource, sourceReadKey) {\n    // TODO Can use other sourceIndex?\n    var sourceIndex = 0;\n    var storeList = this._storeList;\n    var cachedStoreMap = storeList[sourceIndex];\n\n    if (!cachedStoreMap) {\n      cachedStoreMap = storeList[sourceIndex] = {};\n    }\n\n    var cachedStore = cachedStoreMap[sourceReadKey];\n\n    if (!cachedStore) {\n      var upSourceMgr = this._getUpstreamSourceManagers()[0];\n\n      if (isSeries(this._sourceHost) && upSourceMgr) {\n        cachedStore = upSourceMgr._innerGetDataStore(storeDims, seriesSource, sourceReadKey);\n      } else {\n        cachedStore = new DataStore(); // Always create store from source of series.\n\n        cachedStore.initData(new DefaultDataProvider(seriesSource, storeDims.length), storeDims);\n      }\n\n      cachedStoreMap[sourceReadKey] = cachedStore;\n    }\n\n    return cachedStore;\n  };\n  /**\n   * PEDING: Is it fast enough?\n   * If no upstream, return empty array.\n   */\n\n\n  SourceManager.prototype._getUpstreamSourceManagers = function () {\n    // Always get the relationship from the raw option.\n    // Do not cache the link of the dependency graph, so that\n    // no need to update them when change happen.\n    var sourceHost = this._sourceHost;\n\n    if (isSeries(sourceHost)) {\n      var datasetModel = querySeriesUpstreamDatasetModel(sourceHost);\n      return !datasetModel ? [] : [datasetModel.getSourceManager()];\n    } else {\n      return map(queryDatasetUpstreamDatasetModels(sourceHost), function (datasetModel) {\n        return datasetModel.getSourceManager();\n      });\n    }\n  };\n\n  SourceManager.prototype._getSourceMetaRawOption = function () {\n    var sourceHost = this._sourceHost;\n    var seriesLayoutBy;\n    var sourceHeader;\n    var dimensions;\n\n    if (isSeries(sourceHost)) {\n      seriesLayoutBy = sourceHost.get('seriesLayoutBy', true);\n      sourceHeader = sourceHost.get('sourceHeader', true);\n      dimensions = sourceHost.get('dimensions', true);\n    } // See [REQUIREMENT_MEMO], `non-root-dataset` do not support them.\n    else if (!this._getUpstreamSourceManagers().length) {\n        var model = sourceHost;\n        seriesLayoutBy = model.get('seriesLayoutBy', true);\n        sourceHeader = model.get('sourceHeader', true);\n        dimensions = model.get('dimensions', true);\n      }\n\n    return {\n      seriesLayoutBy: seriesLayoutBy,\n      sourceHeader: sourceHeader,\n      dimensions: dimensions\n    };\n  };\n\n  return SourceManager;\n}();\n\nexport { SourceManager }; // Call this method after `super.init` and `super.mergeOption` to\n// disable the transform merge, but do not disable transfrom clone from rawOption.\n\nexport function disableTransformOptionMerge(datasetModel) {\n  var transformOption = datasetModel.option.transform;\n  transformOption && setAsPrimitive(datasetModel.option.transform);\n}\n\nfunction isSeries(sourceHost) {\n  // Avoid circular dependency with Series.ts\n  return sourceHost.mainType === 'series';\n}\n\nfunction doThrow(errMsg) {\n  throw new Error(errMsg);\n}"]},"metadata":{},"sourceType":"module"}