{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport SeriesModel from '../../model/Series';\nimport Tree from '../../data/Tree';\nimport Model from '../../model/Model';\nimport { wrapTreePathInfo } from '../helper/treeHelper';\nimport { normalizeToArray } from '../../util/model';\nimport { createTooltipMarkup } from '../../component/tooltip/tooltipMarkup';\nimport enableAriaDecalForTree from '../helper/enableAriaDecalForTree';\n\nvar TreemapSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(TreemapSeriesModel, _super);\n\n  function TreemapSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = TreemapSeriesModel.type;\n    _this.preventUsingHoverLayer = true;\n    return _this;\n  }\n  /**\n   * @override\n   */\n\n\n  TreemapSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    // Create a virtual root.\n    var root = {\n      name: option.name,\n      children: option.data\n    };\n    completeTreeValue(root);\n    var levels = option.levels || []; // Used in \"visual priority\" in `treemapVisual.js`.\n    // This way is a little tricky, must satisfy the precondition:\n    //   1. There is no `treeNode.getModel('itemStyle.xxx')` used.\n    //   2. The `Model.prototype.getModel()` will not use any clone-like way.\n\n    var designatedVisualItemStyle = this.designatedVisualItemStyle = {};\n    var designatedVisualModel = new Model({\n      itemStyle: designatedVisualItemStyle\n    }, this, ecModel);\n    levels = option.levels = setDefault(levels, ecModel);\n    var levelModels = zrUtil.map(levels || [], function (levelDefine) {\n      return new Model(levelDefine, designatedVisualModel, ecModel);\n    }, this); // Make sure always a new tree is created when setOption,\n    // in TreemapView, we check whether oldTree === newTree\n    // to choose mappings approach among old shapes and new shapes.\n\n    var tree = Tree.createTree(root, this, beforeLink);\n\n    function beforeLink(nodeData) {\n      nodeData.wrapMethod('getItemModel', function (model, idx) {\n        var node = tree.getNodeByDataIndex(idx);\n        var levelModel = node ? levelModels[node.depth] : null; // If no levelModel, we also need `designatedVisualModel`.\n\n        model.parentModel = levelModel || designatedVisualModel;\n        return model;\n      });\n    }\n\n    return tree.data;\n  };\n\n  TreemapSeriesModel.prototype.optionUpdated = function () {\n    this.resetViewRoot();\n  };\n  /**\n   * @override\n   * @param {number} dataIndex\n   * @param {boolean} [mutipleSeries=false]\n   */\n\n\n  TreemapSeriesModel.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    var data = this.getData();\n    var value = this.getRawValue(dataIndex);\n    var name = data.getName(dataIndex);\n    return createTooltipMarkup('nameValue', {\n      name: name,\n      value: value\n    });\n  };\n  /**\n   * Add tree path to tooltip param\n   *\n   * @override\n   * @param {number} dataIndex\n   * @return {Object}\n   */\n\n\n  TreemapSeriesModel.prototype.getDataParams = function (dataIndex) {\n    var params = _super.prototype.getDataParams.apply(this, arguments);\n\n    var node = this.getData().tree.getNodeByDataIndex(dataIndex);\n    params.treeAncestors = wrapTreePathInfo(node, this); // compatitable the previous code.\n\n    params.treePathInfo = params.treeAncestors;\n    return params;\n  };\n  /**\n   * @public\n   * @param {Object} layoutInfo {\n   *                                x: containerGroup x\n   *                                y: containerGroup y\n   *                                width: containerGroup width\n   *                                height: containerGroup height\n   *                            }\n   */\n\n\n  TreemapSeriesModel.prototype.setLayoutInfo = function (layoutInfo) {\n    /**\n     * @readOnly\n     * @type {Object}\n     */\n    this.layoutInfo = this.layoutInfo || {};\n    zrUtil.extend(this.layoutInfo, layoutInfo);\n  };\n  /**\n   * @param  {string} id\n   * @return {number} index\n   */\n\n\n  TreemapSeriesModel.prototype.mapIdToIndex = function (id) {\n    // A feature is implemented:\n    // index is monotone increasing with the sequence of\n    // input id at the first time.\n    // This feature can make sure that each data item and its\n    // mapped color have the same index between data list and\n    // color list at the beginning, which is useful for user\n    // to adjust data-color mapping.\n\n    /**\n     * @private\n     * @type {Object}\n     */\n    var idIndexMap = this._idIndexMap;\n\n    if (!idIndexMap) {\n      idIndexMap = this._idIndexMap = zrUtil.createHashMap();\n      /**\n       * @private\n       * @type {number}\n       */\n\n      this._idIndexMapCount = 0;\n    }\n\n    var index = idIndexMap.get(id);\n\n    if (index == null) {\n      idIndexMap.set(id, index = this._idIndexMapCount++);\n    }\n\n    return index;\n  };\n\n  TreemapSeriesModel.prototype.getViewRoot = function () {\n    return this._viewRoot;\n  };\n\n  TreemapSeriesModel.prototype.resetViewRoot = function (viewRoot) {\n    viewRoot ? this._viewRoot = viewRoot : viewRoot = this._viewRoot;\n    var root = this.getRawData().tree.root;\n\n    if (!viewRoot || viewRoot !== root && !root.contains(viewRoot)) {\n      this._viewRoot = root;\n    }\n  };\n\n  TreemapSeriesModel.prototype.enableAriaDecal = function () {\n    enableAriaDecalForTree(this);\n  };\n\n  TreemapSeriesModel.type = 'series.treemap';\n  TreemapSeriesModel.layoutMode = 'box';\n  TreemapSeriesModel.defaultOption = {\n    // Disable progressive rendering\n    progressive: 0,\n    // size: ['80%', '80%'],            // deprecated, compatible with ec2.\n    left: 'center',\n    top: 'middle',\n    width: '80%',\n    height: '80%',\n    sort: true,\n    clipWindow: 'origin',\n    squareRatio: 0.5 * (1 + Math.sqrt(5)),\n    leafDepth: null,\n    drillDownIcon: '▶',\n    // to align specialized icon. ▷▶❒❐▼✚\n    zoomToNodeRatio: 0.32 * 0.32,\n    roam: true,\n    nodeClick: 'zoomToNode',\n    animation: true,\n    animationDurationUpdate: 900,\n    animationEasing: 'quinticInOut',\n    breadcrumb: {\n      show: true,\n      height: 22,\n      left: 'center',\n      top: 'bottom',\n      // right\n      // bottom\n      emptyItemWidth: 25,\n      itemStyle: {\n        color: 'rgba(0,0,0,0.7)',\n        textStyle: {\n          color: '#fff'\n        }\n      }\n    },\n    label: {\n      show: true,\n      // Do not use textDistance, for ellipsis rect just the same as treemap node rect.\n      distance: 0,\n      padding: 5,\n      position: 'inside',\n      // formatter: null,\n      color: '#fff',\n      overflow: 'truncate' // align\n      // verticalAlign\n\n    },\n    upperLabel: {\n      show: false,\n      position: [0, '50%'],\n      height: 20,\n      // formatter: null,\n      // color: '#fff',\n      overflow: 'truncate',\n      // align: null,\n      verticalAlign: 'middle'\n    },\n    itemStyle: {\n      color: null,\n      colorAlpha: null,\n      colorSaturation: null,\n      borderWidth: 0,\n      gapWidth: 0,\n      borderColor: '#fff',\n      borderColorSaturation: null // If specified, borderColor will be ineffective, and the\n      // border color is evaluated by color of current node and\n      // borderColorSaturation.\n\n    },\n    emphasis: {\n      upperLabel: {\n        show: true,\n        position: [0, '50%'],\n        ellipsis: true,\n        verticalAlign: 'middle'\n      }\n    },\n    visualDimension: 0,\n    visualMin: null,\n    visualMax: null,\n    color: [],\n    // level[n].color (if necessary).\n    // + Specify color list of each level. level[0].color would be global\n    // color list if not specified. (see method `setDefault`).\n    // + But set as a empty array to forbid fetch color from global palette\n    // when using nodeModel.get('color'), otherwise nodes on deep level\n    // will always has color palette set and are not able to inherit color\n    // from parent node.\n    // + TreemapSeries.color can not be set as 'none', otherwise effect\n    // legend color fetching (see seriesColor.js).\n    colorAlpha: null,\n    colorSaturation: null,\n    colorMappingBy: 'index',\n    visibleMin: 10,\n    // be rendered. Only works when sort is 'asc' or 'desc'.\n    childrenVisibleMin: null,\n    // grandchildren will not show.\n    // Why grandchildren? If not grandchildren but children,\n    // some siblings show children and some not,\n    // the appearance may be mess and not consistent,\n    levels: [] // Each item: {\n    //     visibleMin, itemStyle, visualDimension, label\n    // }\n    // data: {\n    //      value: [],\n    //      children: [],\n    //      link: 'http://xxx.xxx.xxx',\n    //      target: 'blank' or 'self'\n    // }\n\n  };\n  return TreemapSeriesModel;\n}(SeriesModel);\n/**\n * @param {Object} dataNode\n */\n\n\nfunction completeTreeValue(dataNode) {\n  // Postorder travel tree.\n  // If value of none-leaf node is not set,\n  // calculate it by suming up the value of all children.\n  var sum = 0;\n  zrUtil.each(dataNode.children, function (child) {\n    completeTreeValue(child);\n    var childValue = child.value;\n    zrUtil.isArray(childValue) && (childValue = childValue[0]);\n    sum += childValue;\n  });\n  var thisValue = dataNode.value;\n\n  if (zrUtil.isArray(thisValue)) {\n    thisValue = thisValue[0];\n  }\n\n  if (thisValue == null || isNaN(thisValue)) {\n    thisValue = sum;\n  } // Value should not less than 0.\n\n\n  if (thisValue < 0) {\n    thisValue = 0;\n  }\n\n  zrUtil.isArray(dataNode.value) ? dataNode.value[0] = thisValue : dataNode.value = thisValue;\n}\n/**\n * set default to level configuration\n */\n\n\nfunction setDefault(levels, ecModel) {\n  var globalColorList = normalizeToArray(ecModel.get('color'));\n  var globalDecalList = normalizeToArray(ecModel.get(['aria', 'decal', 'decals']));\n\n  if (!globalColorList) {\n    return;\n  }\n\n  levels = levels || [];\n  var hasColorDefine;\n  var hasDecalDefine;\n  zrUtil.each(levels, function (levelDefine) {\n    var model = new Model(levelDefine);\n    var modelColor = model.get('color');\n    var modelDecal = model.get('decal');\n\n    if (model.get(['itemStyle', 'color']) || modelColor && modelColor !== 'none') {\n      hasColorDefine = true;\n    }\n\n    if (model.get(['itemStyle', 'decal']) || modelDecal && modelDecal !== 'none') {\n      hasDecalDefine = true;\n    }\n  });\n  var level0 = levels[0] || (levels[0] = {});\n\n  if (!hasColorDefine) {\n    level0.color = globalColorList.slice();\n  }\n\n  if (!hasDecalDefine && globalDecalList) {\n    level0.decal = globalDecalList.slice();\n  }\n\n  return levels;\n}\n\nexport default TreemapSeriesModel;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/chart/treemap/TreemapSeries.js"],"names":["__extends","zrUtil","SeriesModel","Tree","Model","wrapTreePathInfo","normalizeToArray","createTooltipMarkup","enableAriaDecalForTree","TreemapSeriesModel","_super","_this","apply","arguments","type","preventUsingHoverLayer","prototype","getInitialData","option","ecModel","root","name","children","data","completeTreeValue","levels","designatedVisualItemStyle","designatedVisualModel","itemStyle","setDefault","levelModels","map","levelDefine","tree","createTree","beforeLink","nodeData","wrapMethod","model","idx","node","getNodeByDataIndex","levelModel","depth","parentModel","optionUpdated","resetViewRoot","formatTooltip","dataIndex","multipleSeries","dataType","getData","value","getRawValue","getName","getDataParams","params","treeAncestors","treePathInfo","setLayoutInfo","layoutInfo","extend","mapIdToIndex","id","idIndexMap","_idIndexMap","createHashMap","_idIndexMapCount","index","get","set","getViewRoot","_viewRoot","viewRoot","getRawData","contains","enableAriaDecal","layoutMode","defaultOption","progressive","left","top","width","height","sort","clipWindow","squareRatio","Math","sqrt","leafDepth","drillDownIcon","zoomToNodeRatio","roam","nodeClick","animation","animationDurationUpdate","animationEasing","breadcrumb","show","emptyItemWidth","color","textStyle","label","distance","padding","position","overflow","upperLabel","verticalAlign","colorAlpha","colorSaturation","borderWidth","gapWidth","borderColor","borderColorSaturation","emphasis","ellipsis","visualDimension","visualMin","visualMax","colorMappingBy","visibleMin","childrenVisibleMin","dataNode","sum","each","child","childValue","isArray","thisValue","isNaN","globalColorList","globalDecalList","hasColorDefine","hasDecalDefine","modelColor","modelDecal","level0","slice","decal"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport SeriesModel from '../../model/Series';\nimport Tree from '../../data/Tree';\nimport Model from '../../model/Model';\nimport { wrapTreePathInfo } from '../helper/treeHelper';\nimport { normalizeToArray } from '../../util/model';\nimport { createTooltipMarkup } from '../../component/tooltip/tooltipMarkup';\nimport enableAriaDecalForTree from '../helper/enableAriaDecalForTree';\n\nvar TreemapSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(TreemapSeriesModel, _super);\n\n  function TreemapSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = TreemapSeriesModel.type;\n    _this.preventUsingHoverLayer = true;\n    return _this;\n  }\n  /**\n   * @override\n   */\n\n\n  TreemapSeriesModel.prototype.getInitialData = function (option, ecModel) {\n    // Create a virtual root.\n    var root = {\n      name: option.name,\n      children: option.data\n    };\n    completeTreeValue(root);\n    var levels = option.levels || []; // Used in \"visual priority\" in `treemapVisual.js`.\n    // This way is a little tricky, must satisfy the precondition:\n    //   1. There is no `treeNode.getModel('itemStyle.xxx')` used.\n    //   2. The `Model.prototype.getModel()` will not use any clone-like way.\n\n    var designatedVisualItemStyle = this.designatedVisualItemStyle = {};\n    var designatedVisualModel = new Model({\n      itemStyle: designatedVisualItemStyle\n    }, this, ecModel);\n    levels = option.levels = setDefault(levels, ecModel);\n    var levelModels = zrUtil.map(levels || [], function (levelDefine) {\n      return new Model(levelDefine, designatedVisualModel, ecModel);\n    }, this); // Make sure always a new tree is created when setOption,\n    // in TreemapView, we check whether oldTree === newTree\n    // to choose mappings approach among old shapes and new shapes.\n\n    var tree = Tree.createTree(root, this, beforeLink);\n\n    function beforeLink(nodeData) {\n      nodeData.wrapMethod('getItemModel', function (model, idx) {\n        var node = tree.getNodeByDataIndex(idx);\n        var levelModel = node ? levelModels[node.depth] : null; // If no levelModel, we also need `designatedVisualModel`.\n\n        model.parentModel = levelModel || designatedVisualModel;\n        return model;\n      });\n    }\n\n    return tree.data;\n  };\n\n  TreemapSeriesModel.prototype.optionUpdated = function () {\n    this.resetViewRoot();\n  };\n  /**\n   * @override\n   * @param {number} dataIndex\n   * @param {boolean} [mutipleSeries=false]\n   */\n\n\n  TreemapSeriesModel.prototype.formatTooltip = function (dataIndex, multipleSeries, dataType) {\n    var data = this.getData();\n    var value = this.getRawValue(dataIndex);\n    var name = data.getName(dataIndex);\n    return createTooltipMarkup('nameValue', {\n      name: name,\n      value: value\n    });\n  };\n  /**\n   * Add tree path to tooltip param\n   *\n   * @override\n   * @param {number} dataIndex\n   * @return {Object}\n   */\n\n\n  TreemapSeriesModel.prototype.getDataParams = function (dataIndex) {\n    var params = _super.prototype.getDataParams.apply(this, arguments);\n\n    var node = this.getData().tree.getNodeByDataIndex(dataIndex);\n    params.treeAncestors = wrapTreePathInfo(node, this); // compatitable the previous code.\n\n    params.treePathInfo = params.treeAncestors;\n    return params;\n  };\n  /**\n   * @public\n   * @param {Object} layoutInfo {\n   *                                x: containerGroup x\n   *                                y: containerGroup y\n   *                                width: containerGroup width\n   *                                height: containerGroup height\n   *                            }\n   */\n\n\n  TreemapSeriesModel.prototype.setLayoutInfo = function (layoutInfo) {\n    /**\n     * @readOnly\n     * @type {Object}\n     */\n    this.layoutInfo = this.layoutInfo || {};\n    zrUtil.extend(this.layoutInfo, layoutInfo);\n  };\n  /**\n   * @param  {string} id\n   * @return {number} index\n   */\n\n\n  TreemapSeriesModel.prototype.mapIdToIndex = function (id) {\n    // A feature is implemented:\n    // index is monotone increasing with the sequence of\n    // input id at the first time.\n    // This feature can make sure that each data item and its\n    // mapped color have the same index between data list and\n    // color list at the beginning, which is useful for user\n    // to adjust data-color mapping.\n\n    /**\n     * @private\n     * @type {Object}\n     */\n    var idIndexMap = this._idIndexMap;\n\n    if (!idIndexMap) {\n      idIndexMap = this._idIndexMap = zrUtil.createHashMap();\n      /**\n       * @private\n       * @type {number}\n       */\n\n      this._idIndexMapCount = 0;\n    }\n\n    var index = idIndexMap.get(id);\n\n    if (index == null) {\n      idIndexMap.set(id, index = this._idIndexMapCount++);\n    }\n\n    return index;\n  };\n\n  TreemapSeriesModel.prototype.getViewRoot = function () {\n    return this._viewRoot;\n  };\n\n  TreemapSeriesModel.prototype.resetViewRoot = function (viewRoot) {\n    viewRoot ? this._viewRoot = viewRoot : viewRoot = this._viewRoot;\n    var root = this.getRawData().tree.root;\n\n    if (!viewRoot || viewRoot !== root && !root.contains(viewRoot)) {\n      this._viewRoot = root;\n    }\n  };\n\n  TreemapSeriesModel.prototype.enableAriaDecal = function () {\n    enableAriaDecalForTree(this);\n  };\n\n  TreemapSeriesModel.type = 'series.treemap';\n  TreemapSeriesModel.layoutMode = 'box';\n  TreemapSeriesModel.defaultOption = {\n    // Disable progressive rendering\n    progressive: 0,\n    // size: ['80%', '80%'],            // deprecated, compatible with ec2.\n    left: 'center',\n    top: 'middle',\n    width: '80%',\n    height: '80%',\n    sort: true,\n    clipWindow: 'origin',\n    squareRatio: 0.5 * (1 + Math.sqrt(5)),\n    leafDepth: null,\n    drillDownIcon: '▶',\n    // to align specialized icon. ▷▶❒❐▼✚\n    zoomToNodeRatio: 0.32 * 0.32,\n    roam: true,\n    nodeClick: 'zoomToNode',\n    animation: true,\n    animationDurationUpdate: 900,\n    animationEasing: 'quinticInOut',\n    breadcrumb: {\n      show: true,\n      height: 22,\n      left: 'center',\n      top: 'bottom',\n      // right\n      // bottom\n      emptyItemWidth: 25,\n      itemStyle: {\n        color: 'rgba(0,0,0,0.7)',\n        textStyle: {\n          color: '#fff'\n        }\n      }\n    },\n    label: {\n      show: true,\n      // Do not use textDistance, for ellipsis rect just the same as treemap node rect.\n      distance: 0,\n      padding: 5,\n      position: 'inside',\n      // formatter: null,\n      color: '#fff',\n      overflow: 'truncate' // align\n      // verticalAlign\n\n    },\n    upperLabel: {\n      show: false,\n      position: [0, '50%'],\n      height: 20,\n      // formatter: null,\n      // color: '#fff',\n      overflow: 'truncate',\n      // align: null,\n      verticalAlign: 'middle'\n    },\n    itemStyle: {\n      color: null,\n      colorAlpha: null,\n      colorSaturation: null,\n      borderWidth: 0,\n      gapWidth: 0,\n      borderColor: '#fff',\n      borderColorSaturation: null // If specified, borderColor will be ineffective, and the\n      // border color is evaluated by color of current node and\n      // borderColorSaturation.\n\n    },\n    emphasis: {\n      upperLabel: {\n        show: true,\n        position: [0, '50%'],\n        ellipsis: true,\n        verticalAlign: 'middle'\n      }\n    },\n    visualDimension: 0,\n    visualMin: null,\n    visualMax: null,\n    color: [],\n    // level[n].color (if necessary).\n    // + Specify color list of each level. level[0].color would be global\n    // color list if not specified. (see method `setDefault`).\n    // + But set as a empty array to forbid fetch color from global palette\n    // when using nodeModel.get('color'), otherwise nodes on deep level\n    // will always has color palette set and are not able to inherit color\n    // from parent node.\n    // + TreemapSeries.color can not be set as 'none', otherwise effect\n    // legend color fetching (see seriesColor.js).\n    colorAlpha: null,\n    colorSaturation: null,\n    colorMappingBy: 'index',\n    visibleMin: 10,\n    // be rendered. Only works when sort is 'asc' or 'desc'.\n    childrenVisibleMin: null,\n    // grandchildren will not show.\n    // Why grandchildren? If not grandchildren but children,\n    // some siblings show children and some not,\n    // the appearance may be mess and not consistent,\n    levels: [] // Each item: {\n    //     visibleMin, itemStyle, visualDimension, label\n    // }\n    // data: {\n    //      value: [],\n    //      children: [],\n    //      link: 'http://xxx.xxx.xxx',\n    //      target: 'blank' or 'self'\n    // }\n\n  };\n  return TreemapSeriesModel;\n}(SeriesModel);\n/**\n * @param {Object} dataNode\n */\n\n\nfunction completeTreeValue(dataNode) {\n  // Postorder travel tree.\n  // If value of none-leaf node is not set,\n  // calculate it by suming up the value of all children.\n  var sum = 0;\n  zrUtil.each(dataNode.children, function (child) {\n    completeTreeValue(child);\n    var childValue = child.value;\n    zrUtil.isArray(childValue) && (childValue = childValue[0]);\n    sum += childValue;\n  });\n  var thisValue = dataNode.value;\n\n  if (zrUtil.isArray(thisValue)) {\n    thisValue = thisValue[0];\n  }\n\n  if (thisValue == null || isNaN(thisValue)) {\n    thisValue = sum;\n  } // Value should not less than 0.\n\n\n  if (thisValue < 0) {\n    thisValue = 0;\n  }\n\n  zrUtil.isArray(dataNode.value) ? dataNode.value[0] = thisValue : dataNode.value = thisValue;\n}\n/**\n * set default to level configuration\n */\n\n\nfunction setDefault(levels, ecModel) {\n  var globalColorList = normalizeToArray(ecModel.get('color'));\n  var globalDecalList = normalizeToArray(ecModel.get(['aria', 'decal', 'decals']));\n\n  if (!globalColorList) {\n    return;\n  }\n\n  levels = levels || [];\n  var hasColorDefine;\n  var hasDecalDefine;\n  zrUtil.each(levels, function (levelDefine) {\n    var model = new Model(levelDefine);\n    var modelColor = model.get('color');\n    var modelDecal = model.get('decal');\n\n    if (model.get(['itemStyle', 'color']) || modelColor && modelColor !== 'none') {\n      hasColorDefine = true;\n    }\n\n    if (model.get(['itemStyle', 'decal']) || modelDecal && modelDecal !== 'none') {\n      hasDecalDefine = true;\n    }\n  });\n  var level0 = levels[0] || (levels[0] = {});\n\n  if (!hasColorDefine) {\n    level0.color = globalColorList.slice();\n  }\n\n  if (!hasDecalDefine && globalDecalList) {\n    level0.decal = globalDecalList.slice();\n  }\n\n  return levels;\n}\n\nexport default TreemapSeriesModel;"]},"metadata":{},"sourceType":"module"}