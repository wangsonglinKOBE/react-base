{"ast":null,"code":"import * as vec2 from './vector';\nimport BoundingRect from './BoundingRect';\nimport { devicePixelRatio as dpr } from '../config';\nimport { fromLine, fromCubic, fromQuadratic, fromArc } from './bbox';\nimport { cubicAt, cubicLength, cubicSubdivide, quadraticLength, quadraticSubdivide } from './curve';\nvar CMD = {\n  M: 1,\n  L: 2,\n  C: 3,\n  Q: 4,\n  A: 5,\n  Z: 6,\n  R: 7\n};\nvar tmpOutX = [];\nvar tmpOutY = [];\nvar min = [];\nvar max = [];\nvar min2 = [];\nvar max2 = [];\nvar mathMin = Math.min;\nvar mathMax = Math.max;\nvar mathCos = Math.cos;\nvar mathSin = Math.sin;\nvar mathSqrt = Math.sqrt;\nvar mathAbs = Math.abs;\nvar PI = Math.PI;\nvar PI2 = PI * 2;\nvar hasTypedArray = typeof Float32Array !== 'undefined';\nvar tmpAngles = [];\n\nfunction modPI2(radian) {\n  var n = Math.round(radian / PI * 1e8) / 1e8;\n  return n % 2 * PI;\n}\n\nexport function normalizeArcAngles(angles, anticlockwise) {\n  var newStartAngle = modPI2(angles[0]);\n\n  if (newStartAngle < 0) {\n    newStartAngle += PI2;\n  }\n\n  var delta = newStartAngle - angles[0];\n  var newEndAngle = angles[1];\n  newEndAngle += delta;\n\n  if (!anticlockwise && newEndAngle - newStartAngle >= PI2) {\n    newEndAngle = newStartAngle + PI2;\n  } else if (anticlockwise && newStartAngle - newEndAngle >= PI2) {\n    newEndAngle = newStartAngle - PI2;\n  } else if (!anticlockwise && newStartAngle > newEndAngle) {\n    newEndAngle = newStartAngle + (PI2 - modPI2(newStartAngle - newEndAngle));\n  } else if (anticlockwise && newStartAngle < newEndAngle) {\n    newEndAngle = newStartAngle - (PI2 - modPI2(newEndAngle - newStartAngle));\n  }\n\n  angles[0] = newStartAngle;\n  angles[1] = newEndAngle;\n}\n\nvar PathProxy = function () {\n  function PathProxy(notSaveData) {\n    this.dpr = 1;\n    this._xi = 0;\n    this._yi = 0;\n    this._x0 = 0;\n    this._y0 = 0;\n    this._len = 0;\n\n    if (notSaveData) {\n      this._saveData = false;\n    }\n\n    if (this._saveData) {\n      this.data = [];\n    }\n  }\n\n  PathProxy.prototype.increaseVersion = function () {\n    this._version++;\n  };\n\n  PathProxy.prototype.getVersion = function () {\n    return this._version;\n  };\n\n  PathProxy.prototype.setScale = function (sx, sy, segmentIgnoreThreshold) {\n    segmentIgnoreThreshold = segmentIgnoreThreshold || 0;\n\n    if (segmentIgnoreThreshold > 0) {\n      this._ux = mathAbs(segmentIgnoreThreshold / dpr / sx) || 0;\n      this._uy = mathAbs(segmentIgnoreThreshold / dpr / sy) || 0;\n    }\n  };\n\n  PathProxy.prototype.setDPR = function (dpr) {\n    this.dpr = dpr;\n  };\n\n  PathProxy.prototype.setContext = function (ctx) {\n    this._ctx = ctx;\n  };\n\n  PathProxy.prototype.getContext = function () {\n    return this._ctx;\n  };\n\n  PathProxy.prototype.beginPath = function () {\n    this._ctx && this._ctx.beginPath();\n    this.reset();\n    return this;\n  };\n\n  PathProxy.prototype.reset = function () {\n    if (this._saveData) {\n      this._len = 0;\n    }\n\n    if (this._lineDash) {\n      this._lineDash = null;\n      this._dashOffset = 0;\n    }\n\n    if (this._pathSegLen) {\n      this._pathSegLen = null;\n      this._pathLen = 0;\n    }\n\n    this._version++;\n  };\n\n  PathProxy.prototype.moveTo = function (x, y) {\n    this._drawPendingPt();\n\n    this.addData(CMD.M, x, y);\n    this._ctx && this._ctx.moveTo(x, y);\n    this._x0 = x;\n    this._y0 = y;\n    this._xi = x;\n    this._yi = y;\n    return this;\n  };\n\n  PathProxy.prototype.lineTo = function (x, y) {\n    var dx = mathAbs(x - this._xi);\n    var dy = mathAbs(y - this._yi);\n    var exceedUnit = dx > this._ux || dy > this._uy;\n    this.addData(CMD.L, x, y);\n\n    if (this._ctx && exceedUnit) {\n      this._needsDash ? this._dashedLineTo(x, y) : this._ctx.lineTo(x, y);\n    }\n\n    if (exceedUnit) {\n      this._xi = x;\n      this._yi = y;\n      this._pendingPtDist = 0;\n    } else {\n      var d2 = dx * dx + dy * dy;\n\n      if (d2 > this._pendingPtDist) {\n        this._pendingPtX = x;\n        this._pendingPtY = y;\n        this._pendingPtDist = d2;\n      }\n    }\n\n    return this;\n  };\n\n  PathProxy.prototype.bezierCurveTo = function (x1, y1, x2, y2, x3, y3) {\n    this._drawPendingPt();\n\n    this.addData(CMD.C, x1, y1, x2, y2, x3, y3);\n\n    if (this._ctx) {\n      this._needsDash ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3) : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n    }\n\n    this._xi = x3;\n    this._yi = y3;\n    return this;\n  };\n\n  PathProxy.prototype.quadraticCurveTo = function (x1, y1, x2, y2) {\n    this._drawPendingPt();\n\n    this.addData(CMD.Q, x1, y1, x2, y2);\n\n    if (this._ctx) {\n      this._needsDash ? this._dashedQuadraticTo(x1, y1, x2, y2) : this._ctx.quadraticCurveTo(x1, y1, x2, y2);\n    }\n\n    this._xi = x2;\n    this._yi = y2;\n    return this;\n  };\n\n  PathProxy.prototype.arc = function (cx, cy, r, startAngle, endAngle, anticlockwise) {\n    this._drawPendingPt();\n\n    tmpAngles[0] = startAngle;\n    tmpAngles[1] = endAngle;\n    normalizeArcAngles(tmpAngles, anticlockwise);\n    startAngle = tmpAngles[0];\n    endAngle = tmpAngles[1];\n    var delta = endAngle - startAngle;\n    this.addData(CMD.A, cx, cy, r, r, startAngle, delta, 0, anticlockwise ? 0 : 1);\n    this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);\n    this._xi = mathCos(endAngle) * r + cx;\n    this._yi = mathSin(endAngle) * r + cy;\n    return this;\n  };\n\n  PathProxy.prototype.arcTo = function (x1, y1, x2, y2, radius) {\n    this._drawPendingPt();\n\n    if (this._ctx) {\n      this._ctx.arcTo(x1, y1, x2, y2, radius);\n    }\n\n    return this;\n  };\n\n  PathProxy.prototype.rect = function (x, y, w, h) {\n    this._drawPendingPt();\n\n    this._ctx && this._ctx.rect(x, y, w, h);\n    this.addData(CMD.R, x, y, w, h);\n    return this;\n  };\n\n  PathProxy.prototype.closePath = function () {\n    this._drawPendingPt();\n\n    this.addData(CMD.Z);\n    var ctx = this._ctx;\n    var x0 = this._x0;\n    var y0 = this._y0;\n\n    if (ctx) {\n      this._needsDash && this._dashedLineTo(x0, y0);\n      ctx.closePath();\n    }\n\n    this._xi = x0;\n    this._yi = y0;\n    return this;\n  };\n\n  PathProxy.prototype.fill = function (ctx) {\n    ctx && ctx.fill();\n    this.toStatic();\n  };\n\n  PathProxy.prototype.stroke = function (ctx) {\n    ctx && ctx.stroke();\n    this.toStatic();\n  };\n\n  PathProxy.prototype.setLineDash = function (lineDash) {\n    if (lineDash instanceof Array) {\n      this._lineDash = lineDash;\n      this._dashIdx = 0;\n      var lineDashSum = 0;\n\n      for (var i = 0; i < lineDash.length; i++) {\n        lineDashSum += lineDash[i];\n      }\n\n      this._dashSum = lineDashSum;\n      this._needsDash = true;\n    } else {\n      this._lineDash = null;\n      this._needsDash = false;\n    }\n\n    return this;\n  };\n\n  PathProxy.prototype.setLineDashOffset = function (offset) {\n    this._dashOffset = offset;\n    return this;\n  };\n\n  PathProxy.prototype.len = function () {\n    return this._len;\n  };\n\n  PathProxy.prototype.setData = function (data) {\n    var len = data.length;\n\n    if (!(this.data && this.data.length === len) && hasTypedArray) {\n      this.data = new Float32Array(len);\n    }\n\n    for (var i = 0; i < len; i++) {\n      this.data[i] = data[i];\n    }\n\n    this._len = len;\n  };\n\n  PathProxy.prototype.appendPath = function (path) {\n    if (!(path instanceof Array)) {\n      path = [path];\n    }\n\n    var len = path.length;\n    var appendSize = 0;\n    var offset = this._len;\n\n    for (var i = 0; i < len; i++) {\n      appendSize += path[i].len();\n    }\n\n    if (hasTypedArray && this.data instanceof Float32Array) {\n      this.data = new Float32Array(offset + appendSize);\n    }\n\n    for (var i = 0; i < len; i++) {\n      var appendPathData = path[i].data;\n\n      for (var k = 0; k < appendPathData.length; k++) {\n        this.data[offset++] = appendPathData[k];\n      }\n    }\n\n    this._len = offset;\n  };\n\n  PathProxy.prototype.addData = function (cmd, a, b, c, d, e, f, g, h) {\n    if (!this._saveData) {\n      return;\n    }\n\n    var data = this.data;\n\n    if (this._len + arguments.length > data.length) {\n      this._expandData();\n\n      data = this.data;\n    }\n\n    for (var i = 0; i < arguments.length; i++) {\n      data[this._len++] = arguments[i];\n    }\n  };\n\n  PathProxy.prototype._drawPendingPt = function () {\n    if (this._pendingPtDist > 0) {\n      this._ctx && this._ctx.lineTo(this._pendingPtX, this._pendingPtY);\n      this._pendingPtDist = 0;\n    }\n  };\n\n  PathProxy.prototype._expandData = function () {\n    if (!(this.data instanceof Array)) {\n      var newData = [];\n\n      for (var i = 0; i < this._len; i++) {\n        newData[i] = this.data[i];\n      }\n\n      this.data = newData;\n    }\n  };\n\n  PathProxy.prototype._dashedLineTo = function (x1, y1) {\n    var dashSum = this._dashSum;\n    var lineDash = this._lineDash;\n    var ctx = this._ctx;\n    var offset = this._dashOffset;\n    var x0 = this._xi;\n    var y0 = this._yi;\n    var dx = x1 - x0;\n    var dy = y1 - y0;\n    var dist = mathSqrt(dx * dx + dy * dy);\n    var x = x0;\n    var y = y0;\n    var nDash = lineDash.length;\n    var dash;\n    var idx;\n    dx /= dist;\n    dy /= dist;\n\n    if (offset < 0) {\n      offset = dashSum + offset;\n    }\n\n    offset %= dashSum;\n    x -= offset * dx;\n    y -= offset * dy;\n\n    while (dx > 0 && x <= x1 || dx < 0 && x >= x1 || dx === 0 && (dy > 0 && y <= y1 || dy < 0 && y >= y1)) {\n      idx = this._dashIdx;\n      dash = lineDash[idx];\n      x += dx * dash;\n      y += dy * dash;\n      this._dashIdx = (idx + 1) % nDash;\n\n      if (dx > 0 && x < x0 || dx < 0 && x > x0 || dy > 0 && y < y0 || dy < 0 && y > y0) {\n        continue;\n      }\n\n      ctx[idx % 2 ? 'moveTo' : 'lineTo'](dx >= 0 ? mathMin(x, x1) : mathMax(x, x1), dy >= 0 ? mathMin(y, y1) : mathMax(y, y1));\n    }\n\n    dx = x - x1;\n    dy = y - y1;\n    this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n  };\n\n  PathProxy.prototype._dashedBezierTo = function (x1, y1, x2, y2, x3, y3) {\n    var ctx = this._ctx;\n    var dashSum = this._dashSum;\n    var offset = this._dashOffset;\n    var lineDash = this._lineDash;\n    var x0 = this._xi;\n    var y0 = this._yi;\n    var bezierLen = 0;\n    var idx = this._dashIdx;\n    var nDash = lineDash.length;\n    var t;\n    var dx;\n    var dy;\n    var x;\n    var y;\n    var tmpLen = 0;\n\n    if (offset < 0) {\n      offset = dashSum + offset;\n    }\n\n    offset %= dashSum;\n\n    for (t = 0; t < 1; t += 0.1) {\n      dx = cubicAt(x0, x1, x2, x3, t + 0.1) - cubicAt(x0, x1, x2, x3, t);\n      dy = cubicAt(y0, y1, y2, y3, t + 0.1) - cubicAt(y0, y1, y2, y3, t);\n      bezierLen += mathSqrt(dx * dx + dy * dy);\n    }\n\n    for (; idx < nDash; idx++) {\n      tmpLen += lineDash[idx];\n\n      if (tmpLen > offset) {\n        break;\n      }\n    }\n\n    t = (tmpLen - offset) / bezierLen;\n\n    while (t <= 1) {\n      x = cubicAt(x0, x1, x2, x3, t);\n      y = cubicAt(y0, y1, y2, y3, t);\n      idx % 2 ? ctx.moveTo(x, y) : ctx.lineTo(x, y);\n      t += lineDash[idx] / bezierLen;\n      idx = (idx + 1) % nDash;\n    }\n\n    idx % 2 !== 0 && ctx.lineTo(x3, y3);\n    dx = x3 - x;\n    dy = y3 - y;\n    this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n  };\n\n  PathProxy.prototype._dashedQuadraticTo = function (x1, y1, x2, y2) {\n    var x3 = x2;\n    var y3 = y2;\n    x2 = (x2 + 2 * x1) / 3;\n    y2 = (y2 + 2 * y1) / 3;\n    x1 = (this._xi + 2 * x1) / 3;\n    y1 = (this._yi + 2 * y1) / 3;\n\n    this._dashedBezierTo(x1, y1, x2, y2, x3, y3);\n  };\n\n  PathProxy.prototype.toStatic = function () {\n    if (!this._saveData) {\n      return;\n    }\n\n    this._drawPendingPt();\n\n    var data = this.data;\n\n    if (data instanceof Array) {\n      data.length = this._len;\n\n      if (hasTypedArray && this._len > 11) {\n        this.data = new Float32Array(data);\n      }\n    }\n  };\n\n  PathProxy.prototype.getBoundingRect = function () {\n    min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;\n    max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;\n    var data = this.data;\n    var xi = 0;\n    var yi = 0;\n    var x0 = 0;\n    var y0 = 0;\n    var i;\n\n    for (i = 0; i < this._len;) {\n      var cmd = data[i++];\n      var isFirst = i === 1;\n\n      if (isFirst) {\n        xi = data[i];\n        yi = data[i + 1];\n        x0 = xi;\n        y0 = yi;\n      }\n\n      switch (cmd) {\n        case CMD.M:\n          xi = x0 = data[i++];\n          yi = y0 = data[i++];\n          min2[0] = x0;\n          min2[1] = y0;\n          max2[0] = x0;\n          max2[1] = y0;\n          break;\n\n        case CMD.L:\n          fromLine(xi, yi, data[i], data[i + 1], min2, max2);\n          xi = data[i++];\n          yi = data[i++];\n          break;\n\n        case CMD.C:\n          fromCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], min2, max2);\n          xi = data[i++];\n          yi = data[i++];\n          break;\n\n        case CMD.Q:\n          fromQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], min2, max2);\n          xi = data[i++];\n          yi = data[i++];\n          break;\n\n        case CMD.A:\n          var cx = data[i++];\n          var cy = data[i++];\n          var rx = data[i++];\n          var ry = data[i++];\n          var startAngle = data[i++];\n          var endAngle = data[i++] + startAngle;\n          i += 1;\n          var anticlockwise = !data[i++];\n\n          if (isFirst) {\n            x0 = mathCos(startAngle) * rx + cx;\n            y0 = mathSin(startAngle) * ry + cy;\n          }\n\n          fromArc(cx, cy, rx, ry, startAngle, endAngle, anticlockwise, min2, max2);\n          xi = mathCos(endAngle) * rx + cx;\n          yi = mathSin(endAngle) * ry + cy;\n          break;\n\n        case CMD.R:\n          x0 = xi = data[i++];\n          y0 = yi = data[i++];\n          var width = data[i++];\n          var height = data[i++];\n          fromLine(x0, y0, x0 + width, y0 + height, min2, max2);\n          break;\n\n        case CMD.Z:\n          xi = x0;\n          yi = y0;\n          break;\n      }\n\n      vec2.min(min, min, min2);\n      vec2.max(max, max, max2);\n    }\n\n    if (i === 0) {\n      min[0] = min[1] = max[0] = max[1] = 0;\n    }\n\n    return new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n  };\n\n  PathProxy.prototype._calculateLength = function () {\n    var data = this.data;\n    var len = this._len;\n    var ux = this._ux;\n    var uy = this._uy;\n    var xi = 0;\n    var yi = 0;\n    var x0 = 0;\n    var y0 = 0;\n\n    if (!this._pathSegLen) {\n      this._pathSegLen = [];\n    }\n\n    var pathSegLen = this._pathSegLen;\n    var pathTotalLen = 0;\n    var segCount = 0;\n\n    for (var i = 0; i < len;) {\n      var cmd = data[i++];\n      var isFirst = i === 1;\n\n      if (isFirst) {\n        xi = data[i];\n        yi = data[i + 1];\n        x0 = xi;\n        y0 = yi;\n      }\n\n      var l = -1;\n\n      switch (cmd) {\n        case CMD.M:\n          xi = x0 = data[i++];\n          yi = y0 = data[i++];\n          break;\n\n        case CMD.L:\n          {\n            var x2 = data[i++];\n            var y2 = data[i++];\n            var dx = x2 - xi;\n            var dy = y2 - yi;\n\n            if (mathAbs(dx) > ux || mathAbs(dy) > uy || i === len - 1) {\n              l = Math.sqrt(dx * dx + dy * dy);\n              xi = x2;\n              yi = y2;\n            }\n\n            break;\n          }\n\n        case CMD.C:\n          {\n            var x1 = data[i++];\n            var y1 = data[i++];\n            var x2 = data[i++];\n            var y2 = data[i++];\n            var x3 = data[i++];\n            var y3 = data[i++];\n            l = cubicLength(xi, yi, x1, y1, x2, y2, x3, y3, 10);\n            xi = x3;\n            yi = y3;\n            break;\n          }\n\n        case CMD.Q:\n          {\n            var x1 = data[i++];\n            var y1 = data[i++];\n            var x2 = data[i++];\n            var y2 = data[i++];\n            l = quadraticLength(xi, yi, x1, y1, x2, y2, 10);\n            xi = x2;\n            yi = y2;\n            break;\n          }\n\n        case CMD.A:\n          var cx = data[i++];\n          var cy = data[i++];\n          var rx = data[i++];\n          var ry = data[i++];\n          var startAngle = data[i++];\n          var delta = data[i++];\n          var endAngle = delta + startAngle;\n          i += 1;\n          var anticlockwise = !data[i++];\n\n          if (isFirst) {\n            x0 = mathCos(startAngle) * rx + cx;\n            y0 = mathSin(startAngle) * ry + cy;\n          }\n\n          l = mathMax(rx, ry) * mathMin(PI2, Math.abs(delta));\n          xi = mathCos(endAngle) * rx + cx;\n          yi = mathSin(endAngle) * ry + cy;\n          break;\n\n        case CMD.R:\n          {\n            x0 = xi = data[i++];\n            y0 = yi = data[i++];\n            var width = data[i++];\n            var height = data[i++];\n            l = width * 2 + height * 2;\n            break;\n          }\n\n        case CMD.Z:\n          {\n            var dx = x0 - xi;\n            var dy = y0 - yi;\n            l = Math.sqrt(dx * dx + dy * dy);\n            xi = x0;\n            yi = y0;\n            break;\n          }\n      }\n\n      if (l >= 0) {\n        pathSegLen[segCount++] = l;\n        pathTotalLen += l;\n      }\n    }\n\n    this._pathLen = pathTotalLen;\n    return pathTotalLen;\n  };\n\n  PathProxy.prototype.rebuildPath = function (ctx, percent) {\n    var d = this.data;\n    var ux = this._ux;\n    var uy = this._uy;\n    var len = this._len;\n    var x0;\n    var y0;\n    var xi;\n    var yi;\n    var x;\n    var y;\n    var drawPart = percent < 1;\n    var pathSegLen;\n    var pathTotalLen;\n    var accumLength = 0;\n    var segCount = 0;\n    var displayedLength;\n    var pendingPtDist = 0;\n    var pendingPtX;\n    var pendingPtY;\n\n    if (drawPart) {\n      if (!this._pathSegLen) {\n        this._calculateLength();\n      }\n\n      pathSegLen = this._pathSegLen;\n      pathTotalLen = this._pathLen;\n      displayedLength = percent * pathTotalLen;\n\n      if (!displayedLength) {\n        return;\n      }\n    }\n\n    lo: for (var i = 0; i < len;) {\n      var cmd = d[i++];\n      var isFirst = i === 1;\n\n      if (isFirst) {\n        xi = d[i];\n        yi = d[i + 1];\n        x0 = xi;\n        y0 = yi;\n      }\n\n      if (cmd !== CMD.L && pendingPtDist > 0) {\n        ctx.lineTo(pendingPtX, pendingPtY);\n        pendingPtDist = 0;\n      }\n\n      switch (cmd) {\n        case CMD.M:\n          x0 = xi = d[i++];\n          y0 = yi = d[i++];\n          ctx.moveTo(xi, yi);\n          break;\n\n        case CMD.L:\n          {\n            x = d[i++];\n            y = d[i++];\n            var dx = mathAbs(x - xi);\n            var dy = mathAbs(y - yi);\n\n            if (dx > ux || dy > uy) {\n              if (drawPart) {\n                var l = pathSegLen[segCount++];\n\n                if (accumLength + l > displayedLength) {\n                  var t = (displayedLength - accumLength) / l;\n                  ctx.lineTo(xi * (1 - t) + x * t, yi * (1 - t) + y * t);\n                  break lo;\n                }\n\n                accumLength += l;\n              }\n\n              ctx.lineTo(x, y);\n              xi = x;\n              yi = y;\n              pendingPtDist = 0;\n            } else {\n              var d2 = dx * dx + dy * dy;\n\n              if (d2 > pendingPtDist) {\n                pendingPtX = x;\n                pendingPtY = y;\n                pendingPtDist = d2;\n              }\n            }\n\n            break;\n          }\n\n        case CMD.C:\n          {\n            var x1 = d[i++];\n            var y1 = d[i++];\n            var x2 = d[i++];\n            var y2 = d[i++];\n            var x3 = d[i++];\n            var y3 = d[i++];\n\n            if (drawPart) {\n              var l = pathSegLen[segCount++];\n\n              if (accumLength + l > displayedLength) {\n                var t = (displayedLength - accumLength) / l;\n                cubicSubdivide(xi, x1, x2, x3, t, tmpOutX);\n                cubicSubdivide(yi, y1, y2, y3, t, tmpOutY);\n                ctx.bezierCurveTo(tmpOutX[1], tmpOutY[1], tmpOutX[2], tmpOutY[2], tmpOutX[3], tmpOutY[3]);\n                break lo;\n              }\n\n              accumLength += l;\n            }\n\n            ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n            xi = x3;\n            yi = y3;\n            break;\n          }\n\n        case CMD.Q:\n          {\n            var x1 = d[i++];\n            var y1 = d[i++];\n            var x2 = d[i++];\n            var y2 = d[i++];\n\n            if (drawPart) {\n              var l = pathSegLen[segCount++];\n\n              if (accumLength + l > displayedLength) {\n                var t = (displayedLength - accumLength) / l;\n                quadraticSubdivide(xi, x1, x2, t, tmpOutX);\n                quadraticSubdivide(yi, y1, y2, t, tmpOutY);\n                ctx.quadraticCurveTo(tmpOutX[1], tmpOutY[1], tmpOutX[2], tmpOutY[2]);\n                break lo;\n              }\n\n              accumLength += l;\n            }\n\n            ctx.quadraticCurveTo(x1, y1, x2, y2);\n            xi = x2;\n            yi = y2;\n            break;\n          }\n\n        case CMD.A:\n          var cx = d[i++];\n          var cy = d[i++];\n          var rx = d[i++];\n          var ry = d[i++];\n          var startAngle = d[i++];\n          var delta = d[i++];\n          var psi = d[i++];\n          var anticlockwise = !d[i++];\n          var r = rx > ry ? rx : ry;\n          var isEllipse = mathAbs(rx - ry) > 1e-3;\n          var endAngle = startAngle + delta;\n          var breakBuild = false;\n\n          if (drawPart) {\n            var l = pathSegLen[segCount++];\n\n            if (accumLength + l > displayedLength) {\n              endAngle = startAngle + delta * (displayedLength - accumLength) / l;\n              breakBuild = true;\n            }\n\n            accumLength += l;\n          }\n\n          if (isEllipse && ctx.ellipse) {\n            ctx.ellipse(cx, cy, rx, ry, psi, startAngle, endAngle, anticlockwise);\n          } else {\n            ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);\n          }\n\n          if (breakBuild) {\n            break lo;\n          }\n\n          if (isFirst) {\n            x0 = mathCos(startAngle) * rx + cx;\n            y0 = mathSin(startAngle) * ry + cy;\n          }\n\n          xi = mathCos(endAngle) * rx + cx;\n          yi = mathSin(endAngle) * ry + cy;\n          break;\n\n        case CMD.R:\n          x0 = xi = d[i];\n          y0 = yi = d[i + 1];\n          x = d[i++];\n          y = d[i++];\n          var width = d[i++];\n          var height = d[i++];\n\n          if (drawPart) {\n            var l = pathSegLen[segCount++];\n\n            if (accumLength + l > displayedLength) {\n              var d_1 = displayedLength - accumLength;\n              ctx.moveTo(x, y);\n              ctx.lineTo(x + mathMin(d_1, width), y);\n              d_1 -= width;\n\n              if (d_1 > 0) {\n                ctx.lineTo(x + width, y + mathMin(d_1, height));\n              }\n\n              d_1 -= height;\n\n              if (d_1 > 0) {\n                ctx.lineTo(x + mathMax(width - d_1, 0), y + height);\n              }\n\n              d_1 -= width;\n\n              if (d_1 > 0) {\n                ctx.lineTo(x, y + mathMax(height - d_1, 0));\n              }\n\n              break lo;\n            }\n\n            accumLength += l;\n          }\n\n          ctx.rect(x, y, width, height);\n          break;\n\n        case CMD.Z:\n          if (drawPart) {\n            var l = pathSegLen[segCount++];\n\n            if (accumLength + l > displayedLength) {\n              var t = (displayedLength - accumLength) / l;\n              ctx.lineTo(xi * (1 - t) + x0 * t, yi * (1 - t) + y0 * t);\n              break lo;\n            }\n\n            accumLength += l;\n          }\n\n          ctx.closePath();\n          xi = x0;\n          yi = y0;\n      }\n    }\n  };\n\n  PathProxy.prototype.clone = function () {\n    var newProxy = new PathProxy();\n    var data = this.data;\n    newProxy.data = data.slice ? data.slice() : Array.prototype.slice.call(data);\n    newProxy._len = this._len;\n    return newProxy;\n  };\n\n  PathProxy.CMD = CMD;\n\n  PathProxy.initDefaultProps = function () {\n    var proto = PathProxy.prototype;\n    proto._saveData = true;\n    proto._needsDash = false;\n    proto._dashOffset = 0;\n    proto._dashIdx = 0;\n    proto._dashSum = 0;\n    proto._ux = 0;\n    proto._uy = 0;\n    proto._pendingPtDist = 0;\n    proto._version = 0;\n  }();\n\n  return PathProxy;\n}();\n\nexport default PathProxy;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/zrender/lib/core/PathProxy.js"],"names":["vec2","BoundingRect","devicePixelRatio","dpr","fromLine","fromCubic","fromQuadratic","fromArc","cubicAt","cubicLength","cubicSubdivide","quadraticLength","quadraticSubdivide","CMD","M","L","C","Q","A","Z","R","tmpOutX","tmpOutY","min","max","min2","max2","mathMin","Math","mathMax","mathCos","cos","mathSin","sin","mathSqrt","sqrt","mathAbs","abs","PI","PI2","hasTypedArray","Float32Array","tmpAngles","modPI2","radian","n","round","normalizeArcAngles","angles","anticlockwise","newStartAngle","delta","newEndAngle","PathProxy","notSaveData","_xi","_yi","_x0","_y0","_len","_saveData","data","prototype","increaseVersion","_version","getVersion","setScale","sx","sy","segmentIgnoreThreshold","_ux","_uy","setDPR","setContext","ctx","_ctx","getContext","beginPath","reset","_lineDash","_dashOffset","_pathSegLen","_pathLen","moveTo","x","y","_drawPendingPt","addData","lineTo","dx","dy","exceedUnit","_needsDash","_dashedLineTo","_pendingPtDist","d2","_pendingPtX","_pendingPtY","bezierCurveTo","x1","y1","x2","y2","x3","y3","_dashedBezierTo","quadraticCurveTo","_dashedQuadraticTo","arc","cx","cy","r","startAngle","endAngle","arcTo","radius","rect","w","h","closePath","x0","y0","fill","toStatic","stroke","setLineDash","lineDash","Array","_dashIdx","lineDashSum","i","length","_dashSum","setLineDashOffset","offset","len","setData","appendPath","path","appendSize","appendPathData","k","cmd","a","b","c","d","e","f","g","arguments","_expandData","newData","dashSum","dist","nDash","dash","idx","bezierLen","t","tmpLen","getBoundingRect","Number","MAX_VALUE","xi","yi","isFirst","rx","ry","width","height","_calculateLength","ux","uy","pathSegLen","pathTotalLen","segCount","l","rebuildPath","percent","drawPart","accumLength","displayedLength","pendingPtDist","pendingPtX","pendingPtY","lo","psi","isEllipse","breakBuild","ellipse","d_1","clone","newProxy","slice","call","initDefaultProps","proto"],"mappings":"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","sourcesContent":["import * as vec2 from './vector';\nimport BoundingRect from './BoundingRect';\nimport { devicePixelRatio as dpr } from '../config';\nimport { fromLine, fromCubic, fromQuadratic, fromArc } from './bbox';\nimport { cubicAt, cubicLength, cubicSubdivide, quadraticLength, quadraticSubdivide } from './curve';\nvar CMD = {\n    M: 1,\n    L: 2,\n    C: 3,\n    Q: 4,\n    A: 5,\n    Z: 6,\n    R: 7\n};\nvar tmpOutX = [];\nvar tmpOutY = [];\nvar min = [];\nvar max = [];\nvar min2 = [];\nvar max2 = [];\nvar mathMin = Math.min;\nvar mathMax = Math.max;\nvar mathCos = Math.cos;\nvar mathSin = Math.sin;\nvar mathSqrt = Math.sqrt;\nvar mathAbs = Math.abs;\nvar PI = Math.PI;\nvar PI2 = PI * 2;\nvar hasTypedArray = typeof Float32Array !== 'undefined';\nvar tmpAngles = [];\nfunction modPI2(radian) {\n    var n = Math.round(radian / PI * 1e8) / 1e8;\n    return (n % 2) * PI;\n}\nexport function normalizeArcAngles(angles, anticlockwise) {\n    var newStartAngle = modPI2(angles[0]);\n    if (newStartAngle < 0) {\n        newStartAngle += PI2;\n    }\n    var delta = newStartAngle - angles[0];\n    var newEndAngle = angles[1];\n    newEndAngle += delta;\n    if (!anticlockwise && newEndAngle - newStartAngle >= PI2) {\n        newEndAngle = newStartAngle + PI2;\n    }\n    else if (anticlockwise && newStartAngle - newEndAngle >= PI2) {\n        newEndAngle = newStartAngle - PI2;\n    }\n    else if (!anticlockwise && newStartAngle > newEndAngle) {\n        newEndAngle = newStartAngle + (PI2 - modPI2(newStartAngle - newEndAngle));\n    }\n    else if (anticlockwise && newStartAngle < newEndAngle) {\n        newEndAngle = newStartAngle - (PI2 - modPI2(newEndAngle - newStartAngle));\n    }\n    angles[0] = newStartAngle;\n    angles[1] = newEndAngle;\n}\nvar PathProxy = (function () {\n    function PathProxy(notSaveData) {\n        this.dpr = 1;\n        this._xi = 0;\n        this._yi = 0;\n        this._x0 = 0;\n        this._y0 = 0;\n        this._len = 0;\n        if (notSaveData) {\n            this._saveData = false;\n        }\n        if (this._saveData) {\n            this.data = [];\n        }\n    }\n    PathProxy.prototype.increaseVersion = function () {\n        this._version++;\n    };\n    PathProxy.prototype.getVersion = function () {\n        return this._version;\n    };\n    PathProxy.prototype.setScale = function (sx, sy, segmentIgnoreThreshold) {\n        segmentIgnoreThreshold = segmentIgnoreThreshold || 0;\n        if (segmentIgnoreThreshold > 0) {\n            this._ux = mathAbs(segmentIgnoreThreshold / dpr / sx) || 0;\n            this._uy = mathAbs(segmentIgnoreThreshold / dpr / sy) || 0;\n        }\n    };\n    PathProxy.prototype.setDPR = function (dpr) {\n        this.dpr = dpr;\n    };\n    PathProxy.prototype.setContext = function (ctx) {\n        this._ctx = ctx;\n    };\n    PathProxy.prototype.getContext = function () {\n        return this._ctx;\n    };\n    PathProxy.prototype.beginPath = function () {\n        this._ctx && this._ctx.beginPath();\n        this.reset();\n        return this;\n    };\n    PathProxy.prototype.reset = function () {\n        if (this._saveData) {\n            this._len = 0;\n        }\n        if (this._lineDash) {\n            this._lineDash = null;\n            this._dashOffset = 0;\n        }\n        if (this._pathSegLen) {\n            this._pathSegLen = null;\n            this._pathLen = 0;\n        }\n        this._version++;\n    };\n    PathProxy.prototype.moveTo = function (x, y) {\n        this._drawPendingPt();\n        this.addData(CMD.M, x, y);\n        this._ctx && this._ctx.moveTo(x, y);\n        this._x0 = x;\n        this._y0 = y;\n        this._xi = x;\n        this._yi = y;\n        return this;\n    };\n    PathProxy.prototype.lineTo = function (x, y) {\n        var dx = mathAbs(x - this._xi);\n        var dy = mathAbs(y - this._yi);\n        var exceedUnit = dx > this._ux || dy > this._uy;\n        this.addData(CMD.L, x, y);\n        if (this._ctx && exceedUnit) {\n            this._needsDash ? this._dashedLineTo(x, y)\n                : this._ctx.lineTo(x, y);\n        }\n        if (exceedUnit) {\n            this._xi = x;\n            this._yi = y;\n            this._pendingPtDist = 0;\n        }\n        else {\n            var d2 = dx * dx + dy * dy;\n            if (d2 > this._pendingPtDist) {\n                this._pendingPtX = x;\n                this._pendingPtY = y;\n                this._pendingPtDist = d2;\n            }\n        }\n        return this;\n    };\n    PathProxy.prototype.bezierCurveTo = function (x1, y1, x2, y2, x3, y3) {\n        this._drawPendingPt();\n        this.addData(CMD.C, x1, y1, x2, y2, x3, y3);\n        if (this._ctx) {\n            this._needsDash ? this._dashedBezierTo(x1, y1, x2, y2, x3, y3)\n                : this._ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n        }\n        this._xi = x3;\n        this._yi = y3;\n        return this;\n    };\n    PathProxy.prototype.quadraticCurveTo = function (x1, y1, x2, y2) {\n        this._drawPendingPt();\n        this.addData(CMD.Q, x1, y1, x2, y2);\n        if (this._ctx) {\n            this._needsDash ? this._dashedQuadraticTo(x1, y1, x2, y2)\n                : this._ctx.quadraticCurveTo(x1, y1, x2, y2);\n        }\n        this._xi = x2;\n        this._yi = y2;\n        return this;\n    };\n    PathProxy.prototype.arc = function (cx, cy, r, startAngle, endAngle, anticlockwise) {\n        this._drawPendingPt();\n        tmpAngles[0] = startAngle;\n        tmpAngles[1] = endAngle;\n        normalizeArcAngles(tmpAngles, anticlockwise);\n        startAngle = tmpAngles[0];\n        endAngle = tmpAngles[1];\n        var delta = endAngle - startAngle;\n        this.addData(CMD.A, cx, cy, r, r, startAngle, delta, 0, anticlockwise ? 0 : 1);\n        this._ctx && this._ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);\n        this._xi = mathCos(endAngle) * r + cx;\n        this._yi = mathSin(endAngle) * r + cy;\n        return this;\n    };\n    PathProxy.prototype.arcTo = function (x1, y1, x2, y2, radius) {\n        this._drawPendingPt();\n        if (this._ctx) {\n            this._ctx.arcTo(x1, y1, x2, y2, radius);\n        }\n        return this;\n    };\n    PathProxy.prototype.rect = function (x, y, w, h) {\n        this._drawPendingPt();\n        this._ctx && this._ctx.rect(x, y, w, h);\n        this.addData(CMD.R, x, y, w, h);\n        return this;\n    };\n    PathProxy.prototype.closePath = function () {\n        this._drawPendingPt();\n        this.addData(CMD.Z);\n        var ctx = this._ctx;\n        var x0 = this._x0;\n        var y0 = this._y0;\n        if (ctx) {\n            this._needsDash && this._dashedLineTo(x0, y0);\n            ctx.closePath();\n        }\n        this._xi = x0;\n        this._yi = y0;\n        return this;\n    };\n    PathProxy.prototype.fill = function (ctx) {\n        ctx && ctx.fill();\n        this.toStatic();\n    };\n    PathProxy.prototype.stroke = function (ctx) {\n        ctx && ctx.stroke();\n        this.toStatic();\n    };\n    PathProxy.prototype.setLineDash = function (lineDash) {\n        if (lineDash instanceof Array) {\n            this._lineDash = lineDash;\n            this._dashIdx = 0;\n            var lineDashSum = 0;\n            for (var i = 0; i < lineDash.length; i++) {\n                lineDashSum += lineDash[i];\n            }\n            this._dashSum = lineDashSum;\n            this._needsDash = true;\n        }\n        else {\n            this._lineDash = null;\n            this._needsDash = false;\n        }\n        return this;\n    };\n    PathProxy.prototype.setLineDashOffset = function (offset) {\n        this._dashOffset = offset;\n        return this;\n    };\n    PathProxy.prototype.len = function () {\n        return this._len;\n    };\n    PathProxy.prototype.setData = function (data) {\n        var len = data.length;\n        if (!(this.data && this.data.length === len) && hasTypedArray) {\n            this.data = new Float32Array(len);\n        }\n        for (var i = 0; i < len; i++) {\n            this.data[i] = data[i];\n        }\n        this._len = len;\n    };\n    PathProxy.prototype.appendPath = function (path) {\n        if (!(path instanceof Array)) {\n            path = [path];\n        }\n        var len = path.length;\n        var appendSize = 0;\n        var offset = this._len;\n        for (var i = 0; i < len; i++) {\n            appendSize += path[i].len();\n        }\n        if (hasTypedArray && (this.data instanceof Float32Array)) {\n            this.data = new Float32Array(offset + appendSize);\n        }\n        for (var i = 0; i < len; i++) {\n            var appendPathData = path[i].data;\n            for (var k = 0; k < appendPathData.length; k++) {\n                this.data[offset++] = appendPathData[k];\n            }\n        }\n        this._len = offset;\n    };\n    PathProxy.prototype.addData = function (cmd, a, b, c, d, e, f, g, h) {\n        if (!this._saveData) {\n            return;\n        }\n        var data = this.data;\n        if (this._len + arguments.length > data.length) {\n            this._expandData();\n            data = this.data;\n        }\n        for (var i = 0; i < arguments.length; i++) {\n            data[this._len++] = arguments[i];\n        }\n    };\n    PathProxy.prototype._drawPendingPt = function () {\n        if (this._pendingPtDist > 0) {\n            this._ctx && this._ctx.lineTo(this._pendingPtX, this._pendingPtY);\n            this._pendingPtDist = 0;\n        }\n    };\n    PathProxy.prototype._expandData = function () {\n        if (!(this.data instanceof Array)) {\n            var newData = [];\n            for (var i = 0; i < this._len; i++) {\n                newData[i] = this.data[i];\n            }\n            this.data = newData;\n        }\n    };\n    PathProxy.prototype._dashedLineTo = function (x1, y1) {\n        var dashSum = this._dashSum;\n        var lineDash = this._lineDash;\n        var ctx = this._ctx;\n        var offset = this._dashOffset;\n        var x0 = this._xi;\n        var y0 = this._yi;\n        var dx = x1 - x0;\n        var dy = y1 - y0;\n        var dist = mathSqrt(dx * dx + dy * dy);\n        var x = x0;\n        var y = y0;\n        var nDash = lineDash.length;\n        var dash;\n        var idx;\n        dx /= dist;\n        dy /= dist;\n        if (offset < 0) {\n            offset = dashSum + offset;\n        }\n        offset %= dashSum;\n        x -= offset * dx;\n        y -= offset * dy;\n        while ((dx > 0 && x <= x1) || (dx < 0 && x >= x1)\n            || (dx === 0 && ((dy > 0 && y <= y1) || (dy < 0 && y >= y1)))) {\n            idx = this._dashIdx;\n            dash = lineDash[idx];\n            x += dx * dash;\n            y += dy * dash;\n            this._dashIdx = (idx + 1) % nDash;\n            if ((dx > 0 && x < x0) || (dx < 0 && x > x0) || (dy > 0 && y < y0) || (dy < 0 && y > y0)) {\n                continue;\n            }\n            ctx[idx % 2 ? 'moveTo' : 'lineTo'](dx >= 0 ? mathMin(x, x1) : mathMax(x, x1), dy >= 0 ? mathMin(y, y1) : mathMax(y, y1));\n        }\n        dx = x - x1;\n        dy = y - y1;\n        this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n    };\n    PathProxy.prototype._dashedBezierTo = function (x1, y1, x2, y2, x3, y3) {\n        var ctx = this._ctx;\n        var dashSum = this._dashSum;\n        var offset = this._dashOffset;\n        var lineDash = this._lineDash;\n        var x0 = this._xi;\n        var y0 = this._yi;\n        var bezierLen = 0;\n        var idx = this._dashIdx;\n        var nDash = lineDash.length;\n        var t;\n        var dx;\n        var dy;\n        var x;\n        var y;\n        var tmpLen = 0;\n        if (offset < 0) {\n            offset = dashSum + offset;\n        }\n        offset %= dashSum;\n        for (t = 0; t < 1; t += 0.1) {\n            dx = cubicAt(x0, x1, x2, x3, t + 0.1)\n                - cubicAt(x0, x1, x2, x3, t);\n            dy = cubicAt(y0, y1, y2, y3, t + 0.1)\n                - cubicAt(y0, y1, y2, y3, t);\n            bezierLen += mathSqrt(dx * dx + dy * dy);\n        }\n        for (; idx < nDash; idx++) {\n            tmpLen += lineDash[idx];\n            if (tmpLen > offset) {\n                break;\n            }\n        }\n        t = (tmpLen - offset) / bezierLen;\n        while (t <= 1) {\n            x = cubicAt(x0, x1, x2, x3, t);\n            y = cubicAt(y0, y1, y2, y3, t);\n            idx % 2 ? ctx.moveTo(x, y)\n                : ctx.lineTo(x, y);\n            t += lineDash[idx] / bezierLen;\n            idx = (idx + 1) % nDash;\n        }\n        (idx % 2 !== 0) && ctx.lineTo(x3, y3);\n        dx = x3 - x;\n        dy = y3 - y;\n        this._dashOffset = -mathSqrt(dx * dx + dy * dy);\n    };\n    PathProxy.prototype._dashedQuadraticTo = function (x1, y1, x2, y2) {\n        var x3 = x2;\n        var y3 = y2;\n        x2 = (x2 + 2 * x1) / 3;\n        y2 = (y2 + 2 * y1) / 3;\n        x1 = (this._xi + 2 * x1) / 3;\n        y1 = (this._yi + 2 * y1) / 3;\n        this._dashedBezierTo(x1, y1, x2, y2, x3, y3);\n    };\n    PathProxy.prototype.toStatic = function () {\n        if (!this._saveData) {\n            return;\n        }\n        this._drawPendingPt();\n        var data = this.data;\n        if (data instanceof Array) {\n            data.length = this._len;\n            if (hasTypedArray && this._len > 11) {\n                this.data = new Float32Array(data);\n            }\n        }\n    };\n    PathProxy.prototype.getBoundingRect = function () {\n        min[0] = min[1] = min2[0] = min2[1] = Number.MAX_VALUE;\n        max[0] = max[1] = max2[0] = max2[1] = -Number.MAX_VALUE;\n        var data = this.data;\n        var xi = 0;\n        var yi = 0;\n        var x0 = 0;\n        var y0 = 0;\n        var i;\n        for (i = 0; i < this._len;) {\n            var cmd = data[i++];\n            var isFirst = i === 1;\n            if (isFirst) {\n                xi = data[i];\n                yi = data[i + 1];\n                x0 = xi;\n                y0 = yi;\n            }\n            switch (cmd) {\n                case CMD.M:\n                    xi = x0 = data[i++];\n                    yi = y0 = data[i++];\n                    min2[0] = x0;\n                    min2[1] = y0;\n                    max2[0] = x0;\n                    max2[1] = y0;\n                    break;\n                case CMD.L:\n                    fromLine(xi, yi, data[i], data[i + 1], min2, max2);\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.C:\n                    fromCubic(xi, yi, data[i++], data[i++], data[i++], data[i++], data[i], data[i + 1], min2, max2);\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.Q:\n                    fromQuadratic(xi, yi, data[i++], data[i++], data[i], data[i + 1], min2, max2);\n                    xi = data[i++];\n                    yi = data[i++];\n                    break;\n                case CMD.A:\n                    var cx = data[i++];\n                    var cy = data[i++];\n                    var rx = data[i++];\n                    var ry = data[i++];\n                    var startAngle = data[i++];\n                    var endAngle = data[i++] + startAngle;\n                    i += 1;\n                    var anticlockwise = !data[i++];\n                    if (isFirst) {\n                        x0 = mathCos(startAngle) * rx + cx;\n                        y0 = mathSin(startAngle) * ry + cy;\n                    }\n                    fromArc(cx, cy, rx, ry, startAngle, endAngle, anticlockwise, min2, max2);\n                    xi = mathCos(endAngle) * rx + cx;\n                    yi = mathSin(endAngle) * ry + cy;\n                    break;\n                case CMD.R:\n                    x0 = xi = data[i++];\n                    y0 = yi = data[i++];\n                    var width = data[i++];\n                    var height = data[i++];\n                    fromLine(x0, y0, x0 + width, y0 + height, min2, max2);\n                    break;\n                case CMD.Z:\n                    xi = x0;\n                    yi = y0;\n                    break;\n            }\n            vec2.min(min, min, min2);\n            vec2.max(max, max, max2);\n        }\n        if (i === 0) {\n            min[0] = min[1] = max[0] = max[1] = 0;\n        }\n        return new BoundingRect(min[0], min[1], max[0] - min[0], max[1] - min[1]);\n    };\n    PathProxy.prototype._calculateLength = function () {\n        var data = this.data;\n        var len = this._len;\n        var ux = this._ux;\n        var uy = this._uy;\n        var xi = 0;\n        var yi = 0;\n        var x0 = 0;\n        var y0 = 0;\n        if (!this._pathSegLen) {\n            this._pathSegLen = [];\n        }\n        var pathSegLen = this._pathSegLen;\n        var pathTotalLen = 0;\n        var segCount = 0;\n        for (var i = 0; i < len;) {\n            var cmd = data[i++];\n            var isFirst = i === 1;\n            if (isFirst) {\n                xi = data[i];\n                yi = data[i + 1];\n                x0 = xi;\n                y0 = yi;\n            }\n            var l = -1;\n            switch (cmd) {\n                case CMD.M:\n                    xi = x0 = data[i++];\n                    yi = y0 = data[i++];\n                    break;\n                case CMD.L: {\n                    var x2 = data[i++];\n                    var y2 = data[i++];\n                    var dx = x2 - xi;\n                    var dy = y2 - yi;\n                    if (mathAbs(dx) > ux || mathAbs(dy) > uy || i === len - 1) {\n                        l = Math.sqrt(dx * dx + dy * dy);\n                        xi = x2;\n                        yi = y2;\n                    }\n                    break;\n                }\n                case CMD.C: {\n                    var x1 = data[i++];\n                    var y1 = data[i++];\n                    var x2 = data[i++];\n                    var y2 = data[i++];\n                    var x3 = data[i++];\n                    var y3 = data[i++];\n                    l = cubicLength(xi, yi, x1, y1, x2, y2, x3, y3, 10);\n                    xi = x3;\n                    yi = y3;\n                    break;\n                }\n                case CMD.Q: {\n                    var x1 = data[i++];\n                    var y1 = data[i++];\n                    var x2 = data[i++];\n                    var y2 = data[i++];\n                    l = quadraticLength(xi, yi, x1, y1, x2, y2, 10);\n                    xi = x2;\n                    yi = y2;\n                    break;\n                }\n                case CMD.A:\n                    var cx = data[i++];\n                    var cy = data[i++];\n                    var rx = data[i++];\n                    var ry = data[i++];\n                    var startAngle = data[i++];\n                    var delta = data[i++];\n                    var endAngle = delta + startAngle;\n                    i += 1;\n                    var anticlockwise = !data[i++];\n                    if (isFirst) {\n                        x0 = mathCos(startAngle) * rx + cx;\n                        y0 = mathSin(startAngle) * ry + cy;\n                    }\n                    l = mathMax(rx, ry) * mathMin(PI2, Math.abs(delta));\n                    xi = mathCos(endAngle) * rx + cx;\n                    yi = mathSin(endAngle) * ry + cy;\n                    break;\n                case CMD.R: {\n                    x0 = xi = data[i++];\n                    y0 = yi = data[i++];\n                    var width = data[i++];\n                    var height = data[i++];\n                    l = width * 2 + height * 2;\n                    break;\n                }\n                case CMD.Z: {\n                    var dx = x0 - xi;\n                    var dy = y0 - yi;\n                    l = Math.sqrt(dx * dx + dy * dy);\n                    xi = x0;\n                    yi = y0;\n                    break;\n                }\n            }\n            if (l >= 0) {\n                pathSegLen[segCount++] = l;\n                pathTotalLen += l;\n            }\n        }\n        this._pathLen = pathTotalLen;\n        return pathTotalLen;\n    };\n    PathProxy.prototype.rebuildPath = function (ctx, percent) {\n        var d = this.data;\n        var ux = this._ux;\n        var uy = this._uy;\n        var len = this._len;\n        var x0;\n        var y0;\n        var xi;\n        var yi;\n        var x;\n        var y;\n        var drawPart = percent < 1;\n        var pathSegLen;\n        var pathTotalLen;\n        var accumLength = 0;\n        var segCount = 0;\n        var displayedLength;\n        var pendingPtDist = 0;\n        var pendingPtX;\n        var pendingPtY;\n        if (drawPart) {\n            if (!this._pathSegLen) {\n                this._calculateLength();\n            }\n            pathSegLen = this._pathSegLen;\n            pathTotalLen = this._pathLen;\n            displayedLength = percent * pathTotalLen;\n            if (!displayedLength) {\n                return;\n            }\n        }\n        lo: for (var i = 0; i < len;) {\n            var cmd = d[i++];\n            var isFirst = i === 1;\n            if (isFirst) {\n                xi = d[i];\n                yi = d[i + 1];\n                x0 = xi;\n                y0 = yi;\n            }\n            if (cmd !== CMD.L && pendingPtDist > 0) {\n                ctx.lineTo(pendingPtX, pendingPtY);\n                pendingPtDist = 0;\n            }\n            switch (cmd) {\n                case CMD.M:\n                    x0 = xi = d[i++];\n                    y0 = yi = d[i++];\n                    ctx.moveTo(xi, yi);\n                    break;\n                case CMD.L: {\n                    x = d[i++];\n                    y = d[i++];\n                    var dx = mathAbs(x - xi);\n                    var dy = mathAbs(y - yi);\n                    if (dx > ux || dy > uy) {\n                        if (drawPart) {\n                            var l = pathSegLen[segCount++];\n                            if (accumLength + l > displayedLength) {\n                                var t = (displayedLength - accumLength) / l;\n                                ctx.lineTo(xi * (1 - t) + x * t, yi * (1 - t) + y * t);\n                                break lo;\n                            }\n                            accumLength += l;\n                        }\n                        ctx.lineTo(x, y);\n                        xi = x;\n                        yi = y;\n                        pendingPtDist = 0;\n                    }\n                    else {\n                        var d2 = dx * dx + dy * dy;\n                        if (d2 > pendingPtDist) {\n                            pendingPtX = x;\n                            pendingPtY = y;\n                            pendingPtDist = d2;\n                        }\n                    }\n                    break;\n                }\n                case CMD.C: {\n                    var x1 = d[i++];\n                    var y1 = d[i++];\n                    var x2 = d[i++];\n                    var y2 = d[i++];\n                    var x3 = d[i++];\n                    var y3 = d[i++];\n                    if (drawPart) {\n                        var l = pathSegLen[segCount++];\n                        if (accumLength + l > displayedLength) {\n                            var t = (displayedLength - accumLength) / l;\n                            cubicSubdivide(xi, x1, x2, x3, t, tmpOutX);\n                            cubicSubdivide(yi, y1, y2, y3, t, tmpOutY);\n                            ctx.bezierCurveTo(tmpOutX[1], tmpOutY[1], tmpOutX[2], tmpOutY[2], tmpOutX[3], tmpOutY[3]);\n                            break lo;\n                        }\n                        accumLength += l;\n                    }\n                    ctx.bezierCurveTo(x1, y1, x2, y2, x3, y3);\n                    xi = x3;\n                    yi = y3;\n                    break;\n                }\n                case CMD.Q: {\n                    var x1 = d[i++];\n                    var y1 = d[i++];\n                    var x2 = d[i++];\n                    var y2 = d[i++];\n                    if (drawPart) {\n                        var l = pathSegLen[segCount++];\n                        if (accumLength + l > displayedLength) {\n                            var t = (displayedLength - accumLength) / l;\n                            quadraticSubdivide(xi, x1, x2, t, tmpOutX);\n                            quadraticSubdivide(yi, y1, y2, t, tmpOutY);\n                            ctx.quadraticCurveTo(tmpOutX[1], tmpOutY[1], tmpOutX[2], tmpOutY[2]);\n                            break lo;\n                        }\n                        accumLength += l;\n                    }\n                    ctx.quadraticCurveTo(x1, y1, x2, y2);\n                    xi = x2;\n                    yi = y2;\n                    break;\n                }\n                case CMD.A:\n                    var cx = d[i++];\n                    var cy = d[i++];\n                    var rx = d[i++];\n                    var ry = d[i++];\n                    var startAngle = d[i++];\n                    var delta = d[i++];\n                    var psi = d[i++];\n                    var anticlockwise = !d[i++];\n                    var r = (rx > ry) ? rx : ry;\n                    var isEllipse = mathAbs(rx - ry) > 1e-3;\n                    var endAngle = startAngle + delta;\n                    var breakBuild = false;\n                    if (drawPart) {\n                        var l = pathSegLen[segCount++];\n                        if (accumLength + l > displayedLength) {\n                            endAngle = startAngle + delta * (displayedLength - accumLength) / l;\n                            breakBuild = true;\n                        }\n                        accumLength += l;\n                    }\n                    if (isEllipse && ctx.ellipse) {\n                        ctx.ellipse(cx, cy, rx, ry, psi, startAngle, endAngle, anticlockwise);\n                    }\n                    else {\n                        ctx.arc(cx, cy, r, startAngle, endAngle, anticlockwise);\n                    }\n                    if (breakBuild) {\n                        break lo;\n                    }\n                    if (isFirst) {\n                        x0 = mathCos(startAngle) * rx + cx;\n                        y0 = mathSin(startAngle) * ry + cy;\n                    }\n                    xi = mathCos(endAngle) * rx + cx;\n                    yi = mathSin(endAngle) * ry + cy;\n                    break;\n                case CMD.R:\n                    x0 = xi = d[i];\n                    y0 = yi = d[i + 1];\n                    x = d[i++];\n                    y = d[i++];\n                    var width = d[i++];\n                    var height = d[i++];\n                    if (drawPart) {\n                        var l = pathSegLen[segCount++];\n                        if (accumLength + l > displayedLength) {\n                            var d_1 = displayedLength - accumLength;\n                            ctx.moveTo(x, y);\n                            ctx.lineTo(x + mathMin(d_1, width), y);\n                            d_1 -= width;\n                            if (d_1 > 0) {\n                                ctx.lineTo(x + width, y + mathMin(d_1, height));\n                            }\n                            d_1 -= height;\n                            if (d_1 > 0) {\n                                ctx.lineTo(x + mathMax(width - d_1, 0), y + height);\n                            }\n                            d_1 -= width;\n                            if (d_1 > 0) {\n                                ctx.lineTo(x, y + mathMax(height - d_1, 0));\n                            }\n                            break lo;\n                        }\n                        accumLength += l;\n                    }\n                    ctx.rect(x, y, width, height);\n                    break;\n                case CMD.Z:\n                    if (drawPart) {\n                        var l = pathSegLen[segCount++];\n                        if (accumLength + l > displayedLength) {\n                            var t = (displayedLength - accumLength) / l;\n                            ctx.lineTo(xi * (1 - t) + x0 * t, yi * (1 - t) + y0 * t);\n                            break lo;\n                        }\n                        accumLength += l;\n                    }\n                    ctx.closePath();\n                    xi = x0;\n                    yi = y0;\n            }\n        }\n    };\n    PathProxy.prototype.clone = function () {\n        var newProxy = new PathProxy();\n        var data = this.data;\n        newProxy.data = data.slice ? data.slice()\n            : Array.prototype.slice.call(data);\n        newProxy._len = this._len;\n        return newProxy;\n    };\n    PathProxy.CMD = CMD;\n    PathProxy.initDefaultProps = (function () {\n        var proto = PathProxy.prototype;\n        proto._saveData = true;\n        proto._needsDash = false;\n        proto._dashOffset = 0;\n        proto._dashIdx = 0;\n        proto._dashSum = 0;\n        proto._ux = 0;\n        proto._uy = 0;\n        proto._pendingPtDist = 0;\n        proto._version = 0;\n    })();\n    return PathProxy;\n}());\nexport default PathProxy;\n"]},"metadata":{},"sourceType":"module"}