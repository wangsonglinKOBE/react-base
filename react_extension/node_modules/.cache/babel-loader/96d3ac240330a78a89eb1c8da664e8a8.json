{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport createSeriesData from '../helper/createSeriesData';\nimport SeriesModel from '../../model/Series';\nimport { createSymbol } from '../../util/symbol';\nimport { Group } from '../../util/graphic';\n\nvar LineSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(LineSeriesModel, _super);\n\n  function LineSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = LineSeriesModel.type;\n    _this.hasSymbolVisual = true;\n    return _this;\n  }\n\n  LineSeriesModel.prototype.getInitialData = function (option) {\n    if (process.env.NODE_ENV !== 'production') {\n      var coordSys = option.coordinateSystem;\n\n      if (coordSys !== 'polar' && coordSys !== 'cartesian2d') {\n        throw new Error('Line not support coordinateSystem besides cartesian and polar');\n      }\n    }\n\n    return createSeriesData(null, this, {\n      useEncodeDefaulter: true\n    });\n  };\n\n  LineSeriesModel.prototype.getLegendIcon = function (opt) {\n    var group = new Group();\n    var line = createSymbol('line', 0, opt.itemHeight / 2, opt.itemWidth, 0, opt.lineStyle.stroke, false);\n    group.add(line);\n    line.setStyle(opt.lineStyle);\n    var visualType = this.getData().getVisual('symbol');\n    var visualRotate = this.getData().getVisual('symbolRotate');\n    var symbolType = visualType === 'none' ? 'circle' : visualType; // Symbol size is 80% when there is a line\n\n    var size = opt.itemHeight * 0.8;\n    var symbol = createSymbol(symbolType, (opt.itemWidth - size) / 2, (opt.itemHeight - size) / 2, size, size, opt.itemStyle.fill);\n    group.add(symbol);\n    symbol.setStyle(opt.itemStyle);\n    var symbolRotate = opt.iconRotate === 'inherit' ? visualRotate : opt.iconRotate || 0;\n    symbol.rotation = symbolRotate * Math.PI / 180;\n    symbol.setOrigin([opt.itemWidth / 2, opt.itemHeight / 2]);\n\n    if (symbolType.indexOf('empty') > -1) {\n      symbol.style.stroke = symbol.style.fill;\n      symbol.style.fill = '#fff';\n      symbol.style.lineWidth = 2;\n    }\n\n    return group;\n  };\n\n  LineSeriesModel.type = 'series.line';\n  LineSeriesModel.dependencies = ['grid', 'polar'];\n  LineSeriesModel.defaultOption = {\n    zlevel: 0,\n    z: 3,\n    coordinateSystem: 'cartesian2d',\n    legendHoverLink: true,\n    clip: true,\n    label: {\n      position: 'top'\n    },\n    // itemStyle: {\n    // },\n    endLabel: {\n      show: false,\n      valueAnimation: true,\n      distance: 8\n    },\n    lineStyle: {\n      width: 2,\n      type: 'solid'\n    },\n    emphasis: {\n      scale: true,\n      lineStyle: {\n        width: 'bolder'\n      }\n    },\n    // areaStyle: {\n    // origin of areaStyle. Valid values:\n    // `'auto'/null/undefined`: from axisLine to data\n    // `'start'`: from min to data\n    // `'end'`: from data to max\n    // origin: 'auto'\n    // },\n    // false, 'start', 'end', 'middle'\n    step: false,\n    // Disabled if step is true\n    smooth: false,\n    smoothMonotone: null,\n    symbol: 'emptyCircle',\n    symbolSize: 4,\n    symbolRotate: null,\n    showSymbol: true,\n    // `false`: follow the label interval strategy.\n    // `true`: show all symbols.\n    // `'auto'`: If possible, show all symbols, otherwise\n    //           follow the label interval strategy.\n    showAllSymbol: 'auto',\n    // Whether to connect break point.\n    connectNulls: false,\n    // Sampling for large data. Can be: 'average', 'max', 'min', 'sum', 'lttb'.\n    sampling: 'none',\n    animationEasing: 'linear',\n    // Disable progressive\n    progressive: 0,\n    hoverLayerThreshold: Infinity,\n    universalTransition: {\n      divideShape: 'clone'\n    }\n  };\n  return LineSeriesModel;\n}(SeriesModel);\n\nexport default LineSeriesModel;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/chart/line/LineSeries.js"],"names":["__extends","createSeriesData","SeriesModel","createSymbol","Group","LineSeriesModel","_super","_this","apply","arguments","type","hasSymbolVisual","prototype","getInitialData","option","process","env","NODE_ENV","coordSys","coordinateSystem","Error","useEncodeDefaulter","getLegendIcon","opt","group","line","itemHeight","itemWidth","lineStyle","stroke","add","setStyle","visualType","getData","getVisual","visualRotate","symbolType","size","symbol","itemStyle","fill","symbolRotate","iconRotate","rotation","Math","PI","setOrigin","indexOf","style","lineWidth","dependencies","defaultOption","zlevel","z","legendHoverLink","clip","label","position","endLabel","show","valueAnimation","distance","width","emphasis","scale","step","smooth","smoothMonotone","symbolSize","showSymbol","showAllSymbol","connectNulls","sampling","animationEasing","progressive","hoverLayerThreshold","Infinity","universalTransition","divideShape"],"mappings":"AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASA,SAAT,QAA0B,OAA1B;AACA,OAAOC,gBAAP,MAA6B,4BAA7B;AACA,OAAOC,WAAP,MAAwB,oBAAxB;AACA,SAASC,YAAT,QAA6B,mBAA7B;AACA,SAASC,KAAT,QAAsB,oBAAtB;;AAEA,IAAIC,eAAe;AACnB;AACA,UAAUC,MAAV,EAAkB;AAChBN,EAAAA,SAAS,CAACK,eAAD,EAAkBC,MAAlB,CAAT;;AAEA,WAASD,eAAT,GAA2B;AACzB,QAAIE,KAAK,GAAGD,MAAM,KAAK,IAAX,IAAmBA,MAAM,CAACE,KAAP,CAAa,IAAb,EAAmBC,SAAnB,CAAnB,IAAoD,IAAhE;;AAEAF,IAAAA,KAAK,CAACG,IAAN,GAAaL,eAAe,CAACK,IAA7B;AACAH,IAAAA,KAAK,CAACI,eAAN,GAAwB,IAAxB;AACA,WAAOJ,KAAP;AACD;;AAEDF,EAAAA,eAAe,CAACO,SAAhB,CAA0BC,cAA1B,GAA2C,UAAUC,MAAV,EAAkB;AAC3D,QAAIC,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,YAA7B,EAA2C;AACzC,UAAIC,QAAQ,GAAGJ,MAAM,CAACK,gBAAtB;;AAEA,UAAID,QAAQ,KAAK,OAAb,IAAwBA,QAAQ,KAAK,aAAzC,EAAwD;AACtD,cAAM,IAAIE,KAAJ,CAAU,+DAAV,CAAN;AACD;AACF;;AAED,WAAOnB,gBAAgB,CAAC,IAAD,EAAO,IAAP,EAAa;AAClCoB,MAAAA,kBAAkB,EAAE;AADc,KAAb,CAAvB;AAGD,GAZD;;AAcAhB,EAAAA,eAAe,CAACO,SAAhB,CAA0BU,aAA1B,GAA0C,UAAUC,GAAV,EAAe;AACvD,QAAIC,KAAK,GAAG,IAAIpB,KAAJ,EAAZ;AACA,QAAIqB,IAAI,GAAGtB,YAAY,CAAC,MAAD,EAAS,CAAT,EAAYoB,GAAG,CAACG,UAAJ,GAAiB,CAA7B,EAAgCH,GAAG,CAACI,SAApC,EAA+C,CAA/C,EAAkDJ,GAAG,CAACK,SAAJ,CAAcC,MAAhE,EAAwE,KAAxE,CAAvB;AACAL,IAAAA,KAAK,CAACM,GAAN,CAAUL,IAAV;AACAA,IAAAA,IAAI,CAACM,QAAL,CAAcR,GAAG,CAACK,SAAlB;AACA,QAAII,UAAU,GAAG,KAAKC,OAAL,GAAeC,SAAf,CAAyB,QAAzB,CAAjB;AACA,QAAIC,YAAY,GAAG,KAAKF,OAAL,GAAeC,SAAf,CAAyB,cAAzB,CAAnB;AACA,QAAIE,UAAU,GAAGJ,UAAU,KAAK,MAAf,GAAwB,QAAxB,GAAmCA,UAApD,CAPuD,CAOS;;AAEhE,QAAIK,IAAI,GAAGd,GAAG,CAACG,UAAJ,GAAiB,GAA5B;AACA,QAAIY,MAAM,GAAGnC,YAAY,CAACiC,UAAD,EAAa,CAACb,GAAG,CAACI,SAAJ,GAAgBU,IAAjB,IAAyB,CAAtC,EAAyC,CAACd,GAAG,CAACG,UAAJ,GAAiBW,IAAlB,IAA0B,CAAnE,EAAsEA,IAAtE,EAA4EA,IAA5E,EAAkFd,GAAG,CAACgB,SAAJ,CAAcC,IAAhG,CAAzB;AACAhB,IAAAA,KAAK,CAACM,GAAN,CAAUQ,MAAV;AACAA,IAAAA,MAAM,CAACP,QAAP,CAAgBR,GAAG,CAACgB,SAApB;AACA,QAAIE,YAAY,GAAGlB,GAAG,CAACmB,UAAJ,KAAmB,SAAnB,GAA+BP,YAA/B,GAA8CZ,GAAG,CAACmB,UAAJ,IAAkB,CAAnF;AACAJ,IAAAA,MAAM,CAACK,QAAP,GAAkBF,YAAY,GAAGG,IAAI,CAACC,EAApB,GAAyB,GAA3C;AACAP,IAAAA,MAAM,CAACQ,SAAP,CAAiB,CAACvB,GAAG,CAACI,SAAJ,GAAgB,CAAjB,EAAoBJ,GAAG,CAACG,UAAJ,GAAiB,CAArC,CAAjB;;AAEA,QAAIU,UAAU,CAACW,OAAX,CAAmB,OAAnB,IAA8B,CAAC,CAAnC,EAAsC;AACpCT,MAAAA,MAAM,CAACU,KAAP,CAAanB,MAAb,GAAsBS,MAAM,CAACU,KAAP,CAAaR,IAAnC;AACAF,MAAAA,MAAM,CAACU,KAAP,CAAaR,IAAb,GAAoB,MAApB;AACAF,MAAAA,MAAM,CAACU,KAAP,CAAaC,SAAb,GAAyB,CAAzB;AACD;;AAED,WAAOzB,KAAP;AACD,GAxBD;;AA0BAnB,EAAAA,eAAe,CAACK,IAAhB,GAAuB,aAAvB;AACAL,EAAAA,eAAe,CAAC6C,YAAhB,GAA+B,CAAC,MAAD,EAAS,OAAT,CAA/B;AACA7C,EAAAA,eAAe,CAAC8C,aAAhB,GAAgC;AAC9BC,IAAAA,MAAM,EAAE,CADsB;AAE9BC,IAAAA,CAAC,EAAE,CAF2B;AAG9BlC,IAAAA,gBAAgB,EAAE,aAHY;AAI9BmC,IAAAA,eAAe,EAAE,IAJa;AAK9BC,IAAAA,IAAI,EAAE,IALwB;AAM9BC,IAAAA,KAAK,EAAE;AACLC,MAAAA,QAAQ,EAAE;AADL,KANuB;AAS9B;AACA;AACAC,IAAAA,QAAQ,EAAE;AACRC,MAAAA,IAAI,EAAE,KADE;AAERC,MAAAA,cAAc,EAAE,IAFR;AAGRC,MAAAA,QAAQ,EAAE;AAHF,KAXoB;AAgB9BjC,IAAAA,SAAS,EAAE;AACTkC,MAAAA,KAAK,EAAE,CADE;AAETpD,MAAAA,IAAI,EAAE;AAFG,KAhBmB;AAoB9BqD,IAAAA,QAAQ,EAAE;AACRC,MAAAA,KAAK,EAAE,IADC;AAERpC,MAAAA,SAAS,EAAE;AACTkC,QAAAA,KAAK,EAAE;AADE;AAFH,KApBoB;AA0B9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAG,IAAAA,IAAI,EAAE,KAlCwB;AAmC9B;AACAC,IAAAA,MAAM,EAAE,KApCsB;AAqC9BC,IAAAA,cAAc,EAAE,IArCc;AAsC9B7B,IAAAA,MAAM,EAAE,aAtCsB;AAuC9B8B,IAAAA,UAAU,EAAE,CAvCkB;AAwC9B3B,IAAAA,YAAY,EAAE,IAxCgB;AAyC9B4B,IAAAA,UAAU,EAAE,IAzCkB;AA0C9B;AACA;AACA;AACA;AACAC,IAAAA,aAAa,EAAE,MA9Ce;AA+C9B;AACAC,IAAAA,YAAY,EAAE,KAhDgB;AAiD9B;AACAC,IAAAA,QAAQ,EAAE,MAlDoB;AAmD9BC,IAAAA,eAAe,EAAE,QAnDa;AAoD9B;AACAC,IAAAA,WAAW,EAAE,CArDiB;AAsD9BC,IAAAA,mBAAmB,EAAEC,QAtDS;AAuD9BC,IAAAA,mBAAmB,EAAE;AACnBC,MAAAA,WAAW,EAAE;AADM;AAvDS,GAAhC;AA2DA,SAAOzE,eAAP;AACD,CAjHD,CAiHEH,WAjHF,CAFA;;AAqHA,eAAeG,eAAf","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport createSeriesData from '../helper/createSeriesData';\nimport SeriesModel from '../../model/Series';\nimport { createSymbol } from '../../util/symbol';\nimport { Group } from '../../util/graphic';\n\nvar LineSeriesModel =\n/** @class */\nfunction (_super) {\n  __extends(LineSeriesModel, _super);\n\n  function LineSeriesModel() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = LineSeriesModel.type;\n    _this.hasSymbolVisual = true;\n    return _this;\n  }\n\n  LineSeriesModel.prototype.getInitialData = function (option) {\n    if (process.env.NODE_ENV !== 'production') {\n      var coordSys = option.coordinateSystem;\n\n      if (coordSys !== 'polar' && coordSys !== 'cartesian2d') {\n        throw new Error('Line not support coordinateSystem besides cartesian and polar');\n      }\n    }\n\n    return createSeriesData(null, this, {\n      useEncodeDefaulter: true\n    });\n  };\n\n  LineSeriesModel.prototype.getLegendIcon = function (opt) {\n    var group = new Group();\n    var line = createSymbol('line', 0, opt.itemHeight / 2, opt.itemWidth, 0, opt.lineStyle.stroke, false);\n    group.add(line);\n    line.setStyle(opt.lineStyle);\n    var visualType = this.getData().getVisual('symbol');\n    var visualRotate = this.getData().getVisual('symbolRotate');\n    var symbolType = visualType === 'none' ? 'circle' : visualType; // Symbol size is 80% when there is a line\n\n    var size = opt.itemHeight * 0.8;\n    var symbol = createSymbol(symbolType, (opt.itemWidth - size) / 2, (opt.itemHeight - size) / 2, size, size, opt.itemStyle.fill);\n    group.add(symbol);\n    symbol.setStyle(opt.itemStyle);\n    var symbolRotate = opt.iconRotate === 'inherit' ? visualRotate : opt.iconRotate || 0;\n    symbol.rotation = symbolRotate * Math.PI / 180;\n    symbol.setOrigin([opt.itemWidth / 2, opt.itemHeight / 2]);\n\n    if (symbolType.indexOf('empty') > -1) {\n      symbol.style.stroke = symbol.style.fill;\n      symbol.style.fill = '#fff';\n      symbol.style.lineWidth = 2;\n    }\n\n    return group;\n  };\n\n  LineSeriesModel.type = 'series.line';\n  LineSeriesModel.dependencies = ['grid', 'polar'];\n  LineSeriesModel.defaultOption = {\n    zlevel: 0,\n    z: 3,\n    coordinateSystem: 'cartesian2d',\n    legendHoverLink: true,\n    clip: true,\n    label: {\n      position: 'top'\n    },\n    // itemStyle: {\n    // },\n    endLabel: {\n      show: false,\n      valueAnimation: true,\n      distance: 8\n    },\n    lineStyle: {\n      width: 2,\n      type: 'solid'\n    },\n    emphasis: {\n      scale: true,\n      lineStyle: {\n        width: 'bolder'\n      }\n    },\n    // areaStyle: {\n    // origin of areaStyle. Valid values:\n    // `'auto'/null/undefined`: from axisLine to data\n    // `'start'`: from min to data\n    // `'end'`: from data to max\n    // origin: 'auto'\n    // },\n    // false, 'start', 'end', 'middle'\n    step: false,\n    // Disabled if step is true\n    smooth: false,\n    smoothMonotone: null,\n    symbol: 'emptyCircle',\n    symbolSize: 4,\n    symbolRotate: null,\n    showSymbol: true,\n    // `false`: follow the label interval strategy.\n    // `true`: show all symbols.\n    // `'auto'`: If possible, show all symbols, otherwise\n    //           follow the label interval strategy.\n    showAllSymbol: 'auto',\n    // Whether to connect break point.\n    connectNulls: false,\n    // Sampling for large data. Can be: 'average', 'max', 'min', 'sum', 'lttb'.\n    sampling: 'none',\n    animationEasing: 'linear',\n    // Disable progressive\n    progressive: 0,\n    hoverLayerThreshold: Infinity,\n    universalTransition: {\n      divideShape: 'clone'\n    }\n  };\n  return LineSeriesModel;\n}(SeriesModel);\n\nexport default LineSeriesModel;"]},"metadata":{},"sourceType":"module"}