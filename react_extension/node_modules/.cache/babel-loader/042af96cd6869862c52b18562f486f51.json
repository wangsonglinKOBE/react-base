{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as numberUtil from '../../util/number';\nimport { isDimensionStacked } from '../../data/helper/dataStackHelper';\nimport { indexOf, curry, clone, isArray } from 'zrender/lib/core/util';\n\nfunction hasXOrY(item) {\n  return !(isNaN(parseFloat(item.x)) && isNaN(parseFloat(item.y)));\n}\n\nfunction hasXAndY(item) {\n  return !isNaN(parseFloat(item.x)) && !isNaN(parseFloat(item.y));\n}\n\nfunction markerTypeCalculatorWithExtent(markerType, data, otherDataDim, targetDataDim, otherCoordIndex, targetCoordIndex) {\n  var coordArr = [];\n  var stacked = isDimensionStacked(data, targetDataDim\n  /*, otherDataDim*/\n  );\n  var calcDataDim = stacked ? data.getCalculationInfo('stackResultDimension') : targetDataDim;\n  var value = numCalculate(data, calcDataDim, markerType);\n  var dataIndex = data.indicesOfNearest(calcDataDim, value)[0];\n  coordArr[otherCoordIndex] = data.get(otherDataDim, dataIndex);\n  coordArr[targetCoordIndex] = data.get(calcDataDim, dataIndex);\n  var coordArrValue = data.get(targetDataDim, dataIndex); // Make it simple, do not visit all stacked value to count precision.\n\n  var precision = numberUtil.getPrecision(data.get(targetDataDim, dataIndex));\n  precision = Math.min(precision, 20);\n\n  if (precision >= 0) {\n    coordArr[targetCoordIndex] = +coordArr[targetCoordIndex].toFixed(precision);\n  }\n\n  return [coordArr, coordArrValue];\n} // TODO Specified percent\n\n\nvar markerTypeCalculator = {\n  min: curry(markerTypeCalculatorWithExtent, 'min'),\n  max: curry(markerTypeCalculatorWithExtent, 'max'),\n  average: curry(markerTypeCalculatorWithExtent, 'average'),\n  median: curry(markerTypeCalculatorWithExtent, 'median')\n};\n/**\n * Transform markPoint data item to format used in List by do the following\n * 1. Calculate statistic like `max`, `min`, `average`\n * 2. Convert `item.xAxis`, `item.yAxis` to `item.coord` array\n */\n\nexport function dataTransform(seriesModel, item) {\n  var data = seriesModel.getData();\n  var coordSys = seriesModel.coordinateSystem; // 1. If not specify the position with pixel directly\n  // 2. If `coord` is not a data array. Which uses `xAxis`,\n  // `yAxis` to specify the coord on each dimension\n  // parseFloat first because item.x and item.y can be percent string like '20%'\n\n  if (item && !hasXAndY(item) && !isArray(item.coord) && coordSys) {\n    var dims = coordSys.dimensions;\n    var axisInfo = getAxisInfo(item, data, coordSys, seriesModel); // Clone the option\n    // Transform the properties xAxis, yAxis, radiusAxis, angleAxis, geoCoord to value\n\n    item = clone(item);\n\n    if (item.type && markerTypeCalculator[item.type] && axisInfo.baseAxis && axisInfo.valueAxis) {\n      var otherCoordIndex = indexOf(dims, axisInfo.baseAxis.dim);\n      var targetCoordIndex = indexOf(dims, axisInfo.valueAxis.dim);\n      var coordInfo = markerTypeCalculator[item.type](data, axisInfo.baseDataDim, axisInfo.valueDataDim, otherCoordIndex, targetCoordIndex);\n      item.coord = coordInfo[0]; // Force to use the value of calculated value.\n      // let item use the value without stack.\n\n      item.value = coordInfo[1];\n    } else {\n      // FIXME Only has one of xAxis and yAxis.\n      var coord = [item.xAxis != null ? item.xAxis : item.radiusAxis, item.yAxis != null ? item.yAxis : item.angleAxis]; // Each coord support max, min, average\n\n      for (var i = 0; i < 2; i++) {\n        if (markerTypeCalculator[coord[i]]) {\n          coord[i] = numCalculate(data, data.mapDimension(dims[i]), coord[i]);\n        }\n      }\n\n      item.coord = coord;\n    }\n  }\n\n  return item;\n}\nexport function getAxisInfo(item, data, coordSys, seriesModel) {\n  var ret = {};\n\n  if (item.valueIndex != null || item.valueDim != null) {\n    ret.valueDataDim = item.valueIndex != null ? data.getDimension(item.valueIndex) : item.valueDim;\n    ret.valueAxis = coordSys.getAxis(dataDimToCoordDim(seriesModel, ret.valueDataDim));\n    ret.baseAxis = coordSys.getOtherAxis(ret.valueAxis);\n    ret.baseDataDim = data.mapDimension(ret.baseAxis.dim);\n  } else {\n    ret.baseAxis = seriesModel.getBaseAxis();\n    ret.valueAxis = coordSys.getOtherAxis(ret.baseAxis);\n    ret.baseDataDim = data.mapDimension(ret.baseAxis.dim);\n    ret.valueDataDim = data.mapDimension(ret.valueAxis.dim);\n  }\n\n  return ret;\n}\n\nfunction dataDimToCoordDim(seriesModel, dataDim) {\n  var dimItem = seriesModel.getData().getDimensionInfo(dataDim);\n  return dimItem && dimItem.coordDim;\n}\n/**\n * Filter data which is out of coordinateSystem range\n * [dataFilter description]\n */\n\n\nexport function dataFilter( // Currently only polar and cartesian has containData.\ncoordSys, item) {\n  // Alwalys return true if there is no coordSys\n  return coordSys && coordSys.containData && item.coord && !hasXOrY(item) ? coordSys.containData(item.coord) : true;\n}\nexport function dimValueGetter(item, dimName, dataIndex, dimIndex) {\n  // x, y, radius, angle\n  if (dimIndex < 2) {\n    return item.coord && item.coord[dimIndex];\n  }\n\n  return item.value;\n}\nexport function numCalculate(data, valueDataDim, type) {\n  if (type === 'average') {\n    var sum_1 = 0;\n    var count_1 = 0;\n    data.each(valueDataDim, function (val, idx) {\n      if (!isNaN(val)) {\n        sum_1 += val;\n        count_1++;\n      }\n    });\n    return sum_1 / count_1;\n  } else if (type === 'median') {\n    return data.getMedian(valueDataDim);\n  } else {\n    // max & min\n    return data.getDataExtent(valueDataDim)[type === 'max' ? 1 : 0];\n  }\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/component/marker/markerHelper.js"],"names":["numberUtil","isDimensionStacked","indexOf","curry","clone","isArray","hasXOrY","item","isNaN","parseFloat","x","y","hasXAndY","markerTypeCalculatorWithExtent","markerType","data","otherDataDim","targetDataDim","otherCoordIndex","targetCoordIndex","coordArr","stacked","calcDataDim","getCalculationInfo","value","numCalculate","dataIndex","indicesOfNearest","get","coordArrValue","precision","getPrecision","Math","min","toFixed","markerTypeCalculator","max","average","median","dataTransform","seriesModel","getData","coordSys","coordinateSystem","coord","dims","dimensions","axisInfo","getAxisInfo","type","baseAxis","valueAxis","dim","coordInfo","baseDataDim","valueDataDim","xAxis","radiusAxis","yAxis","angleAxis","i","mapDimension","ret","valueIndex","valueDim","getDimension","getAxis","dataDimToCoordDim","getOtherAxis","getBaseAxis","dataDim","dimItem","getDimensionInfo","coordDim","dataFilter","containData","dimValueGetter","dimName","dimIndex","sum_1","count_1","each","val","idx","getMedian","getDataExtent"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as numberUtil from '../../util/number';\nimport { isDimensionStacked } from '../../data/helper/dataStackHelper';\nimport { indexOf, curry, clone, isArray } from 'zrender/lib/core/util';\n\nfunction hasXOrY(item) {\n  return !(isNaN(parseFloat(item.x)) && isNaN(parseFloat(item.y)));\n}\n\nfunction hasXAndY(item) {\n  return !isNaN(parseFloat(item.x)) && !isNaN(parseFloat(item.y));\n}\n\nfunction markerTypeCalculatorWithExtent(markerType, data, otherDataDim, targetDataDim, otherCoordIndex, targetCoordIndex) {\n  var coordArr = [];\n  var stacked = isDimensionStacked(data, targetDataDim\n  /*, otherDataDim*/\n  );\n  var calcDataDim = stacked ? data.getCalculationInfo('stackResultDimension') : targetDataDim;\n  var value = numCalculate(data, calcDataDim, markerType);\n  var dataIndex = data.indicesOfNearest(calcDataDim, value)[0];\n  coordArr[otherCoordIndex] = data.get(otherDataDim, dataIndex);\n  coordArr[targetCoordIndex] = data.get(calcDataDim, dataIndex);\n  var coordArrValue = data.get(targetDataDim, dataIndex); // Make it simple, do not visit all stacked value to count precision.\n\n  var precision = numberUtil.getPrecision(data.get(targetDataDim, dataIndex));\n  precision = Math.min(precision, 20);\n\n  if (precision >= 0) {\n    coordArr[targetCoordIndex] = +coordArr[targetCoordIndex].toFixed(precision);\n  }\n\n  return [coordArr, coordArrValue];\n} // TODO Specified percent\n\n\nvar markerTypeCalculator = {\n  min: curry(markerTypeCalculatorWithExtent, 'min'),\n  max: curry(markerTypeCalculatorWithExtent, 'max'),\n  average: curry(markerTypeCalculatorWithExtent, 'average'),\n  median: curry(markerTypeCalculatorWithExtent, 'median')\n};\n/**\n * Transform markPoint data item to format used in List by do the following\n * 1. Calculate statistic like `max`, `min`, `average`\n * 2. Convert `item.xAxis`, `item.yAxis` to `item.coord` array\n */\n\nexport function dataTransform(seriesModel, item) {\n  var data = seriesModel.getData();\n  var coordSys = seriesModel.coordinateSystem; // 1. If not specify the position with pixel directly\n  // 2. If `coord` is not a data array. Which uses `xAxis`,\n  // `yAxis` to specify the coord on each dimension\n  // parseFloat first because item.x and item.y can be percent string like '20%'\n\n  if (item && !hasXAndY(item) && !isArray(item.coord) && coordSys) {\n    var dims = coordSys.dimensions;\n    var axisInfo = getAxisInfo(item, data, coordSys, seriesModel); // Clone the option\n    // Transform the properties xAxis, yAxis, radiusAxis, angleAxis, geoCoord to value\n\n    item = clone(item);\n\n    if (item.type && markerTypeCalculator[item.type] && axisInfo.baseAxis && axisInfo.valueAxis) {\n      var otherCoordIndex = indexOf(dims, axisInfo.baseAxis.dim);\n      var targetCoordIndex = indexOf(dims, axisInfo.valueAxis.dim);\n      var coordInfo = markerTypeCalculator[item.type](data, axisInfo.baseDataDim, axisInfo.valueDataDim, otherCoordIndex, targetCoordIndex);\n      item.coord = coordInfo[0]; // Force to use the value of calculated value.\n      // let item use the value without stack.\n\n      item.value = coordInfo[1];\n    } else {\n      // FIXME Only has one of xAxis and yAxis.\n      var coord = [item.xAxis != null ? item.xAxis : item.radiusAxis, item.yAxis != null ? item.yAxis : item.angleAxis]; // Each coord support max, min, average\n\n      for (var i = 0; i < 2; i++) {\n        if (markerTypeCalculator[coord[i]]) {\n          coord[i] = numCalculate(data, data.mapDimension(dims[i]), coord[i]);\n        }\n      }\n\n      item.coord = coord;\n    }\n  }\n\n  return item;\n}\nexport function getAxisInfo(item, data, coordSys, seriesModel) {\n  var ret = {};\n\n  if (item.valueIndex != null || item.valueDim != null) {\n    ret.valueDataDim = item.valueIndex != null ? data.getDimension(item.valueIndex) : item.valueDim;\n    ret.valueAxis = coordSys.getAxis(dataDimToCoordDim(seriesModel, ret.valueDataDim));\n    ret.baseAxis = coordSys.getOtherAxis(ret.valueAxis);\n    ret.baseDataDim = data.mapDimension(ret.baseAxis.dim);\n  } else {\n    ret.baseAxis = seriesModel.getBaseAxis();\n    ret.valueAxis = coordSys.getOtherAxis(ret.baseAxis);\n    ret.baseDataDim = data.mapDimension(ret.baseAxis.dim);\n    ret.valueDataDim = data.mapDimension(ret.valueAxis.dim);\n  }\n\n  return ret;\n}\n\nfunction dataDimToCoordDim(seriesModel, dataDim) {\n  var dimItem = seriesModel.getData().getDimensionInfo(dataDim);\n  return dimItem && dimItem.coordDim;\n}\n/**\n * Filter data which is out of coordinateSystem range\n * [dataFilter description]\n */\n\n\nexport function dataFilter( // Currently only polar and cartesian has containData.\ncoordSys, item) {\n  // Alwalys return true if there is no coordSys\n  return coordSys && coordSys.containData && item.coord && !hasXOrY(item) ? coordSys.containData(item.coord) : true;\n}\nexport function dimValueGetter(item, dimName, dataIndex, dimIndex) {\n  // x, y, radius, angle\n  if (dimIndex < 2) {\n    return item.coord && item.coord[dimIndex];\n  }\n\n  return item.value;\n}\nexport function numCalculate(data, valueDataDim, type) {\n  if (type === 'average') {\n    var sum_1 = 0;\n    var count_1 = 0;\n    data.each(valueDataDim, function (val, idx) {\n      if (!isNaN(val)) {\n        sum_1 += val;\n        count_1++;\n      }\n    });\n    return sum_1 / count_1;\n  } else if (type === 'median') {\n    return data.getMedian(valueDataDim);\n  } else {\n    // max & min\n    return data.getDataExtent(valueDataDim)[type === 'max' ? 1 : 0];\n  }\n}"]},"metadata":{},"sourceType":"module"}