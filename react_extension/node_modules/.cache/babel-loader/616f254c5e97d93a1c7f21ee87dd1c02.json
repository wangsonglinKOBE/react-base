{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { map } from 'zrender/lib/core/util';\nimport createRenderPlanner from '../chart/helper/createRenderPlanner';\nimport { isDimensionStacked } from '../data/helper/dataStackHelper';\nimport { createFloat32Array } from '../util/vendor';\nexport default function pointsLayout(seriesType, forceStoreInTypedArray) {\n  return {\n    seriesType: seriesType,\n    plan: createRenderPlanner(),\n    reset: function (seriesModel) {\n      var data = seriesModel.getData();\n      var coordSys = seriesModel.coordinateSystem;\n      var pipelineContext = seriesModel.pipelineContext;\n      var useTypedArray = forceStoreInTypedArray || pipelineContext.large;\n\n      if (!coordSys) {\n        return;\n      }\n\n      var dims = map(coordSys.dimensions, function (dim) {\n        return data.mapDimension(dim);\n      }).slice(0, 2);\n      var dimLen = dims.length;\n      var stackResultDim = data.getCalculationInfo('stackResultDimension');\n\n      if (isDimensionStacked(data, dims[0]\n      /*, dims[1]*/\n      )) {\n        dims[0] = stackResultDim;\n      }\n\n      if (isDimensionStacked(data, dims[1]\n      /*, dims[0]*/\n      )) {\n        dims[1] = stackResultDim;\n      }\n\n      var store = data.getStore();\n      var dimIdx0 = data.getDimensionIndex(dims[0]);\n      var dimIdx1 = data.getDimensionIndex(dims[1]);\n      return dimLen && {\n        progress: function (params, data) {\n          var segCount = params.end - params.start;\n          var points = useTypedArray && createFloat32Array(segCount * dimLen);\n          var tmpIn = [];\n          var tmpOut = [];\n\n          for (var i = params.start, offset = 0; i < params.end; i++) {\n            var point = void 0;\n\n            if (dimLen === 1) {\n              var x = store.get(dimIdx0, i); // NOTE: Make sure the second parameter is null to use default strategy.\n\n              point = coordSys.dataToPoint(x, null, tmpOut);\n            } else {\n              tmpIn[0] = store.get(dimIdx0, i);\n              tmpIn[1] = store.get(dimIdx1, i); // Let coordinate system to handle the NaN data.\n\n              point = coordSys.dataToPoint(tmpIn, null, tmpOut);\n            }\n\n            if (useTypedArray) {\n              points[offset++] = point[0];\n              points[offset++] = point[1];\n            } else {\n              data.setItemLayout(i, point.slice());\n            }\n          }\n\n          useTypedArray && data.setLayout('points', points);\n        }\n      };\n    }\n  };\n}\n;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/layout/points.js"],"names":["map","createRenderPlanner","isDimensionStacked","createFloat32Array","pointsLayout","seriesType","forceStoreInTypedArray","plan","reset","seriesModel","data","getData","coordSys","coordinateSystem","pipelineContext","useTypedArray","large","dims","dimensions","dim","mapDimension","slice","dimLen","length","stackResultDim","getCalculationInfo","store","getStore","dimIdx0","getDimensionIndex","dimIdx1","progress","params","segCount","end","start","points","tmpIn","tmpOut","i","offset","point","x","get","dataToPoint","setItemLayout","setLayout"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { map } from 'zrender/lib/core/util';\nimport createRenderPlanner from '../chart/helper/createRenderPlanner';\nimport { isDimensionStacked } from '../data/helper/dataStackHelper';\nimport { createFloat32Array } from '../util/vendor';\nexport default function pointsLayout(seriesType, forceStoreInTypedArray) {\n  return {\n    seriesType: seriesType,\n    plan: createRenderPlanner(),\n    reset: function (seriesModel) {\n      var data = seriesModel.getData();\n      var coordSys = seriesModel.coordinateSystem;\n      var pipelineContext = seriesModel.pipelineContext;\n      var useTypedArray = forceStoreInTypedArray || pipelineContext.large;\n\n      if (!coordSys) {\n        return;\n      }\n\n      var dims = map(coordSys.dimensions, function (dim) {\n        return data.mapDimension(dim);\n      }).slice(0, 2);\n      var dimLen = dims.length;\n      var stackResultDim = data.getCalculationInfo('stackResultDimension');\n\n      if (isDimensionStacked(data, dims[0]\n      /*, dims[1]*/\n      )) {\n        dims[0] = stackResultDim;\n      }\n\n      if (isDimensionStacked(data, dims[1]\n      /*, dims[0]*/\n      )) {\n        dims[1] = stackResultDim;\n      }\n\n      var store = data.getStore();\n      var dimIdx0 = data.getDimensionIndex(dims[0]);\n      var dimIdx1 = data.getDimensionIndex(dims[1]);\n      return dimLen && {\n        progress: function (params, data) {\n          var segCount = params.end - params.start;\n          var points = useTypedArray && createFloat32Array(segCount * dimLen);\n          var tmpIn = [];\n          var tmpOut = [];\n\n          for (var i = params.start, offset = 0; i < params.end; i++) {\n            var point = void 0;\n\n            if (dimLen === 1) {\n              var x = store.get(dimIdx0, i); // NOTE: Make sure the second parameter is null to use default strategy.\n\n              point = coordSys.dataToPoint(x, null, tmpOut);\n            } else {\n              tmpIn[0] = store.get(dimIdx0, i);\n              tmpIn[1] = store.get(dimIdx1, i); // Let coordinate system to handle the NaN data.\n\n              point = coordSys.dataToPoint(tmpIn, null, tmpOut);\n            }\n\n            if (useTypedArray) {\n              points[offset++] = point[0];\n              points[offset++] = point[1];\n            } else {\n              data.setItemLayout(i, point.slice());\n            }\n          }\n\n          useTypedArray && data.setLayout('points', points);\n        }\n      };\n    }\n  };\n}\n;"]},"metadata":{},"sourceType":"module"}