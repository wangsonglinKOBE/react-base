{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as vec2 from 'zrender/lib/core/vector';\nimport { getSymbolSize, getNodeGlobalScale } from './graphHelper';\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { getCurvenessForEdge } from '../helper/multipleGraphEdgeHelper';\nvar PI = Math.PI;\nvar _symbolRadiansHalf = [];\n/**\n * `basedOn` can be:\n * 'value':\n *     This layout is not accurate and have same bad case. For example,\n *     if the min value is very smaller than the max value, the nodes\n *     with the min value probably overlap even though there is enough\n *     space to layout them. So we only use this approach in the as the\n *     init layout of the force layout.\n *     FIXME\n *     Probably we do not need this method any more but use\n *     `basedOn: 'symbolSize'` in force layout if\n *     delay its init operations to GraphView.\n * 'symbolSize':\n *     This approach work only if all of the symbol size calculated.\n *     That is, the progressive rendering is not applied to graph.\n *     FIXME\n *     If progressive rendering is applied to graph some day,\n *     probably we have to use `basedOn: 'value'`.\n */\n\nexport function circularLayout(seriesModel, basedOn) {\n  var coordSys = seriesModel.coordinateSystem;\n\n  if (coordSys && coordSys.type !== 'view') {\n    return;\n  }\n\n  var rect = coordSys.getBoundingRect();\n  var nodeData = seriesModel.getData();\n  var graph = nodeData.graph;\n  var cx = rect.width / 2 + rect.x;\n  var cy = rect.height / 2 + rect.y;\n  var r = Math.min(rect.width, rect.height) / 2;\n  var count = nodeData.count();\n  nodeData.setLayout({\n    cx: cx,\n    cy: cy\n  });\n\n  if (!count) {\n    return;\n  }\n\n  _layoutNodesBasedOn[basedOn](seriesModel, graph, nodeData, r, cx, cy, count);\n\n  graph.eachEdge(function (edge, index) {\n    var curveness = zrUtil.retrieve3(edge.getModel().get(['lineStyle', 'curveness']), getCurvenessForEdge(edge, seriesModel, index), 0);\n    var p1 = vec2.clone(edge.node1.getLayout());\n    var p2 = vec2.clone(edge.node2.getLayout());\n    var cp1;\n    var x12 = (p1[0] + p2[0]) / 2;\n    var y12 = (p1[1] + p2[1]) / 2;\n\n    if (+curveness) {\n      curveness *= 3;\n      cp1 = [cx * curveness + x12 * (1 - curveness), cy * curveness + y12 * (1 - curveness)];\n    }\n\n    edge.setLayout([p1, p2, cp1]);\n  });\n}\nvar _layoutNodesBasedOn = {\n  value: function (seriesModel, graph, nodeData, r, cx, cy, count) {\n    var angle = 0;\n    var sum = nodeData.getSum('value');\n    var unitAngle = Math.PI * 2 / (sum || count);\n    graph.eachNode(function (node) {\n      var value = node.getValue('value');\n      var radianHalf = unitAngle * (sum ? value : 1) / 2;\n      angle += radianHalf;\n      node.setLayout([r * Math.cos(angle) + cx, r * Math.sin(angle) + cy]);\n      angle += radianHalf;\n    });\n  },\n  symbolSize: function (seriesModel, graph, nodeData, r, cx, cy, count) {\n    var sumRadian = 0;\n    _symbolRadiansHalf.length = count;\n    var nodeScale = getNodeGlobalScale(seriesModel);\n    graph.eachNode(function (node) {\n      var symbolSize = getSymbolSize(node); // Normally this case will not happen, but we still add\n      // some the defensive code (2px is an arbitrary value).\n\n      isNaN(symbolSize) && (symbolSize = 2);\n      symbolSize < 0 && (symbolSize = 0);\n      symbolSize *= nodeScale;\n      var symbolRadianHalf = Math.asin(symbolSize / 2 / r); // when `symbolSize / 2` is bigger than `r`.\n\n      isNaN(symbolRadianHalf) && (symbolRadianHalf = PI / 2);\n      _symbolRadiansHalf[node.dataIndex] = symbolRadianHalf;\n      sumRadian += symbolRadianHalf * 2;\n    });\n    var halfRemainRadian = (2 * PI - sumRadian) / count / 2;\n    var angle = 0;\n    graph.eachNode(function (node) {\n      var radianHalf = halfRemainRadian + _symbolRadiansHalf[node.dataIndex];\n      angle += radianHalf;\n      node.setLayout([r * Math.cos(angle) + cx, r * Math.sin(angle) + cy]);\n      angle += radianHalf;\n    });\n  }\n};","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/chart/graph/circularLayoutHelper.js"],"names":["vec2","getSymbolSize","getNodeGlobalScale","zrUtil","getCurvenessForEdge","PI","Math","_symbolRadiansHalf","circularLayout","seriesModel","basedOn","coordSys","coordinateSystem","type","rect","getBoundingRect","nodeData","getData","graph","cx","width","x","cy","height","y","r","min","count","setLayout","_layoutNodesBasedOn","eachEdge","edge","index","curveness","retrieve3","getModel","get","p1","clone","node1","getLayout","p2","node2","cp1","x12","y12","value","angle","sum","getSum","unitAngle","eachNode","node","getValue","radianHalf","cos","sin","symbolSize","sumRadian","length","nodeScale","isNaN","symbolRadianHalf","asin","dataIndex","halfRemainRadian"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as vec2 from 'zrender/lib/core/vector';\nimport { getSymbolSize, getNodeGlobalScale } from './graphHelper';\nimport * as zrUtil from 'zrender/lib/core/util';\nimport { getCurvenessForEdge } from '../helper/multipleGraphEdgeHelper';\nvar PI = Math.PI;\nvar _symbolRadiansHalf = [];\n/**\n * `basedOn` can be:\n * 'value':\n *     This layout is not accurate and have same bad case. For example,\n *     if the min value is very smaller than the max value, the nodes\n *     with the min value probably overlap even though there is enough\n *     space to layout them. So we only use this approach in the as the\n *     init layout of the force layout.\n *     FIXME\n *     Probably we do not need this method any more but use\n *     `basedOn: 'symbolSize'` in force layout if\n *     delay its init operations to GraphView.\n * 'symbolSize':\n *     This approach work only if all of the symbol size calculated.\n *     That is, the progressive rendering is not applied to graph.\n *     FIXME\n *     If progressive rendering is applied to graph some day,\n *     probably we have to use `basedOn: 'value'`.\n */\n\nexport function circularLayout(seriesModel, basedOn) {\n  var coordSys = seriesModel.coordinateSystem;\n\n  if (coordSys && coordSys.type !== 'view') {\n    return;\n  }\n\n  var rect = coordSys.getBoundingRect();\n  var nodeData = seriesModel.getData();\n  var graph = nodeData.graph;\n  var cx = rect.width / 2 + rect.x;\n  var cy = rect.height / 2 + rect.y;\n  var r = Math.min(rect.width, rect.height) / 2;\n  var count = nodeData.count();\n  nodeData.setLayout({\n    cx: cx,\n    cy: cy\n  });\n\n  if (!count) {\n    return;\n  }\n\n  _layoutNodesBasedOn[basedOn](seriesModel, graph, nodeData, r, cx, cy, count);\n\n  graph.eachEdge(function (edge, index) {\n    var curveness = zrUtil.retrieve3(edge.getModel().get(['lineStyle', 'curveness']), getCurvenessForEdge(edge, seriesModel, index), 0);\n    var p1 = vec2.clone(edge.node1.getLayout());\n    var p2 = vec2.clone(edge.node2.getLayout());\n    var cp1;\n    var x12 = (p1[0] + p2[0]) / 2;\n    var y12 = (p1[1] + p2[1]) / 2;\n\n    if (+curveness) {\n      curveness *= 3;\n      cp1 = [cx * curveness + x12 * (1 - curveness), cy * curveness + y12 * (1 - curveness)];\n    }\n\n    edge.setLayout([p1, p2, cp1]);\n  });\n}\nvar _layoutNodesBasedOn = {\n  value: function (seriesModel, graph, nodeData, r, cx, cy, count) {\n    var angle = 0;\n    var sum = nodeData.getSum('value');\n    var unitAngle = Math.PI * 2 / (sum || count);\n    graph.eachNode(function (node) {\n      var value = node.getValue('value');\n      var radianHalf = unitAngle * (sum ? value : 1) / 2;\n      angle += radianHalf;\n      node.setLayout([r * Math.cos(angle) + cx, r * Math.sin(angle) + cy]);\n      angle += radianHalf;\n    });\n  },\n  symbolSize: function (seriesModel, graph, nodeData, r, cx, cy, count) {\n    var sumRadian = 0;\n    _symbolRadiansHalf.length = count;\n    var nodeScale = getNodeGlobalScale(seriesModel);\n    graph.eachNode(function (node) {\n      var symbolSize = getSymbolSize(node); // Normally this case will not happen, but we still add\n      // some the defensive code (2px is an arbitrary value).\n\n      isNaN(symbolSize) && (symbolSize = 2);\n      symbolSize < 0 && (symbolSize = 0);\n      symbolSize *= nodeScale;\n      var symbolRadianHalf = Math.asin(symbolSize / 2 / r); // when `symbolSize / 2` is bigger than `r`.\n\n      isNaN(symbolRadianHalf) && (symbolRadianHalf = PI / 2);\n      _symbolRadiansHalf[node.dataIndex] = symbolRadianHalf;\n      sumRadian += symbolRadianHalf * 2;\n    });\n    var halfRemainRadian = (2 * PI - sumRadian) / count / 2;\n    var angle = 0;\n    graph.eachNode(function (node) {\n      var radianHalf = halfRemainRadian + _symbolRadiansHalf[node.dataIndex];\n      angle += radianHalf;\n      node.setLayout([r * Math.cos(angle) + cx, r * Math.sin(angle) + cy]);\n      angle += radianHalf;\n    });\n  }\n};"]},"metadata":{},"sourceType":"module"}