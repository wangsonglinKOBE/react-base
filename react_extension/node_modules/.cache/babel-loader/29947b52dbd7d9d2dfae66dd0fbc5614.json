{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport RoamController from './RoamController';\nimport * as roamHelper from '../../component/helper/roamHelper';\nimport { onIrrelevantElement } from '../../component/helper/cursorHelper';\nimport * as graphic from '../../util/graphic';\nimport { enableHoverEmphasis, enableComponentHighDownFeatures, setDefaultStateProxy } from '../../util/states';\nimport geoSourceManager from '../../coord/geo/geoSourceManager';\nimport { getUID } from '../../util/component';\nimport { setLabelStyle, getLabelStatesModels } from '../../label/labelStyle';\nimport { getECData } from '../../util/innerStore';\nimport { createOrUpdatePatternFromDecal } from '../../util/decal';\nimport Displayable from 'zrender/lib/graphic/Displayable';\nimport { makeInner } from '../../util/model';\n/**\n * Only these tags enable use `itemStyle` if they are named in SVG.\n * Other tags like <text> <tspan> <image> might not suitable for `itemStyle`.\n * They will not be considered to be styled until some requirements come.\n */\n\nvar OPTION_STYLE_ENABLED_TAGS = ['rect', 'circle', 'line', 'ellipse', 'polygon', 'polyline', 'path'];\nvar OPTION_STYLE_ENABLED_TAG_MAP = zrUtil.createHashMap(OPTION_STYLE_ENABLED_TAGS);\nvar STATE_TRIGGER_TAG_MAP = zrUtil.createHashMap(OPTION_STYLE_ENABLED_TAGS.concat(['g']));\nvar LABEL_HOST_MAP = zrUtil.createHashMap(OPTION_STYLE_ENABLED_TAGS.concat(['g']));\nvar mapLabelRaw = makeInner();\n\nfunction getFixedItemStyle(model) {\n  var itemStyle = model.getItemStyle();\n  var areaColor = model.get('areaColor'); // If user want the color not to be changed when hover,\n  // they should both set areaColor and color to be null.\n\n  if (areaColor != null) {\n    itemStyle.fill = areaColor;\n  }\n\n  return itemStyle;\n}\n\nvar MapDraw =\n/** @class */\nfunction () {\n  function MapDraw(api) {\n    var group = new graphic.Group();\n    this.uid = getUID('ec_map_draw');\n    this._controller = new RoamController(api.getZr());\n    this._controllerHost = {\n      target: group\n    };\n    this.group = group;\n    group.add(this._regionsGroup = new graphic.Group());\n    group.add(this._svgGroup = new graphic.Group());\n  }\n\n  MapDraw.prototype.draw = function (mapOrGeoModel, ecModel, api, fromView, payload) {\n    var isGeo = mapOrGeoModel.mainType === 'geo'; // Map series has data. GEO model that controlled by map series\n    // will be assigned with map data. Other GEO model has no data.\n\n    var data = mapOrGeoModel.getData && mapOrGeoModel.getData();\n    isGeo && ecModel.eachComponent({\n      mainType: 'series',\n      subType: 'map'\n    }, function (mapSeries) {\n      if (!data && mapSeries.getHostGeoModel() === mapOrGeoModel) {\n        data = mapSeries.getData();\n      }\n    });\n    var geo = mapOrGeoModel.coordinateSystem;\n    var regionsGroup = this._regionsGroup;\n    var group = this.group;\n    var transformInfo = geo.getTransformInfo();\n    var transformInfoRaw = transformInfo.raw;\n    var transformInfoRoam = transformInfo.roam; // No animation when first draw or in action\n\n    var isFirstDraw = !regionsGroup.childAt(0) || payload;\n\n    if (isFirstDraw) {\n      group.x = transformInfoRoam.x;\n      group.y = transformInfoRoam.y;\n      group.scaleX = transformInfoRoam.scaleX;\n      group.scaleY = transformInfoRoam.scaleY;\n      group.dirty();\n    } else {\n      graphic.updateProps(group, transformInfoRoam, mapOrGeoModel);\n    }\n\n    var isVisualEncodedByVisualMap = data && data.getVisual('visualMeta') && data.getVisual('visualMeta').length > 0;\n    var viewBuildCtx = {\n      api: api,\n      geo: geo,\n      mapOrGeoModel: mapOrGeoModel,\n      data: data,\n      isVisualEncodedByVisualMap: isVisualEncodedByVisualMap,\n      isGeo: isGeo,\n      transformInfoRaw: transformInfoRaw\n    };\n\n    if (geo.resourceType === 'geoJSON') {\n      this._buildGeoJSON(viewBuildCtx);\n    } else if (geo.resourceType === 'geoSVG') {\n      this._buildSVG(viewBuildCtx);\n    }\n\n    this._updateController(mapOrGeoModel, ecModel, api);\n\n    this._updateMapSelectHandler(mapOrGeoModel, regionsGroup, api, fromView);\n  };\n\n  MapDraw.prototype._buildGeoJSON = function (viewBuildCtx) {\n    var regionsGroupByName = this._regionsGroupByName = zrUtil.createHashMap();\n    var regionsInfoByName = zrUtil.createHashMap();\n    var regionsGroup = this._regionsGroup;\n    var transformInfoRaw = viewBuildCtx.transformInfoRaw;\n    var mapOrGeoModel = viewBuildCtx.mapOrGeoModel;\n    var data = viewBuildCtx.data;\n\n    var transformPoint = function (point) {\n      return [point[0] * transformInfoRaw.scaleX + transformInfoRaw.x, point[1] * transformInfoRaw.scaleY + transformInfoRaw.y];\n    };\n\n    regionsGroup.removeAll(); // Only when the resource is GeoJSON, there is `geo.regions`.\n\n    zrUtil.each(viewBuildCtx.geo.regions, function (region) {\n      var regionName = region.name; // Consider in GeoJson properties.name may be duplicated, for example,\n      // there is multiple region named \"United Kindom\" or \"France\" (so many\n      // colonies). And it is not appropriate to merge them in geo, which\n      // will make them share the same label and bring trouble in label\n      // location calculation.\n\n      var regionGroup = regionsGroupByName.get(regionName);\n\n      var _a = regionsInfoByName.get(regionName) || {},\n          dataIdx = _a.dataIdx,\n          regionModel = _a.regionModel;\n\n      if (!regionGroup) {\n        regionGroup = regionsGroupByName.set(regionName, new graphic.Group());\n        regionsGroup.add(regionGroup);\n        dataIdx = data ? data.indexOfName(regionName) : null;\n        regionModel = viewBuildCtx.isGeo ? mapOrGeoModel.getRegionModel(regionName) : data ? data.getItemModel(dataIdx) : null;\n        regionsInfoByName.set(regionName, {\n          dataIdx: dataIdx,\n          regionModel: regionModel\n        });\n      }\n\n      var compoundPath = new graphic.CompoundPath({\n        segmentIgnoreThreshold: 1,\n        shape: {\n          paths: []\n        }\n      });\n      regionGroup.add(compoundPath);\n      zrUtil.each(region.geometries, function (geometry) {\n        if (geometry.type !== 'polygon') {\n          return;\n        }\n\n        var points = [];\n\n        for (var i = 0; i < geometry.exterior.length; ++i) {\n          points.push(transformPoint(geometry.exterior[i]));\n        }\n\n        compoundPath.shape.paths.push(new graphic.Polygon({\n          segmentIgnoreThreshold: 1,\n          shape: {\n            points: points\n          }\n        }));\n\n        for (var i = 0; i < (geometry.interiors ? geometry.interiors.length : 0); ++i) {\n          var interior = geometry.interiors[i];\n          var points_1 = [];\n\n          for (var j = 0; j < interior.length; ++j) {\n            points_1.push(transformPoint(interior[j]));\n          }\n\n          compoundPath.shape.paths.push(new graphic.Polygon({\n            segmentIgnoreThreshold: 1,\n            shape: {\n              points: points_1\n            }\n          }));\n        }\n      });\n      applyOptionStyleForRegion(viewBuildCtx, compoundPath, dataIdx, regionModel);\n\n      if (compoundPath instanceof Displayable) {\n        compoundPath.culling = true;\n      }\n\n      var centerPt = transformPoint(region.getCenter());\n      resetLabelForRegion(viewBuildCtx, compoundPath, regionName, regionModel, mapOrGeoModel, dataIdx, centerPt);\n    }); // Ensure children have been added to `regionGroup` before calling them.\n\n    regionsGroupByName.each(function (regionGroup, regionName) {\n      var _a = regionsInfoByName.get(regionName),\n          dataIdx = _a.dataIdx,\n          regionModel = _a.regionModel;\n\n      resetEventTriggerForRegion(viewBuildCtx, regionGroup, regionName, regionModel, mapOrGeoModel, dataIdx);\n      resetTooltipForRegion(viewBuildCtx, regionGroup, regionName, regionModel, mapOrGeoModel);\n      resetStateTriggerForRegion(viewBuildCtx, regionGroup, regionName, regionModel, mapOrGeoModel);\n    }, this);\n  };\n\n  MapDraw.prototype._buildSVG = function (viewBuildCtx) {\n    var mapName = viewBuildCtx.geo.map;\n    var transformInfoRaw = viewBuildCtx.transformInfoRaw;\n    this._svgGroup.x = transformInfoRaw.x;\n    this._svgGroup.y = transformInfoRaw.y;\n    this._svgGroup.scaleX = transformInfoRaw.scaleX;\n    this._svgGroup.scaleY = transformInfoRaw.scaleY;\n\n    if (this._svgResourceChanged(mapName)) {\n      this._freeSVG();\n\n      this._useSVG(mapName);\n    }\n\n    var svgDispatcherMap = this._svgDispatcherMap = zrUtil.createHashMap();\n    var focusSelf = false;\n    zrUtil.each(this._svgGraphicRecord.named, function (namedItem) {\n      // Note that we also allow different elements have the same name.\n      // For example, a glyph of a city and the label of the city have\n      // the same name and their tooltip info can be defined in a single\n      // region option.\n      var regionName = namedItem.name;\n      var mapOrGeoModel = viewBuildCtx.mapOrGeoModel;\n      var data = viewBuildCtx.data;\n      var svgNodeTagLower = namedItem.svgNodeTagLower;\n      var el = namedItem.el;\n      var dataIdx = data ? data.indexOfName(regionName) : null;\n      var regionModel = mapOrGeoModel.getRegionModel(regionName);\n\n      if (OPTION_STYLE_ENABLED_TAG_MAP.get(svgNodeTagLower) != null && el instanceof Displayable) {\n        applyOptionStyleForRegion(viewBuildCtx, el, dataIdx, regionModel);\n      }\n\n      if (el instanceof Displayable) {\n        el.culling = true;\n      } // We do not know how the SVG like so we'd better not to change z2.\n      // Otherwise it might bring some unexpected result. For example,\n      // an area hovered that make some inner city can not be clicked.\n\n\n      el.z2EmphasisLift = 0; // If self named:\n\n      if (!namedItem.namedFrom) {\n        // label should batter to be displayed based on the center of <g>\n        // if it is named rather than displayed on each child.\n        if (LABEL_HOST_MAP.get(svgNodeTagLower) != null) {\n          resetLabelForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel, dataIdx, null);\n        }\n\n        resetEventTriggerForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel, dataIdx);\n        resetTooltipForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel);\n\n        if (STATE_TRIGGER_TAG_MAP.get(svgNodeTagLower) != null) {\n          var focus_1 = resetStateTriggerForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel);\n\n          if (focus_1 === 'self') {\n            focusSelf = true;\n          }\n\n          var els = svgDispatcherMap.get(regionName) || svgDispatcherMap.set(regionName, []);\n          els.push(el);\n        }\n      }\n    }, this);\n\n    this._enableBlurEntireSVG(focusSelf, viewBuildCtx);\n  };\n\n  MapDraw.prototype._enableBlurEntireSVG = function (focusSelf, viewBuildCtx) {\n    // It's a little complicated to support blurring the entire geoSVG in series-map.\n    // So do not suport it until some requirements come.\n    // At present, in series-map, only regions can be blurred.\n    if (focusSelf && viewBuildCtx.isGeo) {\n      var blurStyle = viewBuildCtx.mapOrGeoModel.getModel(['blur', 'itemStyle']).getItemStyle(); // Only suport `opacity` here. Because not sure that other props are suitable for\n      // all of the elements generated by SVG (especially for Text/TSpan/Image/... ).\n\n      var opacity_1 = blurStyle.opacity;\n\n      this._svgGraphicRecord.root.traverse(function (el) {\n        if (!el.isGroup) {\n          // PENDING: clear those settings to SVG elements when `_freeSVG`.\n          // (Currently it happen not to be needed.)\n          setDefaultStateProxy(el);\n          var style = el.ensureState('blur').style || {}; // Do not overwrite the region style that already set from region option.\n\n          if (style.opacity == null && opacity_1 != null) {\n            style.opacity = opacity_1;\n          } // If `ensureState('blur').style = {}`, there will be default opacity.\n          // Enable `stateTransition` (animation).\n\n\n          el.ensureState('emphasis');\n        }\n      });\n    }\n  };\n\n  MapDraw.prototype.remove = function () {\n    this._regionsGroup.removeAll();\n\n    this._regionsGroupByName = null;\n\n    this._svgGroup.removeAll();\n\n    this._freeSVG();\n\n    this._controller.dispose();\n\n    this._controllerHost = null;\n  };\n\n  MapDraw.prototype.findHighDownDispatchers = function (name, geoModel) {\n    if (name == null) {\n      return [];\n    }\n\n    var geo = geoModel.coordinateSystem;\n\n    if (geo.resourceType === 'geoJSON') {\n      var regionsGroupByName = this._regionsGroupByName;\n\n      if (regionsGroupByName) {\n        var regionGroup = regionsGroupByName.get(name);\n        return regionGroup ? [regionGroup] : [];\n      }\n    } else if (geo.resourceType === 'geoSVG') {\n      return this._svgDispatcherMap && this._svgDispatcherMap.get(name) || [];\n    }\n  };\n\n  MapDraw.prototype._svgResourceChanged = function (mapName) {\n    return this._svgMapName !== mapName;\n  };\n\n  MapDraw.prototype._useSVG = function (mapName) {\n    var resource = geoSourceManager.getGeoResource(mapName);\n\n    if (resource && resource.type === 'geoSVG') {\n      var svgGraphic = resource.useGraphic(this.uid);\n\n      this._svgGroup.add(svgGraphic.root);\n\n      this._svgGraphicRecord = svgGraphic;\n      this._svgMapName = mapName;\n    }\n  };\n\n  MapDraw.prototype._freeSVG = function () {\n    var mapName = this._svgMapName;\n\n    if (mapName == null) {\n      return;\n    }\n\n    var resource = geoSourceManager.getGeoResource(mapName);\n\n    if (resource && resource.type === 'geoSVG') {\n      resource.freeGraphic(this.uid);\n    }\n\n    this._svgGraphicRecord = null;\n    this._svgDispatcherMap = null;\n\n    this._svgGroup.removeAll();\n\n    this._svgMapName = null;\n  };\n\n  MapDraw.prototype._updateController = function (mapOrGeoModel, ecModel, api) {\n    var geo = mapOrGeoModel.coordinateSystem;\n    var controller = this._controller;\n    var controllerHost = this._controllerHost; // @ts-ignore FIXME:TS\n\n    controllerHost.zoomLimit = mapOrGeoModel.get('scaleLimit');\n    controllerHost.zoom = geo.getZoom(); // roamType is will be set default true if it is null\n    // @ts-ignore FIXME:TS\n\n    controller.enable(mapOrGeoModel.get('roam') || false);\n    var mainType = mapOrGeoModel.mainType;\n\n    function makeActionBase() {\n      var action = {\n        type: 'geoRoam',\n        componentType: mainType\n      };\n      action[mainType + 'Id'] = mapOrGeoModel.id;\n      return action;\n    }\n\n    controller.off('pan').on('pan', function (e) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnPan(controllerHost, e.dx, e.dy);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        dx: e.dx,\n        dy: e.dy\n      }));\n    }, this);\n    controller.off('zoom').on('zoom', function (e) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnZoom(controllerHost, e.scale, e.originX, e.originY);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        zoom: e.scale,\n        originX: e.originX,\n        originY: e.originY\n      }));\n    }, this);\n    controller.setPointerChecker(function (e, x, y) {\n      return geo.containPoint([x, y]) && !onIrrelevantElement(e, api, mapOrGeoModel);\n    });\n  };\n  /**\n   * FIXME: this is a temporarily workaround.\n   * When `geoRoam` the elements need to be reset in `MapView['render']`, because the props like\n   * `ignore` might have been modified by `LabelManager`, and `LabelManager#addLabelsOfSeries`\n   * will subsequently cache `defaultAttr` like `ignore`. If do not do this reset, the modified\n   * props will have no chance to be restored.\n   * Note: this reset should be after `clearStates` in `renderSeries` becuase `useStates` in\n   * `renderSeries` will cache the modified `ignore` to `el._normalState`.\n   * TODO:\n   * Use clone/immutable in `LabelManager`?\n   */\n\n\n  MapDraw.prototype.resetForLabelLayout = function () {\n    this.group.traverse(function (el) {\n      var label = el.getTextContent();\n\n      if (label) {\n        label.ignore = mapLabelRaw(label).ignore;\n      }\n    });\n  };\n\n  MapDraw.prototype._updateMapSelectHandler = function (mapOrGeoModel, regionsGroup, api, fromView) {\n    var mapDraw = this;\n    regionsGroup.off('mousedown');\n    regionsGroup.off('click'); // @ts-ignore FIXME:TS resolve type conflict\n\n    if (mapOrGeoModel.get('selectedMode')) {\n      regionsGroup.on('mousedown', function () {\n        mapDraw._mouseDownFlag = true;\n      });\n      regionsGroup.on('click', function (e) {\n        if (!mapDraw._mouseDownFlag) {\n          return;\n        }\n\n        mapDraw._mouseDownFlag = false;\n      });\n    }\n  };\n\n  return MapDraw;\n}();\n\n;\n\nfunction applyOptionStyleForRegion(viewBuildCtx, el, dataIndex, regionModel) {\n  // All of the path are using `itemStyle`, becuase\n  // (1) Some SVG also use fill on polyline (The different between\n  // polyline and polygon is \"open\" or \"close\" but not fill or not).\n  // (2) For the common props like opacity, if some use itemStyle\n  // and some use `lineStyle`, it might confuse users.\n  // (3) Most SVG use <path>, where can not detect wether draw a \"line\"\n  // or a filled shape, so use `itemStyle` for <path>.\n  var normalStyleModel = regionModel.getModel('itemStyle');\n  var emphasisStyleModel = regionModel.getModel(['emphasis', 'itemStyle']);\n  var blurStyleModel = regionModel.getModel(['blur', 'itemStyle']);\n  var selectStyleModel = regionModel.getModel(['select', 'itemStyle']); // NOTE: DONT use 'style' in visual when drawing map.\n  // This component is used for drawing underlying map for both geo component and map series.\n\n  var normalStyle = getFixedItemStyle(normalStyleModel);\n  var emphasisStyle = getFixedItemStyle(emphasisStyleModel);\n  var selectStyle = getFixedItemStyle(selectStyleModel);\n  var blurStyle = getFixedItemStyle(blurStyleModel); // Update the itemStyle if has data visual\n\n  var data = viewBuildCtx.data;\n\n  if (data) {\n    // Only visual color of each item will be used. It can be encoded by visualMap\n    // But visual color of series is used in symbol drawing\n    // Visual color for each series is for the symbol draw\n    var style = data.getItemVisual(dataIndex, 'style');\n    var decal = data.getItemVisual(dataIndex, 'decal');\n\n    if (viewBuildCtx.isVisualEncodedByVisualMap && style.fill) {\n      normalStyle.fill = style.fill;\n    }\n\n    if (decal) {\n      normalStyle.decal = createOrUpdatePatternFromDecal(decal, viewBuildCtx.api);\n    }\n  } // SVG text, tspan and image can be named but not supporeted\n  // to be styled by region option yet.\n\n\n  el.setStyle(normalStyle);\n  el.style.strokeNoScale = true;\n  el.ensureState('emphasis').style = emphasisStyle;\n  el.ensureState('select').style = selectStyle;\n  el.ensureState('blur').style = blurStyle; // Enable blur\n\n  setDefaultStateProxy(el);\n}\n\nfunction resetLabelForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel, // Exist only if `viewBuildCtx.data` exists.\ndataIdx, // If labelXY not provided, use `textConfig.position: 'inside'`\nlabelXY) {\n  var data = viewBuildCtx.data;\n  var isGeo = viewBuildCtx.isGeo;\n  var isDataNaN = data && isNaN(data.get(data.mapDimension('value'), dataIdx));\n  var itemLayout = data && data.getItemLayout(dataIdx); // In the following cases label will be drawn\n  // 1. In map series and data value is NaN\n  // 2. In geo component\n  // 3. Region has no series legendIcon, which will be add a showLabel flag in mapSymbolLayout\n\n  if (isGeo || isDataNaN || itemLayout && itemLayout.showLabel) {\n    var query = !isGeo ? dataIdx : regionName;\n    var labelFetcher = void 0; // Consider dataIdx not found.\n\n    if (!data || dataIdx >= 0) {\n      labelFetcher = mapOrGeoModel;\n    }\n\n    var specifiedTextOpt = labelXY ? {\n      normal: {\n        align: 'center',\n        verticalAlign: 'middle'\n      }\n    } : null; // Caveat: must be called after `setDefaultStateProxy(el);` called.\n    // because textContent will be assign with `el.stateProxy` inside.\n\n    setLabelStyle(el, getLabelStatesModels(regionModel), {\n      labelFetcher: labelFetcher,\n      labelDataIndex: query,\n      defaultText: regionName\n    }, specifiedTextOpt);\n    var textEl = el.getTextContent();\n\n    if (textEl) {\n      mapLabelRaw(textEl).ignore = textEl.ignore;\n\n      if (el.textConfig && labelXY) {\n        // Compute a relative offset based on the el bounding rect.\n        var rect = el.getBoundingRect().clone(); // Need to make sure the percent position base on the same rect in normal and\n        // emphasis state. Otherwise if using boundingRect of el, but the emphasis state\n        // has borderWidth (even 0.5px), the text position will be changed obviously\n        // if the position is very big like ['1234%', '1345%'].\n\n        el.textConfig.layoutRect = rect;\n        el.textConfig.position = [(labelXY[0] - rect.x) / rect.width * 100 + '%', (labelXY[1] - rect.y) / rect.height * 100 + '%'];\n      }\n    } // PENDING:\n    // If labelLayout is enabled (test/label-layout.html), el.dataIndex should be specified.\n    // But el.dataIndex is also used to determine whether user event should be triggered,\n    // where el.seriesIndex or el.dataModel must be specified. At present for a single el\n    // there is not case that \"only label layout enabled but user event disabled\", so here\n    // we depends `resetEventTriggerForRegion` to do the job of setting `el.dataIndex`.\n\n\n    el.disableLabelAnimation = true;\n  } else {\n    el.removeTextContent();\n    el.removeTextConfig();\n    el.disableLabelAnimation = null;\n  }\n}\n\nfunction resetEventTriggerForRegion(viewBuildCtx, eventTrigger, regionName, regionModel, mapOrGeoModel, // Exist only if `viewBuildCtx.data` exists.\ndataIdx) {\n  // setItemGraphicEl, setHoverStyle after all polygons and labels\n  // are added to the rigionGroup\n  if (viewBuildCtx.data) {\n    // FIXME: when series-map use a SVG map, and there are duplicated name specified\n    // on different SVG elements, after `data.setItemGraphicEl(...)`:\n    // (1) all of them will be mounted with `dataIndex`, `seriesIndex`, so that tooltip\n    // can be triggered only mouse hover. That's correct.\n    // (2) only the last element will be kept in `data`, so that if trigger tooltip\n    // by `dispatchAction`, only the last one can be found and triggered. That might be\n    // not correct. We will fix it in future if anyone demanding that.\n    viewBuildCtx.data.setItemGraphicEl(dataIdx, eventTrigger);\n  } // series-map will not trigger \"geoselectchange\" no matter it is\n  // based on a declared geo component. Becuause series-map will\n  // trigger \"selectchange\". If it trigger both the two events,\n  // If users call `chart.dispatchAction({type: 'toggleSelect'})`,\n  // it not easy to also fire event \"geoselectchanged\".\n  else {\n    // Package custom mouse event for geo component\n    getECData(eventTrigger).eventData = {\n      componentType: 'geo',\n      componentIndex: mapOrGeoModel.componentIndex,\n      geoIndex: mapOrGeoModel.componentIndex,\n      name: regionName,\n      region: regionModel && regionModel.option || {}\n    };\n  }\n}\n\nfunction resetTooltipForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel) {\n  if (!viewBuildCtx.data) {\n    graphic.setTooltipConfig({\n      el: el,\n      componentModel: mapOrGeoModel,\n      itemName: regionName,\n      // @ts-ignore FIXME:TS fix the \"compatible with each other\"?\n      itemTooltipOption: regionModel.get('tooltip')\n    });\n  }\n}\n\nfunction resetStateTriggerForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel) {\n  // @ts-ignore FIXME:TS fix the \"compatible with each other\"?\n  el.highDownSilentOnTouch = !!mapOrGeoModel.get('selectedMode'); // @ts-ignore FIXME:TS fix the \"compatible with each other\"?\n\n  var emphasisModel = regionModel.getModel('emphasis');\n  var focus = emphasisModel.get('focus');\n  enableHoverEmphasis(el, focus, emphasisModel.get('blurScope'));\n\n  if (viewBuildCtx.isGeo) {\n    enableComponentHighDownFeatures(el, mapOrGeoModel, regionName);\n  }\n\n  return focus;\n}\n\nexport default MapDraw; // @ts-ignore FIXME:TS fix the \"compatible with each other\"?","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/component/helper/MapDraw.js"],"names":["zrUtil","RoamController","roamHelper","onIrrelevantElement","graphic","enableHoverEmphasis","enableComponentHighDownFeatures","setDefaultStateProxy","geoSourceManager","getUID","setLabelStyle","getLabelStatesModels","getECData","createOrUpdatePatternFromDecal","Displayable","makeInner","OPTION_STYLE_ENABLED_TAGS","OPTION_STYLE_ENABLED_TAG_MAP","createHashMap","STATE_TRIGGER_TAG_MAP","concat","LABEL_HOST_MAP","mapLabelRaw","getFixedItemStyle","model","itemStyle","getItemStyle","areaColor","get","fill","MapDraw","api","group","Group","uid","_controller","getZr","_controllerHost","target","add","_regionsGroup","_svgGroup","prototype","draw","mapOrGeoModel","ecModel","fromView","payload","isGeo","mainType","data","getData","eachComponent","subType","mapSeries","getHostGeoModel","geo","coordinateSystem","regionsGroup","transformInfo","getTransformInfo","transformInfoRaw","raw","transformInfoRoam","roam","isFirstDraw","childAt","x","y","scaleX","scaleY","dirty","updateProps","isVisualEncodedByVisualMap","getVisual","length","viewBuildCtx","resourceType","_buildGeoJSON","_buildSVG","_updateController","_updateMapSelectHandler","regionsGroupByName","_regionsGroupByName","regionsInfoByName","transformPoint","point","removeAll","each","regions","region","regionName","name","regionGroup","_a","dataIdx","regionModel","set","indexOfName","getRegionModel","getItemModel","compoundPath","CompoundPath","segmentIgnoreThreshold","shape","paths","geometries","geometry","type","points","i","exterior","push","Polygon","interiors","interior","points_1","j","applyOptionStyleForRegion","culling","centerPt","getCenter","resetLabelForRegion","resetEventTriggerForRegion","resetTooltipForRegion","resetStateTriggerForRegion","mapName","map","_svgResourceChanged","_freeSVG","_useSVG","svgDispatcherMap","_svgDispatcherMap","focusSelf","_svgGraphicRecord","named","namedItem","svgNodeTagLower","el","z2EmphasisLift","namedFrom","focus_1","els","_enableBlurEntireSVG","blurStyle","getModel","opacity_1","opacity","root","traverse","isGroup","style","ensureState","remove","dispose","findHighDownDispatchers","geoModel","_svgMapName","resource","getGeoResource","svgGraphic","useGraphic","freeGraphic","controller","controllerHost","zoomLimit","zoom","getZoom","enable","makeActionBase","action","componentType","id","off","on","e","_mouseDownFlag","updateViewOnPan","dx","dy","dispatchAction","extend","updateViewOnZoom","scale","originX","originY","setPointerChecker","containPoint","resetForLabelLayout","label","getTextContent","ignore","mapDraw","dataIndex","normalStyleModel","emphasisStyleModel","blurStyleModel","selectStyleModel","normalStyle","emphasisStyle","selectStyle","getItemVisual","decal","setStyle","strokeNoScale","labelXY","isDataNaN","isNaN","mapDimension","itemLayout","getItemLayout","showLabel","query","labelFetcher","specifiedTextOpt","normal","align","verticalAlign","labelDataIndex","defaultText","textEl","textConfig","rect","getBoundingRect","clone","layoutRect","position","width","height","disableLabelAnimation","removeTextContent","removeTextConfig","eventTrigger","setItemGraphicEl","eventData","componentIndex","geoIndex","option","setTooltipConfig","componentModel","itemName","itemTooltipOption","highDownSilentOnTouch","emphasisModel","focus"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as zrUtil from 'zrender/lib/core/util';\nimport RoamController from './RoamController';\nimport * as roamHelper from '../../component/helper/roamHelper';\nimport { onIrrelevantElement } from '../../component/helper/cursorHelper';\nimport * as graphic from '../../util/graphic';\nimport { enableHoverEmphasis, enableComponentHighDownFeatures, setDefaultStateProxy } from '../../util/states';\nimport geoSourceManager from '../../coord/geo/geoSourceManager';\nimport { getUID } from '../../util/component';\nimport { setLabelStyle, getLabelStatesModels } from '../../label/labelStyle';\nimport { getECData } from '../../util/innerStore';\nimport { createOrUpdatePatternFromDecal } from '../../util/decal';\nimport Displayable from 'zrender/lib/graphic/Displayable';\nimport { makeInner } from '../../util/model';\n/**\n * Only these tags enable use `itemStyle` if they are named in SVG.\n * Other tags like <text> <tspan> <image> might not suitable for `itemStyle`.\n * They will not be considered to be styled until some requirements come.\n */\n\nvar OPTION_STYLE_ENABLED_TAGS = ['rect', 'circle', 'line', 'ellipse', 'polygon', 'polyline', 'path'];\nvar OPTION_STYLE_ENABLED_TAG_MAP = zrUtil.createHashMap(OPTION_STYLE_ENABLED_TAGS);\nvar STATE_TRIGGER_TAG_MAP = zrUtil.createHashMap(OPTION_STYLE_ENABLED_TAGS.concat(['g']));\nvar LABEL_HOST_MAP = zrUtil.createHashMap(OPTION_STYLE_ENABLED_TAGS.concat(['g']));\nvar mapLabelRaw = makeInner();\n\nfunction getFixedItemStyle(model) {\n  var itemStyle = model.getItemStyle();\n  var areaColor = model.get('areaColor'); // If user want the color not to be changed when hover,\n  // they should both set areaColor and color to be null.\n\n  if (areaColor != null) {\n    itemStyle.fill = areaColor;\n  }\n\n  return itemStyle;\n}\n\nvar MapDraw =\n/** @class */\nfunction () {\n  function MapDraw(api) {\n    var group = new graphic.Group();\n    this.uid = getUID('ec_map_draw');\n    this._controller = new RoamController(api.getZr());\n    this._controllerHost = {\n      target: group\n    };\n    this.group = group;\n    group.add(this._regionsGroup = new graphic.Group());\n    group.add(this._svgGroup = new graphic.Group());\n  }\n\n  MapDraw.prototype.draw = function (mapOrGeoModel, ecModel, api, fromView, payload) {\n    var isGeo = mapOrGeoModel.mainType === 'geo'; // Map series has data. GEO model that controlled by map series\n    // will be assigned with map data. Other GEO model has no data.\n\n    var data = mapOrGeoModel.getData && mapOrGeoModel.getData();\n    isGeo && ecModel.eachComponent({\n      mainType: 'series',\n      subType: 'map'\n    }, function (mapSeries) {\n      if (!data && mapSeries.getHostGeoModel() === mapOrGeoModel) {\n        data = mapSeries.getData();\n      }\n    });\n    var geo = mapOrGeoModel.coordinateSystem;\n    var regionsGroup = this._regionsGroup;\n    var group = this.group;\n    var transformInfo = geo.getTransformInfo();\n    var transformInfoRaw = transformInfo.raw;\n    var transformInfoRoam = transformInfo.roam; // No animation when first draw or in action\n\n    var isFirstDraw = !regionsGroup.childAt(0) || payload;\n\n    if (isFirstDraw) {\n      group.x = transformInfoRoam.x;\n      group.y = transformInfoRoam.y;\n      group.scaleX = transformInfoRoam.scaleX;\n      group.scaleY = transformInfoRoam.scaleY;\n      group.dirty();\n    } else {\n      graphic.updateProps(group, transformInfoRoam, mapOrGeoModel);\n    }\n\n    var isVisualEncodedByVisualMap = data && data.getVisual('visualMeta') && data.getVisual('visualMeta').length > 0;\n    var viewBuildCtx = {\n      api: api,\n      geo: geo,\n      mapOrGeoModel: mapOrGeoModel,\n      data: data,\n      isVisualEncodedByVisualMap: isVisualEncodedByVisualMap,\n      isGeo: isGeo,\n      transformInfoRaw: transformInfoRaw\n    };\n\n    if (geo.resourceType === 'geoJSON') {\n      this._buildGeoJSON(viewBuildCtx);\n    } else if (geo.resourceType === 'geoSVG') {\n      this._buildSVG(viewBuildCtx);\n    }\n\n    this._updateController(mapOrGeoModel, ecModel, api);\n\n    this._updateMapSelectHandler(mapOrGeoModel, regionsGroup, api, fromView);\n  };\n\n  MapDraw.prototype._buildGeoJSON = function (viewBuildCtx) {\n    var regionsGroupByName = this._regionsGroupByName = zrUtil.createHashMap();\n    var regionsInfoByName = zrUtil.createHashMap();\n    var regionsGroup = this._regionsGroup;\n    var transformInfoRaw = viewBuildCtx.transformInfoRaw;\n    var mapOrGeoModel = viewBuildCtx.mapOrGeoModel;\n    var data = viewBuildCtx.data;\n\n    var transformPoint = function (point) {\n      return [point[0] * transformInfoRaw.scaleX + transformInfoRaw.x, point[1] * transformInfoRaw.scaleY + transformInfoRaw.y];\n    };\n\n    regionsGroup.removeAll(); // Only when the resource is GeoJSON, there is `geo.regions`.\n\n    zrUtil.each(viewBuildCtx.geo.regions, function (region) {\n      var regionName = region.name; // Consider in GeoJson properties.name may be duplicated, for example,\n      // there is multiple region named \"United Kindom\" or \"France\" (so many\n      // colonies). And it is not appropriate to merge them in geo, which\n      // will make them share the same label and bring trouble in label\n      // location calculation.\n\n      var regionGroup = regionsGroupByName.get(regionName);\n\n      var _a = regionsInfoByName.get(regionName) || {},\n          dataIdx = _a.dataIdx,\n          regionModel = _a.regionModel;\n\n      if (!regionGroup) {\n        regionGroup = regionsGroupByName.set(regionName, new graphic.Group());\n        regionsGroup.add(regionGroup);\n        dataIdx = data ? data.indexOfName(regionName) : null;\n        regionModel = viewBuildCtx.isGeo ? mapOrGeoModel.getRegionModel(regionName) : data ? data.getItemModel(dataIdx) : null;\n        regionsInfoByName.set(regionName, {\n          dataIdx: dataIdx,\n          regionModel: regionModel\n        });\n      }\n\n      var compoundPath = new graphic.CompoundPath({\n        segmentIgnoreThreshold: 1,\n        shape: {\n          paths: []\n        }\n      });\n      regionGroup.add(compoundPath);\n      zrUtil.each(region.geometries, function (geometry) {\n        if (geometry.type !== 'polygon') {\n          return;\n        }\n\n        var points = [];\n\n        for (var i = 0; i < geometry.exterior.length; ++i) {\n          points.push(transformPoint(geometry.exterior[i]));\n        }\n\n        compoundPath.shape.paths.push(new graphic.Polygon({\n          segmentIgnoreThreshold: 1,\n          shape: {\n            points: points\n          }\n        }));\n\n        for (var i = 0; i < (geometry.interiors ? geometry.interiors.length : 0); ++i) {\n          var interior = geometry.interiors[i];\n          var points_1 = [];\n\n          for (var j = 0; j < interior.length; ++j) {\n            points_1.push(transformPoint(interior[j]));\n          }\n\n          compoundPath.shape.paths.push(new graphic.Polygon({\n            segmentIgnoreThreshold: 1,\n            shape: {\n              points: points_1\n            }\n          }));\n        }\n      });\n      applyOptionStyleForRegion(viewBuildCtx, compoundPath, dataIdx, regionModel);\n\n      if (compoundPath instanceof Displayable) {\n        compoundPath.culling = true;\n      }\n\n      var centerPt = transformPoint(region.getCenter());\n      resetLabelForRegion(viewBuildCtx, compoundPath, regionName, regionModel, mapOrGeoModel, dataIdx, centerPt);\n    }); // Ensure children have been added to `regionGroup` before calling them.\n\n    regionsGroupByName.each(function (regionGroup, regionName) {\n      var _a = regionsInfoByName.get(regionName),\n          dataIdx = _a.dataIdx,\n          regionModel = _a.regionModel;\n\n      resetEventTriggerForRegion(viewBuildCtx, regionGroup, regionName, regionModel, mapOrGeoModel, dataIdx);\n      resetTooltipForRegion(viewBuildCtx, regionGroup, regionName, regionModel, mapOrGeoModel);\n      resetStateTriggerForRegion(viewBuildCtx, regionGroup, regionName, regionModel, mapOrGeoModel);\n    }, this);\n  };\n\n  MapDraw.prototype._buildSVG = function (viewBuildCtx) {\n    var mapName = viewBuildCtx.geo.map;\n    var transformInfoRaw = viewBuildCtx.transformInfoRaw;\n    this._svgGroup.x = transformInfoRaw.x;\n    this._svgGroup.y = transformInfoRaw.y;\n    this._svgGroup.scaleX = transformInfoRaw.scaleX;\n    this._svgGroup.scaleY = transformInfoRaw.scaleY;\n\n    if (this._svgResourceChanged(mapName)) {\n      this._freeSVG();\n\n      this._useSVG(mapName);\n    }\n\n    var svgDispatcherMap = this._svgDispatcherMap = zrUtil.createHashMap();\n    var focusSelf = false;\n    zrUtil.each(this._svgGraphicRecord.named, function (namedItem) {\n      // Note that we also allow different elements have the same name.\n      // For example, a glyph of a city and the label of the city have\n      // the same name and their tooltip info can be defined in a single\n      // region option.\n      var regionName = namedItem.name;\n      var mapOrGeoModel = viewBuildCtx.mapOrGeoModel;\n      var data = viewBuildCtx.data;\n      var svgNodeTagLower = namedItem.svgNodeTagLower;\n      var el = namedItem.el;\n      var dataIdx = data ? data.indexOfName(regionName) : null;\n      var regionModel = mapOrGeoModel.getRegionModel(regionName);\n\n      if (OPTION_STYLE_ENABLED_TAG_MAP.get(svgNodeTagLower) != null && el instanceof Displayable) {\n        applyOptionStyleForRegion(viewBuildCtx, el, dataIdx, regionModel);\n      }\n\n      if (el instanceof Displayable) {\n        el.culling = true;\n      } // We do not know how the SVG like so we'd better not to change z2.\n      // Otherwise it might bring some unexpected result. For example,\n      // an area hovered that make some inner city can not be clicked.\n\n\n      el.z2EmphasisLift = 0; // If self named:\n\n      if (!namedItem.namedFrom) {\n        // label should batter to be displayed based on the center of <g>\n        // if it is named rather than displayed on each child.\n        if (LABEL_HOST_MAP.get(svgNodeTagLower) != null) {\n          resetLabelForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel, dataIdx, null);\n        }\n\n        resetEventTriggerForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel, dataIdx);\n        resetTooltipForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel);\n\n        if (STATE_TRIGGER_TAG_MAP.get(svgNodeTagLower) != null) {\n          var focus_1 = resetStateTriggerForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel);\n\n          if (focus_1 === 'self') {\n            focusSelf = true;\n          }\n\n          var els = svgDispatcherMap.get(regionName) || svgDispatcherMap.set(regionName, []);\n          els.push(el);\n        }\n      }\n    }, this);\n\n    this._enableBlurEntireSVG(focusSelf, viewBuildCtx);\n  };\n\n  MapDraw.prototype._enableBlurEntireSVG = function (focusSelf, viewBuildCtx) {\n    // It's a little complicated to support blurring the entire geoSVG in series-map.\n    // So do not suport it until some requirements come.\n    // At present, in series-map, only regions can be blurred.\n    if (focusSelf && viewBuildCtx.isGeo) {\n      var blurStyle = viewBuildCtx.mapOrGeoModel.getModel(['blur', 'itemStyle']).getItemStyle(); // Only suport `opacity` here. Because not sure that other props are suitable for\n      // all of the elements generated by SVG (especially for Text/TSpan/Image/... ).\n\n      var opacity_1 = blurStyle.opacity;\n\n      this._svgGraphicRecord.root.traverse(function (el) {\n        if (!el.isGroup) {\n          // PENDING: clear those settings to SVG elements when `_freeSVG`.\n          // (Currently it happen not to be needed.)\n          setDefaultStateProxy(el);\n          var style = el.ensureState('blur').style || {}; // Do not overwrite the region style that already set from region option.\n\n          if (style.opacity == null && opacity_1 != null) {\n            style.opacity = opacity_1;\n          } // If `ensureState('blur').style = {}`, there will be default opacity.\n          // Enable `stateTransition` (animation).\n\n\n          el.ensureState('emphasis');\n        }\n      });\n    }\n  };\n\n  MapDraw.prototype.remove = function () {\n    this._regionsGroup.removeAll();\n\n    this._regionsGroupByName = null;\n\n    this._svgGroup.removeAll();\n\n    this._freeSVG();\n\n    this._controller.dispose();\n\n    this._controllerHost = null;\n  };\n\n  MapDraw.prototype.findHighDownDispatchers = function (name, geoModel) {\n    if (name == null) {\n      return [];\n    }\n\n    var geo = geoModel.coordinateSystem;\n\n    if (geo.resourceType === 'geoJSON') {\n      var regionsGroupByName = this._regionsGroupByName;\n\n      if (regionsGroupByName) {\n        var regionGroup = regionsGroupByName.get(name);\n        return regionGroup ? [regionGroup] : [];\n      }\n    } else if (geo.resourceType === 'geoSVG') {\n      return this._svgDispatcherMap && this._svgDispatcherMap.get(name) || [];\n    }\n  };\n\n  MapDraw.prototype._svgResourceChanged = function (mapName) {\n    return this._svgMapName !== mapName;\n  };\n\n  MapDraw.prototype._useSVG = function (mapName) {\n    var resource = geoSourceManager.getGeoResource(mapName);\n\n    if (resource && resource.type === 'geoSVG') {\n      var svgGraphic = resource.useGraphic(this.uid);\n\n      this._svgGroup.add(svgGraphic.root);\n\n      this._svgGraphicRecord = svgGraphic;\n      this._svgMapName = mapName;\n    }\n  };\n\n  MapDraw.prototype._freeSVG = function () {\n    var mapName = this._svgMapName;\n\n    if (mapName == null) {\n      return;\n    }\n\n    var resource = geoSourceManager.getGeoResource(mapName);\n\n    if (resource && resource.type === 'geoSVG') {\n      resource.freeGraphic(this.uid);\n    }\n\n    this._svgGraphicRecord = null;\n    this._svgDispatcherMap = null;\n\n    this._svgGroup.removeAll();\n\n    this._svgMapName = null;\n  };\n\n  MapDraw.prototype._updateController = function (mapOrGeoModel, ecModel, api) {\n    var geo = mapOrGeoModel.coordinateSystem;\n    var controller = this._controller;\n    var controllerHost = this._controllerHost; // @ts-ignore FIXME:TS\n\n    controllerHost.zoomLimit = mapOrGeoModel.get('scaleLimit');\n    controllerHost.zoom = geo.getZoom(); // roamType is will be set default true if it is null\n    // @ts-ignore FIXME:TS\n\n    controller.enable(mapOrGeoModel.get('roam') || false);\n    var mainType = mapOrGeoModel.mainType;\n\n    function makeActionBase() {\n      var action = {\n        type: 'geoRoam',\n        componentType: mainType\n      };\n      action[mainType + 'Id'] = mapOrGeoModel.id;\n      return action;\n    }\n\n    controller.off('pan').on('pan', function (e) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnPan(controllerHost, e.dx, e.dy);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        dx: e.dx,\n        dy: e.dy\n      }));\n    }, this);\n    controller.off('zoom').on('zoom', function (e) {\n      this._mouseDownFlag = false;\n      roamHelper.updateViewOnZoom(controllerHost, e.scale, e.originX, e.originY);\n      api.dispatchAction(zrUtil.extend(makeActionBase(), {\n        zoom: e.scale,\n        originX: e.originX,\n        originY: e.originY\n      }));\n    }, this);\n    controller.setPointerChecker(function (e, x, y) {\n      return geo.containPoint([x, y]) && !onIrrelevantElement(e, api, mapOrGeoModel);\n    });\n  };\n  /**\n   * FIXME: this is a temporarily workaround.\n   * When `geoRoam` the elements need to be reset in `MapView['render']`, because the props like\n   * `ignore` might have been modified by `LabelManager`, and `LabelManager#addLabelsOfSeries`\n   * will subsequently cache `defaultAttr` like `ignore`. If do not do this reset, the modified\n   * props will have no chance to be restored.\n   * Note: this reset should be after `clearStates` in `renderSeries` becuase `useStates` in\n   * `renderSeries` will cache the modified `ignore` to `el._normalState`.\n   * TODO:\n   * Use clone/immutable in `LabelManager`?\n   */\n\n\n  MapDraw.prototype.resetForLabelLayout = function () {\n    this.group.traverse(function (el) {\n      var label = el.getTextContent();\n\n      if (label) {\n        label.ignore = mapLabelRaw(label).ignore;\n      }\n    });\n  };\n\n  MapDraw.prototype._updateMapSelectHandler = function (mapOrGeoModel, regionsGroup, api, fromView) {\n    var mapDraw = this;\n    regionsGroup.off('mousedown');\n    regionsGroup.off('click'); // @ts-ignore FIXME:TS resolve type conflict\n\n    if (mapOrGeoModel.get('selectedMode')) {\n      regionsGroup.on('mousedown', function () {\n        mapDraw._mouseDownFlag = true;\n      });\n      regionsGroup.on('click', function (e) {\n        if (!mapDraw._mouseDownFlag) {\n          return;\n        }\n\n        mapDraw._mouseDownFlag = false;\n      });\n    }\n  };\n\n  return MapDraw;\n}();\n\n;\n\nfunction applyOptionStyleForRegion(viewBuildCtx, el, dataIndex, regionModel) {\n  // All of the path are using `itemStyle`, becuase\n  // (1) Some SVG also use fill on polyline (The different between\n  // polyline and polygon is \"open\" or \"close\" but not fill or not).\n  // (2) For the common props like opacity, if some use itemStyle\n  // and some use `lineStyle`, it might confuse users.\n  // (3) Most SVG use <path>, where can not detect wether draw a \"line\"\n  // or a filled shape, so use `itemStyle` for <path>.\n  var normalStyleModel = regionModel.getModel('itemStyle');\n  var emphasisStyleModel = regionModel.getModel(['emphasis', 'itemStyle']);\n  var blurStyleModel = regionModel.getModel(['blur', 'itemStyle']);\n  var selectStyleModel = regionModel.getModel(['select', 'itemStyle']); // NOTE: DONT use 'style' in visual when drawing map.\n  // This component is used for drawing underlying map for both geo component and map series.\n\n  var normalStyle = getFixedItemStyle(normalStyleModel);\n  var emphasisStyle = getFixedItemStyle(emphasisStyleModel);\n  var selectStyle = getFixedItemStyle(selectStyleModel);\n  var blurStyle = getFixedItemStyle(blurStyleModel); // Update the itemStyle if has data visual\n\n  var data = viewBuildCtx.data;\n\n  if (data) {\n    // Only visual color of each item will be used. It can be encoded by visualMap\n    // But visual color of series is used in symbol drawing\n    // Visual color for each series is for the symbol draw\n    var style = data.getItemVisual(dataIndex, 'style');\n    var decal = data.getItemVisual(dataIndex, 'decal');\n\n    if (viewBuildCtx.isVisualEncodedByVisualMap && style.fill) {\n      normalStyle.fill = style.fill;\n    }\n\n    if (decal) {\n      normalStyle.decal = createOrUpdatePatternFromDecal(decal, viewBuildCtx.api);\n    }\n  } // SVG text, tspan and image can be named but not supporeted\n  // to be styled by region option yet.\n\n\n  el.setStyle(normalStyle);\n  el.style.strokeNoScale = true;\n  el.ensureState('emphasis').style = emphasisStyle;\n  el.ensureState('select').style = selectStyle;\n  el.ensureState('blur').style = blurStyle; // Enable blur\n\n  setDefaultStateProxy(el);\n}\n\nfunction resetLabelForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel, // Exist only if `viewBuildCtx.data` exists.\ndataIdx, // If labelXY not provided, use `textConfig.position: 'inside'`\nlabelXY) {\n  var data = viewBuildCtx.data;\n  var isGeo = viewBuildCtx.isGeo;\n  var isDataNaN = data && isNaN(data.get(data.mapDimension('value'), dataIdx));\n  var itemLayout = data && data.getItemLayout(dataIdx); // In the following cases label will be drawn\n  // 1. In map series and data value is NaN\n  // 2. In geo component\n  // 3. Region has no series legendIcon, which will be add a showLabel flag in mapSymbolLayout\n\n  if (isGeo || isDataNaN || itemLayout && itemLayout.showLabel) {\n    var query = !isGeo ? dataIdx : regionName;\n    var labelFetcher = void 0; // Consider dataIdx not found.\n\n    if (!data || dataIdx >= 0) {\n      labelFetcher = mapOrGeoModel;\n    }\n\n    var specifiedTextOpt = labelXY ? {\n      normal: {\n        align: 'center',\n        verticalAlign: 'middle'\n      }\n    } : null; // Caveat: must be called after `setDefaultStateProxy(el);` called.\n    // because textContent will be assign with `el.stateProxy` inside.\n\n    setLabelStyle(el, getLabelStatesModels(regionModel), {\n      labelFetcher: labelFetcher,\n      labelDataIndex: query,\n      defaultText: regionName\n    }, specifiedTextOpt);\n    var textEl = el.getTextContent();\n\n    if (textEl) {\n      mapLabelRaw(textEl).ignore = textEl.ignore;\n\n      if (el.textConfig && labelXY) {\n        // Compute a relative offset based on the el bounding rect.\n        var rect = el.getBoundingRect().clone(); // Need to make sure the percent position base on the same rect in normal and\n        // emphasis state. Otherwise if using boundingRect of el, but the emphasis state\n        // has borderWidth (even 0.5px), the text position will be changed obviously\n        // if the position is very big like ['1234%', '1345%'].\n\n        el.textConfig.layoutRect = rect;\n        el.textConfig.position = [(labelXY[0] - rect.x) / rect.width * 100 + '%', (labelXY[1] - rect.y) / rect.height * 100 + '%'];\n      }\n    } // PENDING:\n    // If labelLayout is enabled (test/label-layout.html), el.dataIndex should be specified.\n    // But el.dataIndex is also used to determine whether user event should be triggered,\n    // where el.seriesIndex or el.dataModel must be specified. At present for a single el\n    // there is not case that \"only label layout enabled but user event disabled\", so here\n    // we depends `resetEventTriggerForRegion` to do the job of setting `el.dataIndex`.\n\n\n    el.disableLabelAnimation = true;\n  } else {\n    el.removeTextContent();\n    el.removeTextConfig();\n    el.disableLabelAnimation = null;\n  }\n}\n\nfunction resetEventTriggerForRegion(viewBuildCtx, eventTrigger, regionName, regionModel, mapOrGeoModel, // Exist only if `viewBuildCtx.data` exists.\ndataIdx) {\n  // setItemGraphicEl, setHoverStyle after all polygons and labels\n  // are added to the rigionGroup\n  if (viewBuildCtx.data) {\n    // FIXME: when series-map use a SVG map, and there are duplicated name specified\n    // on different SVG elements, after `data.setItemGraphicEl(...)`:\n    // (1) all of them will be mounted with `dataIndex`, `seriesIndex`, so that tooltip\n    // can be triggered only mouse hover. That's correct.\n    // (2) only the last element will be kept in `data`, so that if trigger tooltip\n    // by `dispatchAction`, only the last one can be found and triggered. That might be\n    // not correct. We will fix it in future if anyone demanding that.\n    viewBuildCtx.data.setItemGraphicEl(dataIdx, eventTrigger);\n  } // series-map will not trigger \"geoselectchange\" no matter it is\n  // based on a declared geo component. Becuause series-map will\n  // trigger \"selectchange\". If it trigger both the two events,\n  // If users call `chart.dispatchAction({type: 'toggleSelect'})`,\n  // it not easy to also fire event \"geoselectchanged\".\n  else {\n      // Package custom mouse event for geo component\n      getECData(eventTrigger).eventData = {\n        componentType: 'geo',\n        componentIndex: mapOrGeoModel.componentIndex,\n        geoIndex: mapOrGeoModel.componentIndex,\n        name: regionName,\n        region: regionModel && regionModel.option || {}\n      };\n    }\n}\n\nfunction resetTooltipForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel) {\n  if (!viewBuildCtx.data) {\n    graphic.setTooltipConfig({\n      el: el,\n      componentModel: mapOrGeoModel,\n      itemName: regionName,\n      // @ts-ignore FIXME:TS fix the \"compatible with each other\"?\n      itemTooltipOption: regionModel.get('tooltip')\n    });\n  }\n}\n\nfunction resetStateTriggerForRegion(viewBuildCtx, el, regionName, regionModel, mapOrGeoModel) {\n  // @ts-ignore FIXME:TS fix the \"compatible with each other\"?\n  el.highDownSilentOnTouch = !!mapOrGeoModel.get('selectedMode'); // @ts-ignore FIXME:TS fix the \"compatible with each other\"?\n\n  var emphasisModel = regionModel.getModel('emphasis');\n  var focus = emphasisModel.get('focus');\n  enableHoverEmphasis(el, focus, emphasisModel.get('blurScope'));\n\n  if (viewBuildCtx.isGeo) {\n    enableComponentHighDownFeatures(el, mapOrGeoModel, regionName);\n  }\n\n  return focus;\n}\n\nexport default MapDraw; // @ts-ignore FIXME:TS fix the \"compatible with each other\"?"]},"metadata":{},"sourceType":"module"}