{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport ChartView from '../../view/Chart';\nimport SunburstPiece from './SunburstPiece';\nimport DataDiffer from '../../data/DataDiffer';\nimport { ROOT_TO_NODE_ACTION } from './sunburstAction';\nimport { windowOpen } from '../../util/format';\n\nvar SunburstView =\n/** @class */\nfunction (_super) {\n  __extends(SunburstView, _super);\n\n  function SunburstView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = SunburstView.type;\n    return _this;\n  }\n\n  SunburstView.prototype.render = function (seriesModel, ecModel, api, // @ts-ignore\n  payload) {\n    var self = this;\n    this.seriesModel = seriesModel;\n    this.api = api;\n    this.ecModel = ecModel;\n    var data = seriesModel.getData();\n    var virtualRoot = data.tree.root;\n    var newRoot = seriesModel.getViewRoot();\n    var group = this.group;\n    var renderLabelForZeroData = seriesModel.get('renderLabelForZeroData');\n    var newChildren = [];\n    newRoot.eachNode(function (node) {\n      newChildren.push(node);\n    });\n    var oldChildren = this._oldChildren || [];\n    dualTravel(newChildren, oldChildren);\n    renderRollUp(virtualRoot, newRoot);\n\n    this._initEvents();\n\n    this._oldChildren = newChildren;\n\n    function dualTravel(newChildren, oldChildren) {\n      if (newChildren.length === 0 && oldChildren.length === 0) {\n        return;\n      }\n\n      new DataDiffer(oldChildren, newChildren, getKey, getKey).add(processNode).update(processNode).remove(zrUtil.curry(processNode, null)).execute();\n\n      function getKey(node) {\n        return node.getId();\n      }\n\n      function processNode(newIdx, oldIdx) {\n        var newNode = newIdx == null ? null : newChildren[newIdx];\n        var oldNode = oldIdx == null ? null : oldChildren[oldIdx];\n        doRenderNode(newNode, oldNode);\n      }\n    }\n\n    function doRenderNode(newNode, oldNode) {\n      if (!renderLabelForZeroData && newNode && !newNode.getValue()) {\n        // Not render data with value 0\n        newNode = null;\n      }\n\n      if (newNode !== virtualRoot && oldNode !== virtualRoot) {\n        if (oldNode && oldNode.piece) {\n          if (newNode) {\n            // Update\n            oldNode.piece.updateData(false, newNode, seriesModel, ecModel, api); // For tooltip\n\n            data.setItemGraphicEl(newNode.dataIndex, oldNode.piece);\n          } else {\n            // Remove\n            removeNode(oldNode);\n          }\n        } else if (newNode) {\n          // Add\n          var piece = new SunburstPiece(newNode, seriesModel, ecModel, api);\n          group.add(piece); // For tooltip\n\n          data.setItemGraphicEl(newNode.dataIndex, piece);\n        }\n      }\n    }\n\n    function removeNode(node) {\n      if (!node) {\n        return;\n      }\n\n      if (node.piece) {\n        group.remove(node.piece);\n        node.piece = null;\n      }\n    }\n\n    function renderRollUp(virtualRoot, viewRoot) {\n      if (viewRoot.depth > 0) {\n        // Render\n        if (self.virtualPiece) {\n          // Update\n          self.virtualPiece.updateData(false, virtualRoot, seriesModel, ecModel, api);\n        } else {\n          // Add\n          self.virtualPiece = new SunburstPiece(virtualRoot, seriesModel, ecModel, api);\n          group.add(self.virtualPiece);\n        } // TODO event scope\n\n\n        viewRoot.piece.off('click');\n        self.virtualPiece.on('click', function (e) {\n          self._rootToNode(viewRoot.parentNode);\n        });\n      } else if (self.virtualPiece) {\n        // Remove\n        group.remove(self.virtualPiece);\n        self.virtualPiece = null;\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  SunburstView.prototype._initEvents = function () {\n    var _this = this;\n\n    this.group.off('click');\n    this.group.on('click', function (e) {\n      var targetFound = false;\n\n      var viewRoot = _this.seriesModel.getViewRoot();\n\n      viewRoot.eachNode(function (node) {\n        if (!targetFound && node.piece && node.piece === e.target) {\n          var nodeClick = node.getModel().get('nodeClick');\n\n          if (nodeClick === 'rootToNode') {\n            _this._rootToNode(node);\n          } else if (nodeClick === 'link') {\n            var itemModel = node.getModel();\n            var link = itemModel.get('link');\n\n            if (link) {\n              var linkTarget = itemModel.get('target', true) || '_blank';\n              windowOpen(link, linkTarget);\n            }\n          }\n\n          targetFound = true;\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  SunburstView.prototype._rootToNode = function (node) {\n    if (node !== this.seriesModel.getViewRoot()) {\n      this.api.dispatchAction({\n        type: ROOT_TO_NODE_ACTION,\n        from: this.uid,\n        seriesId: this.seriesModel.id,\n        targetNode: node\n      });\n    }\n  };\n  /**\n   * @implement\n   */\n\n\n  SunburstView.prototype.containPoint = function (point, seriesModel) {\n    var treeRoot = seriesModel.getData();\n    var itemLayout = treeRoot.getItemLayout(0);\n\n    if (itemLayout) {\n      var dx = point[0] - itemLayout.cx;\n      var dy = point[1] - itemLayout.cy;\n      var radius = Math.sqrt(dx * dx + dy * dy);\n      return radius <= itemLayout.r && radius >= itemLayout.r0;\n    }\n  };\n\n  SunburstView.type = 'sunburst';\n  return SunburstView;\n}(ChartView);\n\nexport default SunburstView;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/chart/sunburst/SunburstView.js"],"names":["__extends","zrUtil","ChartView","SunburstPiece","DataDiffer","ROOT_TO_NODE_ACTION","windowOpen","SunburstView","_super","_this","apply","arguments","type","prototype","render","seriesModel","ecModel","api","payload","self","data","getData","virtualRoot","tree","root","newRoot","getViewRoot","group","renderLabelForZeroData","get","newChildren","eachNode","node","push","oldChildren","_oldChildren","dualTravel","renderRollUp","_initEvents","length","getKey","add","processNode","update","remove","curry","execute","getId","newIdx","oldIdx","newNode","oldNode","doRenderNode","getValue","piece","updateData","setItemGraphicEl","dataIndex","removeNode","viewRoot","depth","virtualPiece","off","on","e","_rootToNode","parentNode","targetFound","target","nodeClick","getModel","itemModel","link","linkTarget","dispatchAction","from","uid","seriesId","id","targetNode","containPoint","point","treeRoot","itemLayout","getItemLayout","dx","cx","dy","cy","radius","Math","sqrt","r","r0"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport ChartView from '../../view/Chart';\nimport SunburstPiece from './SunburstPiece';\nimport DataDiffer from '../../data/DataDiffer';\nimport { ROOT_TO_NODE_ACTION } from './sunburstAction';\nimport { windowOpen } from '../../util/format';\n\nvar SunburstView =\n/** @class */\nfunction (_super) {\n  __extends(SunburstView, _super);\n\n  function SunburstView() {\n    var _this = _super !== null && _super.apply(this, arguments) || this;\n\n    _this.type = SunburstView.type;\n    return _this;\n  }\n\n  SunburstView.prototype.render = function (seriesModel, ecModel, api, // @ts-ignore\n  payload) {\n    var self = this;\n    this.seriesModel = seriesModel;\n    this.api = api;\n    this.ecModel = ecModel;\n    var data = seriesModel.getData();\n    var virtualRoot = data.tree.root;\n    var newRoot = seriesModel.getViewRoot();\n    var group = this.group;\n    var renderLabelForZeroData = seriesModel.get('renderLabelForZeroData');\n    var newChildren = [];\n    newRoot.eachNode(function (node) {\n      newChildren.push(node);\n    });\n    var oldChildren = this._oldChildren || [];\n    dualTravel(newChildren, oldChildren);\n    renderRollUp(virtualRoot, newRoot);\n\n    this._initEvents();\n\n    this._oldChildren = newChildren;\n\n    function dualTravel(newChildren, oldChildren) {\n      if (newChildren.length === 0 && oldChildren.length === 0) {\n        return;\n      }\n\n      new DataDiffer(oldChildren, newChildren, getKey, getKey).add(processNode).update(processNode).remove(zrUtil.curry(processNode, null)).execute();\n\n      function getKey(node) {\n        return node.getId();\n      }\n\n      function processNode(newIdx, oldIdx) {\n        var newNode = newIdx == null ? null : newChildren[newIdx];\n        var oldNode = oldIdx == null ? null : oldChildren[oldIdx];\n        doRenderNode(newNode, oldNode);\n      }\n    }\n\n    function doRenderNode(newNode, oldNode) {\n      if (!renderLabelForZeroData && newNode && !newNode.getValue()) {\n        // Not render data with value 0\n        newNode = null;\n      }\n\n      if (newNode !== virtualRoot && oldNode !== virtualRoot) {\n        if (oldNode && oldNode.piece) {\n          if (newNode) {\n            // Update\n            oldNode.piece.updateData(false, newNode, seriesModel, ecModel, api); // For tooltip\n\n            data.setItemGraphicEl(newNode.dataIndex, oldNode.piece);\n          } else {\n            // Remove\n            removeNode(oldNode);\n          }\n        } else if (newNode) {\n          // Add\n          var piece = new SunburstPiece(newNode, seriesModel, ecModel, api);\n          group.add(piece); // For tooltip\n\n          data.setItemGraphicEl(newNode.dataIndex, piece);\n        }\n      }\n    }\n\n    function removeNode(node) {\n      if (!node) {\n        return;\n      }\n\n      if (node.piece) {\n        group.remove(node.piece);\n        node.piece = null;\n      }\n    }\n\n    function renderRollUp(virtualRoot, viewRoot) {\n      if (viewRoot.depth > 0) {\n        // Render\n        if (self.virtualPiece) {\n          // Update\n          self.virtualPiece.updateData(false, virtualRoot, seriesModel, ecModel, api);\n        } else {\n          // Add\n          self.virtualPiece = new SunburstPiece(virtualRoot, seriesModel, ecModel, api);\n          group.add(self.virtualPiece);\n        } // TODO event scope\n\n\n        viewRoot.piece.off('click');\n        self.virtualPiece.on('click', function (e) {\n          self._rootToNode(viewRoot.parentNode);\n        });\n      } else if (self.virtualPiece) {\n        // Remove\n        group.remove(self.virtualPiece);\n        self.virtualPiece = null;\n      }\n    }\n  };\n  /**\n   * @private\n   */\n\n\n  SunburstView.prototype._initEvents = function () {\n    var _this = this;\n\n    this.group.off('click');\n    this.group.on('click', function (e) {\n      var targetFound = false;\n\n      var viewRoot = _this.seriesModel.getViewRoot();\n\n      viewRoot.eachNode(function (node) {\n        if (!targetFound && node.piece && node.piece === e.target) {\n          var nodeClick = node.getModel().get('nodeClick');\n\n          if (nodeClick === 'rootToNode') {\n            _this._rootToNode(node);\n          } else if (nodeClick === 'link') {\n            var itemModel = node.getModel();\n            var link = itemModel.get('link');\n\n            if (link) {\n              var linkTarget = itemModel.get('target', true) || '_blank';\n              windowOpen(link, linkTarget);\n            }\n          }\n\n          targetFound = true;\n        }\n      });\n    });\n  };\n  /**\n   * @private\n   */\n\n\n  SunburstView.prototype._rootToNode = function (node) {\n    if (node !== this.seriesModel.getViewRoot()) {\n      this.api.dispatchAction({\n        type: ROOT_TO_NODE_ACTION,\n        from: this.uid,\n        seriesId: this.seriesModel.id,\n        targetNode: node\n      });\n    }\n  };\n  /**\n   * @implement\n   */\n\n\n  SunburstView.prototype.containPoint = function (point, seriesModel) {\n    var treeRoot = seriesModel.getData();\n    var itemLayout = treeRoot.getItemLayout(0);\n\n    if (itemLayout) {\n      var dx = point[0] - itemLayout.cx;\n      var dy = point[1] - itemLayout.cy;\n      var radius = Math.sqrt(dx * dx + dy * dy);\n      return radius <= itemLayout.r && radius >= itemLayout.r0;\n    }\n  };\n\n  SunburstView.type = 'sunburst';\n  return SunburstView;\n}(ChartView);\n\nexport default SunburstView;"]},"metadata":{},"sourceType":"module"}