{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { getTooltipMarker, encodeHTML, makeValueReadable, convertToColorString } from '../../util/format';\nimport { isString, each, hasOwn, isArray, map, assert, extend } from 'zrender/lib/core/util';\nimport { SortOrderComparator } from '../../data/helper/dataValueHelper';\nimport { getRandomIdBase } from '../../util/number';\nvar TOOLTIP_LINE_HEIGHT_CSS = 'line-height:1'; // TODO: more textStyle option\n\nfunction getTooltipTextStyle(textStyle, renderMode) {\n  var nameFontColor = textStyle.color || '#6e7079';\n  var nameFontSize = textStyle.fontSize || 12;\n  var nameFontWeight = textStyle.fontWeight || '400';\n  var valueFontColor = textStyle.color || '#464646';\n  var valueFontSize = textStyle.fontSize || 14;\n  var valueFontWeight = textStyle.fontWeight || '900';\n\n  if (renderMode === 'html') {\n    // `textStyle` is probably from user input, should be encoded to reduce security risk.\n    return {\n      // eslint-disable-next-line max-len\n      nameStyle: \"font-size:\" + encodeHTML(nameFontSize + '') + \"px;color:\" + encodeHTML(nameFontColor) + \";font-weight:\" + encodeHTML(nameFontWeight + ''),\n      // eslint-disable-next-line max-len\n      valueStyle: \"font-size:\" + encodeHTML(valueFontSize + '') + \"px;color:\" + encodeHTML(valueFontColor) + \";font-weight:\" + encodeHTML(valueFontWeight + '')\n    };\n  } else {\n    return {\n      nameStyle: {\n        fontSize: nameFontSize,\n        fill: nameFontColor,\n        fontWeight: nameFontWeight\n      },\n      valueStyle: {\n        fontSize: valueFontSize,\n        fill: valueFontColor,\n        fontWeight: valueFontWeight\n      }\n    };\n  }\n} // See `TooltipMarkupLayoutIntent['innerGapLevel']`.\n// (value from UI design)\n\n\nvar HTML_GAPS = [0, 10, 20, 30];\nvar RICH_TEXT_GAPS = ['', '\\n', '\\n\\n', '\\n\\n\\n']; // eslint-disable-next-line max-len\n\nexport function createTooltipMarkup(type, option) {\n  option.type = type;\n  return option;\n}\n\nfunction getBuilder(fragment) {\n  return hasOwn(builderMap, fragment.type) && builderMap[fragment.type];\n}\n\nvar builderMap = {\n  /**\n   * A `section` block is like:\n   * ```\n   * header\n   * subBlock\n   * subBlock\n   * ...\n   * ```\n   */\n  section: {\n    planLayout: function (fragment) {\n      var subBlockLen = fragment.blocks.length;\n      var thisBlockHasInnerGap = subBlockLen > 1 || subBlockLen > 0 && !fragment.noHeader;\n      var thisGapLevelBetweenSubBlocks = 0;\n      each(fragment.blocks, function (subBlock) {\n        getBuilder(subBlock).planLayout(subBlock);\n        var subGapLevel = subBlock.__gapLevelBetweenSubBlocks; // If the some of the sub-blocks have some gaps (like 10px) inside, this block\n        // should use a larger gap (like 20px) to distinguish those sub-blocks.\n\n        if (subGapLevel >= thisGapLevelBetweenSubBlocks) {\n          thisGapLevelBetweenSubBlocks = subGapLevel + (thisBlockHasInnerGap && ( // 0 always can not be readable gap level.\n          !subGapLevel // If no header, always keep the sub gap level. Otherwise\n          // look weird in case `multipleSeries`.\n          || subBlock.type === 'section' && !subBlock.noHeader) ? 1 : 0);\n        }\n      });\n      fragment.__gapLevelBetweenSubBlocks = thisGapLevelBetweenSubBlocks;\n    },\n    build: function (ctx, fragment, topMarginForOuterGap, toolTipTextStyle) {\n      var noHeader = fragment.noHeader;\n      var gaps = getGap(fragment);\n      var subMarkupText = buildSubBlocks(ctx, fragment, noHeader ? topMarginForOuterGap : gaps.html, toolTipTextStyle);\n\n      if (noHeader) {\n        return subMarkupText;\n      }\n\n      var displayableHeader = makeValueReadable(fragment.header, 'ordinal', ctx.useUTC);\n      var nameStyle = getTooltipTextStyle(toolTipTextStyle, ctx.renderMode).nameStyle;\n\n      if (ctx.renderMode === 'richText') {\n        return wrapInlineNameRichText(ctx, displayableHeader, nameStyle) + gaps.richText + subMarkupText;\n      } else {\n        return wrapBlockHTML(\"<div style=\\\"\" + nameStyle + \";\" + TOOLTIP_LINE_HEIGHT_CSS + \";\\\">\" + encodeHTML(displayableHeader) + '</div>' + subMarkupText, topMarginForOuterGap);\n      }\n    }\n  },\n\n  /**\n   * A `nameValue` block is like:\n   * ```\n   * marker  name  value\n   * ```\n   */\n  nameValue: {\n    planLayout: function (fragment) {\n      fragment.__gapLevelBetweenSubBlocks = 0;\n    },\n    build: function (ctx, fragment, topMarginForOuterGap, toolTipTextStyle) {\n      var renderMode = ctx.renderMode;\n      var noName = fragment.noName;\n      var noValue = fragment.noValue;\n      var noMarker = !fragment.markerType;\n      var name = fragment.name;\n      var value = fragment.value;\n      var useUTC = ctx.useUTC;\n\n      if (noName && noValue) {\n        return;\n      }\n\n      var markerStr = noMarker ? '' : ctx.markupStyleCreator.makeTooltipMarker(fragment.markerType, fragment.markerColor || '#333', renderMode);\n      var readableName = noName ? '' : makeValueReadable(name, 'ordinal', useUTC);\n      var valueTypeOption = fragment.valueType;\n      var readableValueList = noValue ? [] : isArray(value) ? map(value, function (val, idx) {\n        return makeValueReadable(val, isArray(valueTypeOption) ? valueTypeOption[idx] : valueTypeOption, useUTC);\n      }) : [makeValueReadable(value, isArray(valueTypeOption) ? valueTypeOption[0] : valueTypeOption, useUTC)];\n      var valueAlignRight = !noMarker || !noName; // It little weird if only value next to marker but far from marker.\n\n      var valueCloseToMarker = !noMarker && noName;\n\n      var _a = getTooltipTextStyle(toolTipTextStyle, renderMode),\n          nameStyle = _a.nameStyle,\n          valueStyle = _a.valueStyle;\n\n      return renderMode === 'richText' ? (noMarker ? '' : markerStr) + (noName ? '' : wrapInlineNameRichText(ctx, readableName, nameStyle)) // Value has commas inside, so use ' ' as delimiter for multiple values.\n      + (noValue ? '' : wrapInlineValueRichText(ctx, readableValueList, valueAlignRight, valueCloseToMarker, valueStyle)) : wrapBlockHTML((noMarker ? '' : markerStr) + (noName ? '' : wrapInlineNameHTML(readableName, !noMarker, nameStyle)) + (noValue ? '' : wrapInlineValueHTML(readableValueList, valueAlignRight, valueCloseToMarker, valueStyle)), topMarginForOuterGap);\n    }\n  }\n};\n\nfunction buildSubBlocks(ctx, fragment, topMarginForOuterGap, tooltipTextStyle) {\n  var subMarkupTextList = [];\n  var subBlocks = fragment.blocks || [];\n  assert(!subBlocks || isArray(subBlocks));\n  subBlocks = subBlocks || [];\n  var orderMode = ctx.orderMode;\n\n  if (fragment.sortBlocks && orderMode) {\n    subBlocks = subBlocks.slice();\n    var orderMap = {\n      valueAsc: 'asc',\n      valueDesc: 'desc'\n    };\n\n    if (hasOwn(orderMap, orderMode)) {\n      var comparator_1 = new SortOrderComparator(orderMap[orderMode], null);\n      subBlocks.sort(function (a, b) {\n        return comparator_1.evaluate(a.sortParam, b.sortParam);\n      });\n    } // FIXME 'seriesDesc' necessary?\n    else if (orderMode === 'seriesDesc') {\n      subBlocks.reverse();\n    }\n  }\n\n  var gaps = getGap(fragment);\n  each(subBlocks, function (subBlock, idx) {\n    var subMarkupText = getBuilder(subBlock).build(ctx, subBlock, idx > 0 ? gaps.html : 0, tooltipTextStyle);\n    subMarkupText != null && subMarkupTextList.push(subMarkupText);\n  });\n\n  if (!subMarkupTextList.length) {\n    return;\n  }\n\n  return ctx.renderMode === 'richText' ? subMarkupTextList.join(gaps.richText) : wrapBlockHTML(subMarkupTextList.join(''), topMarginForOuterGap);\n}\n/**\n * @return markupText. null/undefined means no content.\n */\n\n\nexport function buildTooltipMarkup(fragment, markupStyleCreator, renderMode, orderMode, useUTC, toolTipTextStyle) {\n  if (!fragment) {\n    return;\n  }\n\n  var builder = getBuilder(fragment);\n  builder.planLayout(fragment);\n  var ctx = {\n    useUTC: useUTC,\n    renderMode: renderMode,\n    orderMode: orderMode,\n    markupStyleCreator: markupStyleCreator\n  };\n  return builder.build(ctx, fragment, 0, toolTipTextStyle);\n}\n\nfunction getGap(fragment) {\n  var gapLevelBetweenSubBlocks = fragment.__gapLevelBetweenSubBlocks;\n  return {\n    html: HTML_GAPS[gapLevelBetweenSubBlocks],\n    richText: RICH_TEXT_GAPS[gapLevelBetweenSubBlocks]\n  };\n}\n\nfunction wrapBlockHTML(encodedContent, topGap) {\n  var clearfix = '<div style=\"clear:both\"></div>';\n  var marginCSS = \"margin: \" + topGap + \"px 0 0\";\n  return \"<div style=\\\"\" + marginCSS + \";\" + TOOLTIP_LINE_HEIGHT_CSS + \";\\\">\" + encodedContent + clearfix + '</div>';\n}\n\nfunction wrapInlineNameHTML(name, leftHasMarker, style) {\n  var marginCss = leftHasMarker ? 'margin-left:2px' : '';\n  return \"<span style=\\\"\" + style + \";\" + marginCss + \"\\\">\" + encodeHTML(name) + '</span>';\n}\n\nfunction wrapInlineValueHTML(valueList, alignRight, valueCloseToMarker, style) {\n  // Do not too close to marker, considering there are multiple values separated by spaces.\n  var paddingStr = valueCloseToMarker ? '10px' : '20px';\n  var alignCSS = alignRight ? \"float:right;margin-left:\" + paddingStr : '';\n  return \"<span style=\\\"\" + alignCSS + \";\" + style + \"\\\">\" // Value has commas inside, so use '  ' as delimiter for multiple values.\n  + map(valueList, function (value) {\n    return encodeHTML(value);\n  }).join('&nbsp;&nbsp;') + '</span>';\n}\n\nfunction wrapInlineNameRichText(ctx, name, style) {\n  return ctx.markupStyleCreator.wrapRichTextStyle(name, style);\n}\n\nfunction wrapInlineValueRichText(ctx, valueList, alignRight, valueCloseToMarker, style) {\n  var styles = [style];\n  var paddingLeft = valueCloseToMarker ? 10 : 20;\n  alignRight && styles.push({\n    padding: [0, 0, 0, paddingLeft],\n    align: 'right'\n  }); // Value has commas inside, so use '  ' as delimiter for multiple values.\n\n  return ctx.markupStyleCreator.wrapRichTextStyle(valueList.join('  '), styles);\n}\n\nexport function retrieveVisualColorForTooltipMarker(series, dataIndex) {\n  var style = series.getData().getItemVisual(dataIndex, 'style');\n  var color = style[series.visualDrawType];\n  return convertToColorString(color);\n}\nexport function getPaddingFromTooltipModel(model, renderMode) {\n  var padding = model.get('padding');\n  return padding != null ? padding // We give slightly different to look pretty.\n  : renderMode === 'richText' ? [8, 10] : 10;\n}\n/**\n * The major feature is generate styles for `renderMode: 'richText'`.\n * But it also serves `renderMode: 'html'` to provide\n * \"renderMode-independent\" API.\n */\n\nvar TooltipMarkupStyleCreator =\n/** @class */\nfunction () {\n  function TooltipMarkupStyleCreator() {\n    this.richTextStyles = {}; // Notice that \"generate a style name\" usuall happens repeatly when mouse moving and\n    // displaying a tooltip. So we put the `_nextStyleNameId` as a member of each creator\n    // rather than static shared by all creators (which will cause it increase to fast).\n\n    this._nextStyleNameId = getRandomIdBase();\n  }\n\n  TooltipMarkupStyleCreator.prototype._generateStyleName = function () {\n    return '__EC_aUTo_' + this._nextStyleNameId++;\n  };\n\n  TooltipMarkupStyleCreator.prototype.makeTooltipMarker = function (markerType, colorStr, renderMode) {\n    var markerId = renderMode === 'richText' ? this._generateStyleName() : null;\n    var marker = getTooltipMarker({\n      color: colorStr,\n      type: markerType,\n      renderMode: renderMode,\n      markerId: markerId\n    });\n\n    if (isString(marker)) {\n      return marker;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        assert(markerId);\n      }\n\n      this.richTextStyles[markerId] = marker.style;\n      return marker.content;\n    }\n  };\n  /**\n   * @usage\n   * ```ts\n   * const styledText = markupStyleCreator.wrapRichTextStyle([\n   *     // The styles will be auto merged.\n   *     {\n   *         fontSize: 12,\n   *         color: 'blue'\n   *     },\n   *     {\n   *         padding: 20\n   *     }\n   * ]);\n   * ```\n   */\n\n\n  TooltipMarkupStyleCreator.prototype.wrapRichTextStyle = function (text, styles) {\n    var finalStl = {};\n\n    if (isArray(styles)) {\n      each(styles, function (stl) {\n        return extend(finalStl, stl);\n      });\n    } else {\n      extend(finalStl, styles);\n    }\n\n    var styleName = this._generateStyleName();\n\n    this.richTextStyles[styleName] = finalStl;\n    return \"{\" + styleName + \"|\" + text + \"}\";\n  };\n\n  return TooltipMarkupStyleCreator;\n}();\n\nexport { TooltipMarkupStyleCreator };","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/component/tooltip/tooltipMarkup.js"],"names":["getTooltipMarker","encodeHTML","makeValueReadable","convertToColorString","isString","each","hasOwn","isArray","map","assert","extend","SortOrderComparator","getRandomIdBase","TOOLTIP_LINE_HEIGHT_CSS","getTooltipTextStyle","textStyle","renderMode","nameFontColor","color","nameFontSize","fontSize","nameFontWeight","fontWeight","valueFontColor","valueFontSize","valueFontWeight","nameStyle","valueStyle","fill","HTML_GAPS","RICH_TEXT_GAPS","createTooltipMarkup","type","option","getBuilder","fragment","builderMap","section","planLayout","subBlockLen","blocks","length","thisBlockHasInnerGap","noHeader","thisGapLevelBetweenSubBlocks","subBlock","subGapLevel","__gapLevelBetweenSubBlocks","build","ctx","topMarginForOuterGap","toolTipTextStyle","gaps","getGap","subMarkupText","buildSubBlocks","html","displayableHeader","header","useUTC","wrapInlineNameRichText","richText","wrapBlockHTML","nameValue","noName","noValue","noMarker","markerType","name","value","markerStr","markupStyleCreator","makeTooltipMarker","markerColor","readableName","valueTypeOption","valueType","readableValueList","val","idx","valueAlignRight","valueCloseToMarker","_a","wrapInlineValueRichText","wrapInlineNameHTML","wrapInlineValueHTML","tooltipTextStyle","subMarkupTextList","subBlocks","orderMode","sortBlocks","slice","orderMap","valueAsc","valueDesc","comparator_1","sort","a","b","evaluate","sortParam","reverse","push","join","buildTooltipMarkup","builder","gapLevelBetweenSubBlocks","encodedContent","topGap","clearfix","marginCSS","leftHasMarker","style","marginCss","valueList","alignRight","paddingStr","alignCSS","wrapRichTextStyle","styles","paddingLeft","padding","align","retrieveVisualColorForTooltipMarker","series","dataIndex","getData","getItemVisual","visualDrawType","getPaddingFromTooltipModel","model","get","TooltipMarkupStyleCreator","richTextStyles","_nextStyleNameId","prototype","_generateStyleName","colorStr","markerId","marker","process","env","NODE_ENV","content","text","finalStl","stl","styleName"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { getTooltipMarker, encodeHTML, makeValueReadable, convertToColorString } from '../../util/format';\nimport { isString, each, hasOwn, isArray, map, assert, extend } from 'zrender/lib/core/util';\nimport { SortOrderComparator } from '../../data/helper/dataValueHelper';\nimport { getRandomIdBase } from '../../util/number';\nvar TOOLTIP_LINE_HEIGHT_CSS = 'line-height:1'; // TODO: more textStyle option\n\nfunction getTooltipTextStyle(textStyle, renderMode) {\n  var nameFontColor = textStyle.color || '#6e7079';\n  var nameFontSize = textStyle.fontSize || 12;\n  var nameFontWeight = textStyle.fontWeight || '400';\n  var valueFontColor = textStyle.color || '#464646';\n  var valueFontSize = textStyle.fontSize || 14;\n  var valueFontWeight = textStyle.fontWeight || '900';\n\n  if (renderMode === 'html') {\n    // `textStyle` is probably from user input, should be encoded to reduce security risk.\n    return {\n      // eslint-disable-next-line max-len\n      nameStyle: \"font-size:\" + encodeHTML(nameFontSize + '') + \"px;color:\" + encodeHTML(nameFontColor) + \";font-weight:\" + encodeHTML(nameFontWeight + ''),\n      // eslint-disable-next-line max-len\n      valueStyle: \"font-size:\" + encodeHTML(valueFontSize + '') + \"px;color:\" + encodeHTML(valueFontColor) + \";font-weight:\" + encodeHTML(valueFontWeight + '')\n    };\n  } else {\n    return {\n      nameStyle: {\n        fontSize: nameFontSize,\n        fill: nameFontColor,\n        fontWeight: nameFontWeight\n      },\n      valueStyle: {\n        fontSize: valueFontSize,\n        fill: valueFontColor,\n        fontWeight: valueFontWeight\n      }\n    };\n  }\n} // See `TooltipMarkupLayoutIntent['innerGapLevel']`.\n// (value from UI design)\n\n\nvar HTML_GAPS = [0, 10, 20, 30];\nvar RICH_TEXT_GAPS = ['', '\\n', '\\n\\n', '\\n\\n\\n']; // eslint-disable-next-line max-len\n\nexport function createTooltipMarkup(type, option) {\n  option.type = type;\n  return option;\n}\n\nfunction getBuilder(fragment) {\n  return hasOwn(builderMap, fragment.type) && builderMap[fragment.type];\n}\n\nvar builderMap = {\n  /**\n   * A `section` block is like:\n   * ```\n   * header\n   * subBlock\n   * subBlock\n   * ...\n   * ```\n   */\n  section: {\n    planLayout: function (fragment) {\n      var subBlockLen = fragment.blocks.length;\n      var thisBlockHasInnerGap = subBlockLen > 1 || subBlockLen > 0 && !fragment.noHeader;\n      var thisGapLevelBetweenSubBlocks = 0;\n      each(fragment.blocks, function (subBlock) {\n        getBuilder(subBlock).planLayout(subBlock);\n        var subGapLevel = subBlock.__gapLevelBetweenSubBlocks; // If the some of the sub-blocks have some gaps (like 10px) inside, this block\n        // should use a larger gap (like 20px) to distinguish those sub-blocks.\n\n        if (subGapLevel >= thisGapLevelBetweenSubBlocks) {\n          thisGapLevelBetweenSubBlocks = subGapLevel + (thisBlockHasInnerGap && ( // 0 always can not be readable gap level.\n          !subGapLevel // If no header, always keep the sub gap level. Otherwise\n          // look weird in case `multipleSeries`.\n          || subBlock.type === 'section' && !subBlock.noHeader) ? 1 : 0);\n        }\n      });\n      fragment.__gapLevelBetweenSubBlocks = thisGapLevelBetweenSubBlocks;\n    },\n    build: function (ctx, fragment, topMarginForOuterGap, toolTipTextStyle) {\n      var noHeader = fragment.noHeader;\n      var gaps = getGap(fragment);\n      var subMarkupText = buildSubBlocks(ctx, fragment, noHeader ? topMarginForOuterGap : gaps.html, toolTipTextStyle);\n\n      if (noHeader) {\n        return subMarkupText;\n      }\n\n      var displayableHeader = makeValueReadable(fragment.header, 'ordinal', ctx.useUTC);\n      var nameStyle = getTooltipTextStyle(toolTipTextStyle, ctx.renderMode).nameStyle;\n\n      if (ctx.renderMode === 'richText') {\n        return wrapInlineNameRichText(ctx, displayableHeader, nameStyle) + gaps.richText + subMarkupText;\n      } else {\n        return wrapBlockHTML(\"<div style=\\\"\" + nameStyle + \";\" + TOOLTIP_LINE_HEIGHT_CSS + \";\\\">\" + encodeHTML(displayableHeader) + '</div>' + subMarkupText, topMarginForOuterGap);\n      }\n    }\n  },\n\n  /**\n   * A `nameValue` block is like:\n   * ```\n   * marker  name  value\n   * ```\n   */\n  nameValue: {\n    planLayout: function (fragment) {\n      fragment.__gapLevelBetweenSubBlocks = 0;\n    },\n    build: function (ctx, fragment, topMarginForOuterGap, toolTipTextStyle) {\n      var renderMode = ctx.renderMode;\n      var noName = fragment.noName;\n      var noValue = fragment.noValue;\n      var noMarker = !fragment.markerType;\n      var name = fragment.name;\n      var value = fragment.value;\n      var useUTC = ctx.useUTC;\n\n      if (noName && noValue) {\n        return;\n      }\n\n      var markerStr = noMarker ? '' : ctx.markupStyleCreator.makeTooltipMarker(fragment.markerType, fragment.markerColor || '#333', renderMode);\n      var readableName = noName ? '' : makeValueReadable(name, 'ordinal', useUTC);\n      var valueTypeOption = fragment.valueType;\n      var readableValueList = noValue ? [] : isArray(value) ? map(value, function (val, idx) {\n        return makeValueReadable(val, isArray(valueTypeOption) ? valueTypeOption[idx] : valueTypeOption, useUTC);\n      }) : [makeValueReadable(value, isArray(valueTypeOption) ? valueTypeOption[0] : valueTypeOption, useUTC)];\n      var valueAlignRight = !noMarker || !noName; // It little weird if only value next to marker but far from marker.\n\n      var valueCloseToMarker = !noMarker && noName;\n\n      var _a = getTooltipTextStyle(toolTipTextStyle, renderMode),\n          nameStyle = _a.nameStyle,\n          valueStyle = _a.valueStyle;\n\n      return renderMode === 'richText' ? (noMarker ? '' : markerStr) + (noName ? '' : wrapInlineNameRichText(ctx, readableName, nameStyle)) // Value has commas inside, so use ' ' as delimiter for multiple values.\n      + (noValue ? '' : wrapInlineValueRichText(ctx, readableValueList, valueAlignRight, valueCloseToMarker, valueStyle)) : wrapBlockHTML((noMarker ? '' : markerStr) + (noName ? '' : wrapInlineNameHTML(readableName, !noMarker, nameStyle)) + (noValue ? '' : wrapInlineValueHTML(readableValueList, valueAlignRight, valueCloseToMarker, valueStyle)), topMarginForOuterGap);\n    }\n  }\n};\n\nfunction buildSubBlocks(ctx, fragment, topMarginForOuterGap, tooltipTextStyle) {\n  var subMarkupTextList = [];\n  var subBlocks = fragment.blocks || [];\n  assert(!subBlocks || isArray(subBlocks));\n  subBlocks = subBlocks || [];\n  var orderMode = ctx.orderMode;\n\n  if (fragment.sortBlocks && orderMode) {\n    subBlocks = subBlocks.slice();\n    var orderMap = {\n      valueAsc: 'asc',\n      valueDesc: 'desc'\n    };\n\n    if (hasOwn(orderMap, orderMode)) {\n      var comparator_1 = new SortOrderComparator(orderMap[orderMode], null);\n      subBlocks.sort(function (a, b) {\n        return comparator_1.evaluate(a.sortParam, b.sortParam);\n      });\n    } // FIXME 'seriesDesc' necessary?\n    else if (orderMode === 'seriesDesc') {\n        subBlocks.reverse();\n      }\n  }\n\n  var gaps = getGap(fragment);\n  each(subBlocks, function (subBlock, idx) {\n    var subMarkupText = getBuilder(subBlock).build(ctx, subBlock, idx > 0 ? gaps.html : 0, tooltipTextStyle);\n    subMarkupText != null && subMarkupTextList.push(subMarkupText);\n  });\n\n  if (!subMarkupTextList.length) {\n    return;\n  }\n\n  return ctx.renderMode === 'richText' ? subMarkupTextList.join(gaps.richText) : wrapBlockHTML(subMarkupTextList.join(''), topMarginForOuterGap);\n}\n/**\n * @return markupText. null/undefined means no content.\n */\n\n\nexport function buildTooltipMarkup(fragment, markupStyleCreator, renderMode, orderMode, useUTC, toolTipTextStyle) {\n  if (!fragment) {\n    return;\n  }\n\n  var builder = getBuilder(fragment);\n  builder.planLayout(fragment);\n  var ctx = {\n    useUTC: useUTC,\n    renderMode: renderMode,\n    orderMode: orderMode,\n    markupStyleCreator: markupStyleCreator\n  };\n  return builder.build(ctx, fragment, 0, toolTipTextStyle);\n}\n\nfunction getGap(fragment) {\n  var gapLevelBetweenSubBlocks = fragment.__gapLevelBetweenSubBlocks;\n  return {\n    html: HTML_GAPS[gapLevelBetweenSubBlocks],\n    richText: RICH_TEXT_GAPS[gapLevelBetweenSubBlocks]\n  };\n}\n\nfunction wrapBlockHTML(encodedContent, topGap) {\n  var clearfix = '<div style=\"clear:both\"></div>';\n  var marginCSS = \"margin: \" + topGap + \"px 0 0\";\n  return \"<div style=\\\"\" + marginCSS + \";\" + TOOLTIP_LINE_HEIGHT_CSS + \";\\\">\" + encodedContent + clearfix + '</div>';\n}\n\nfunction wrapInlineNameHTML(name, leftHasMarker, style) {\n  var marginCss = leftHasMarker ? 'margin-left:2px' : '';\n  return \"<span style=\\\"\" + style + \";\" + marginCss + \"\\\">\" + encodeHTML(name) + '</span>';\n}\n\nfunction wrapInlineValueHTML(valueList, alignRight, valueCloseToMarker, style) {\n  // Do not too close to marker, considering there are multiple values separated by spaces.\n  var paddingStr = valueCloseToMarker ? '10px' : '20px';\n  var alignCSS = alignRight ? \"float:right;margin-left:\" + paddingStr : '';\n  return \"<span style=\\\"\" + alignCSS + \";\" + style + \"\\\">\" // Value has commas inside, so use '  ' as delimiter for multiple values.\n  + map(valueList, function (value) {\n    return encodeHTML(value);\n  }).join('&nbsp;&nbsp;') + '</span>';\n}\n\nfunction wrapInlineNameRichText(ctx, name, style) {\n  return ctx.markupStyleCreator.wrapRichTextStyle(name, style);\n}\n\nfunction wrapInlineValueRichText(ctx, valueList, alignRight, valueCloseToMarker, style) {\n  var styles = [style];\n  var paddingLeft = valueCloseToMarker ? 10 : 20;\n  alignRight && styles.push({\n    padding: [0, 0, 0, paddingLeft],\n    align: 'right'\n  }); // Value has commas inside, so use '  ' as delimiter for multiple values.\n\n  return ctx.markupStyleCreator.wrapRichTextStyle(valueList.join('  '), styles);\n}\n\nexport function retrieveVisualColorForTooltipMarker(series, dataIndex) {\n  var style = series.getData().getItemVisual(dataIndex, 'style');\n  var color = style[series.visualDrawType];\n  return convertToColorString(color);\n}\nexport function getPaddingFromTooltipModel(model, renderMode) {\n  var padding = model.get('padding');\n  return padding != null ? padding // We give slightly different to look pretty.\n  : renderMode === 'richText' ? [8, 10] : 10;\n}\n/**\n * The major feature is generate styles for `renderMode: 'richText'`.\n * But it also serves `renderMode: 'html'` to provide\n * \"renderMode-independent\" API.\n */\n\nvar TooltipMarkupStyleCreator =\n/** @class */\nfunction () {\n  function TooltipMarkupStyleCreator() {\n    this.richTextStyles = {}; // Notice that \"generate a style name\" usuall happens repeatly when mouse moving and\n    // displaying a tooltip. So we put the `_nextStyleNameId` as a member of each creator\n    // rather than static shared by all creators (which will cause it increase to fast).\n\n    this._nextStyleNameId = getRandomIdBase();\n  }\n\n  TooltipMarkupStyleCreator.prototype._generateStyleName = function () {\n    return '__EC_aUTo_' + this._nextStyleNameId++;\n  };\n\n  TooltipMarkupStyleCreator.prototype.makeTooltipMarker = function (markerType, colorStr, renderMode) {\n    var markerId = renderMode === 'richText' ? this._generateStyleName() : null;\n    var marker = getTooltipMarker({\n      color: colorStr,\n      type: markerType,\n      renderMode: renderMode,\n      markerId: markerId\n    });\n\n    if (isString(marker)) {\n      return marker;\n    } else {\n      if (process.env.NODE_ENV !== 'production') {\n        assert(markerId);\n      }\n\n      this.richTextStyles[markerId] = marker.style;\n      return marker.content;\n    }\n  };\n  /**\n   * @usage\n   * ```ts\n   * const styledText = markupStyleCreator.wrapRichTextStyle([\n   *     // The styles will be auto merged.\n   *     {\n   *         fontSize: 12,\n   *         color: 'blue'\n   *     },\n   *     {\n   *         padding: 20\n   *     }\n   * ]);\n   * ```\n   */\n\n\n  TooltipMarkupStyleCreator.prototype.wrapRichTextStyle = function (text, styles) {\n    var finalStl = {};\n\n    if (isArray(styles)) {\n      each(styles, function (stl) {\n        return extend(finalStl, stl);\n      });\n    } else {\n      extend(finalStl, styles);\n    }\n\n    var styleName = this._generateStyleName();\n\n    this.richTextStyles[styleName] = finalStl;\n    return \"{\" + styleName + \"|\" + text + \"}\";\n  };\n\n  return TooltipMarkupStyleCreator;\n}();\n\nexport { TooltipMarkupStyleCreator };"]},"metadata":{},"sourceType":"module"}