{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { eachAfter, eachBefore } from './traversalHelper';\nimport { init, firstWalk, secondWalk, separation as sep, radialCoordinate, getViewRect } from './layoutHelper';\nexport default function treeLayout(ecModel, api) {\n  ecModel.eachSeriesByType('tree', function (seriesModel) {\n    commonLayout(seriesModel, api);\n  });\n}\n\nfunction commonLayout(seriesModel, api) {\n  var layoutInfo = getViewRect(seriesModel, api);\n  seriesModel.layoutInfo = layoutInfo;\n  var layout = seriesModel.get('layout');\n  var width = 0;\n  var height = 0;\n  var separation = null;\n\n  if (layout === 'radial') {\n    width = 2 * Math.PI;\n    height = Math.min(layoutInfo.height, layoutInfo.width) / 2;\n    separation = sep(function (node1, node2) {\n      return (node1.parentNode === node2.parentNode ? 1 : 2) / node1.depth;\n    });\n  } else {\n    width = layoutInfo.width;\n    height = layoutInfo.height;\n    separation = sep();\n  }\n\n  var virtualRoot = seriesModel.getData().tree.root;\n  var realRoot = virtualRoot.children[0];\n\n  if (realRoot) {\n    init(virtualRoot);\n    eachAfter(realRoot, firstWalk, separation);\n    virtualRoot.hierNode.modifier = -realRoot.hierNode.prelim;\n    eachBefore(realRoot, secondWalk);\n    var left_1 = realRoot;\n    var right_1 = realRoot;\n    var bottom_1 = realRoot;\n    eachBefore(realRoot, function (node) {\n      var x = node.getLayout().x;\n\n      if (x < left_1.getLayout().x) {\n        left_1 = node;\n      }\n\n      if (x > right_1.getLayout().x) {\n        right_1 = node;\n      }\n\n      if (node.depth > bottom_1.depth) {\n        bottom_1 = node;\n      }\n    });\n    var delta = left_1 === right_1 ? 1 : separation(left_1, right_1) / 2;\n    var tx_1 = delta - left_1.getLayout().x;\n    var kx_1 = 0;\n    var ky_1 = 0;\n    var coorX_1 = 0;\n    var coorY_1 = 0;\n\n    if (layout === 'radial') {\n      kx_1 = width / (right_1.getLayout().x + delta + tx_1); // here we use (node.depth - 1), bucause the real root's depth is 1\n\n      ky_1 = height / (bottom_1.depth - 1 || 1);\n      eachBefore(realRoot, function (node) {\n        coorX_1 = (node.getLayout().x + tx_1) * kx_1;\n        coorY_1 = (node.depth - 1) * ky_1;\n        var finalCoor = radialCoordinate(coorX_1, coorY_1);\n        node.setLayout({\n          x: finalCoor.x,\n          y: finalCoor.y,\n          rawX: coorX_1,\n          rawY: coorY_1\n        }, true);\n      });\n    } else {\n      var orient_1 = seriesModel.getOrient();\n\n      if (orient_1 === 'RL' || orient_1 === 'LR') {\n        ky_1 = height / (right_1.getLayout().x + delta + tx_1);\n        kx_1 = width / (bottom_1.depth - 1 || 1);\n        eachBefore(realRoot, function (node) {\n          coorY_1 = (node.getLayout().x + tx_1) * ky_1;\n          coorX_1 = orient_1 === 'LR' ? (node.depth - 1) * kx_1 : width - (node.depth - 1) * kx_1;\n          node.setLayout({\n            x: coorX_1,\n            y: coorY_1\n          }, true);\n        });\n      } else if (orient_1 === 'TB' || orient_1 === 'BT') {\n        kx_1 = width / (right_1.getLayout().x + delta + tx_1);\n        ky_1 = height / (bottom_1.depth - 1 || 1);\n        eachBefore(realRoot, function (node) {\n          coorX_1 = (node.getLayout().x + tx_1) * kx_1;\n          coorY_1 = orient_1 === 'TB' ? (node.depth - 1) * ky_1 : height - (node.depth - 1) * ky_1;\n          node.setLayout({\n            x: coorX_1,\n            y: coorY_1\n          }, true);\n        });\n      }\n    }\n  }\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/chart/tree/treeLayout.js"],"names":["eachAfter","eachBefore","init","firstWalk","secondWalk","separation","sep","radialCoordinate","getViewRect","treeLayout","ecModel","api","eachSeriesByType","seriesModel","commonLayout","layoutInfo","layout","get","width","height","Math","PI","min","node1","node2","parentNode","depth","virtualRoot","getData","tree","root","realRoot","children","hierNode","modifier","prelim","left_1","right_1","bottom_1","node","x","getLayout","delta","tx_1","kx_1","ky_1","coorX_1","coorY_1","finalCoor","setLayout","y","rawX","rawY","orient_1","getOrient"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { eachAfter, eachBefore } from './traversalHelper';\nimport { init, firstWalk, secondWalk, separation as sep, radialCoordinate, getViewRect } from './layoutHelper';\nexport default function treeLayout(ecModel, api) {\n  ecModel.eachSeriesByType('tree', function (seriesModel) {\n    commonLayout(seriesModel, api);\n  });\n}\n\nfunction commonLayout(seriesModel, api) {\n  var layoutInfo = getViewRect(seriesModel, api);\n  seriesModel.layoutInfo = layoutInfo;\n  var layout = seriesModel.get('layout');\n  var width = 0;\n  var height = 0;\n  var separation = null;\n\n  if (layout === 'radial') {\n    width = 2 * Math.PI;\n    height = Math.min(layoutInfo.height, layoutInfo.width) / 2;\n    separation = sep(function (node1, node2) {\n      return (node1.parentNode === node2.parentNode ? 1 : 2) / node1.depth;\n    });\n  } else {\n    width = layoutInfo.width;\n    height = layoutInfo.height;\n    separation = sep();\n  }\n\n  var virtualRoot = seriesModel.getData().tree.root;\n  var realRoot = virtualRoot.children[0];\n\n  if (realRoot) {\n    init(virtualRoot);\n    eachAfter(realRoot, firstWalk, separation);\n    virtualRoot.hierNode.modifier = -realRoot.hierNode.prelim;\n    eachBefore(realRoot, secondWalk);\n    var left_1 = realRoot;\n    var right_1 = realRoot;\n    var bottom_1 = realRoot;\n    eachBefore(realRoot, function (node) {\n      var x = node.getLayout().x;\n\n      if (x < left_1.getLayout().x) {\n        left_1 = node;\n      }\n\n      if (x > right_1.getLayout().x) {\n        right_1 = node;\n      }\n\n      if (node.depth > bottom_1.depth) {\n        bottom_1 = node;\n      }\n    });\n    var delta = left_1 === right_1 ? 1 : separation(left_1, right_1) / 2;\n    var tx_1 = delta - left_1.getLayout().x;\n    var kx_1 = 0;\n    var ky_1 = 0;\n    var coorX_1 = 0;\n    var coorY_1 = 0;\n\n    if (layout === 'radial') {\n      kx_1 = width / (right_1.getLayout().x + delta + tx_1); // here we use (node.depth - 1), bucause the real root's depth is 1\n\n      ky_1 = height / (bottom_1.depth - 1 || 1);\n      eachBefore(realRoot, function (node) {\n        coorX_1 = (node.getLayout().x + tx_1) * kx_1;\n        coorY_1 = (node.depth - 1) * ky_1;\n        var finalCoor = radialCoordinate(coorX_1, coorY_1);\n        node.setLayout({\n          x: finalCoor.x,\n          y: finalCoor.y,\n          rawX: coorX_1,\n          rawY: coorY_1\n        }, true);\n      });\n    } else {\n      var orient_1 = seriesModel.getOrient();\n\n      if (orient_1 === 'RL' || orient_1 === 'LR') {\n        ky_1 = height / (right_1.getLayout().x + delta + tx_1);\n        kx_1 = width / (bottom_1.depth - 1 || 1);\n        eachBefore(realRoot, function (node) {\n          coorY_1 = (node.getLayout().x + tx_1) * ky_1;\n          coorX_1 = orient_1 === 'LR' ? (node.depth - 1) * kx_1 : width - (node.depth - 1) * kx_1;\n          node.setLayout({\n            x: coorX_1,\n            y: coorY_1\n          }, true);\n        });\n      } else if (orient_1 === 'TB' || orient_1 === 'BT') {\n        kx_1 = width / (right_1.getLayout().x + delta + tx_1);\n        ky_1 = height / (bottom_1.depth - 1 || 1);\n        eachBefore(realRoot, function (node) {\n          coorX_1 = (node.getLayout().x + tx_1) * kx_1;\n          coorY_1 = orient_1 === 'TB' ? (node.depth - 1) * ky_1 : height - (node.depth - 1) * ky_1;\n          node.setLayout({\n            x: coorX_1,\n            y: coorY_1\n          }, true);\n        });\n      }\n    }\n  }\n}"]},"metadata":{},"sourceType":"module"}