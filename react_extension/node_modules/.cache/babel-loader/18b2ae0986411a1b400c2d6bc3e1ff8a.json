{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as numberUtil from '../util/number';\nvar roundNumber = numberUtil.round;\n/**\n * @param extent Both extent[0] and extent[1] should be valid number.\n *               Should be extent[0] < extent[1].\n * @param splitNumber splitNumber should be >= 1.\n */\n\nexport function intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval) {\n  var result = {};\n  var span = extent[1] - extent[0];\n  var interval = result.interval = numberUtil.nice(span / splitNumber, true);\n\n  if (minInterval != null && interval < minInterval) {\n    interval = result.interval = minInterval;\n  }\n\n  if (maxInterval != null && interval > maxInterval) {\n    interval = result.interval = maxInterval;\n  } // Tow more digital for tick.\n\n\n  var precision = result.intervalPrecision = getIntervalPrecision(interval); // Niced extent inside original extent\n\n  var niceTickExtent = result.niceTickExtent = [roundNumber(Math.ceil(extent[0] / interval) * interval, precision), roundNumber(Math.floor(extent[1] / interval) * interval, precision)];\n  fixExtent(niceTickExtent, extent);\n  return result;\n}\n/**\n * @return interval precision\n */\n\nexport function getIntervalPrecision(interval) {\n  // Tow more digital for tick.\n  return numberUtil.getPrecision(interval) + 2;\n}\n\nfunction clamp(niceTickExtent, idx, extent) {\n  niceTickExtent[idx] = Math.max(Math.min(niceTickExtent[idx], extent[1]), extent[0]);\n} // In some cases (e.g., splitNumber is 1), niceTickExtent may be out of extent.\n\n\nexport function fixExtent(niceTickExtent, extent) {\n  !isFinite(niceTickExtent[0]) && (niceTickExtent[0] = extent[0]);\n  !isFinite(niceTickExtent[1]) && (niceTickExtent[1] = extent[1]);\n  clamp(niceTickExtent, 0, extent);\n  clamp(niceTickExtent, 1, extent);\n\n  if (niceTickExtent[0] > niceTickExtent[1]) {\n    niceTickExtent[0] = niceTickExtent[1];\n  }\n}\nexport function contain(val, extent) {\n  return val >= extent[0] && val <= extent[1];\n}\nexport function normalize(val, extent) {\n  if (extent[1] === extent[0]) {\n    return 0.5;\n  }\n\n  return (val - extent[0]) / (extent[1] - extent[0]);\n}\nexport function scale(val, extent) {\n  return val * (extent[1] - extent[0]) + extent[0];\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/scale/helper.js"],"names":["numberUtil","roundNumber","round","intervalScaleNiceTicks","extent","splitNumber","minInterval","maxInterval","result","span","interval","nice","precision","intervalPrecision","getIntervalPrecision","niceTickExtent","Math","ceil","floor","fixExtent","getPrecision","clamp","idx","max","min","isFinite","contain","val","normalize","scale"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport * as numberUtil from '../util/number';\nvar roundNumber = numberUtil.round;\n/**\n * @param extent Both extent[0] and extent[1] should be valid number.\n *               Should be extent[0] < extent[1].\n * @param splitNumber splitNumber should be >= 1.\n */\n\nexport function intervalScaleNiceTicks(extent, splitNumber, minInterval, maxInterval) {\n  var result = {};\n  var span = extent[1] - extent[0];\n  var interval = result.interval = numberUtil.nice(span / splitNumber, true);\n\n  if (minInterval != null && interval < minInterval) {\n    interval = result.interval = minInterval;\n  }\n\n  if (maxInterval != null && interval > maxInterval) {\n    interval = result.interval = maxInterval;\n  } // Tow more digital for tick.\n\n\n  var precision = result.intervalPrecision = getIntervalPrecision(interval); // Niced extent inside original extent\n\n  var niceTickExtent = result.niceTickExtent = [roundNumber(Math.ceil(extent[0] / interval) * interval, precision), roundNumber(Math.floor(extent[1] / interval) * interval, precision)];\n  fixExtent(niceTickExtent, extent);\n  return result;\n}\n/**\n * @return interval precision\n */\n\nexport function getIntervalPrecision(interval) {\n  // Tow more digital for tick.\n  return numberUtil.getPrecision(interval) + 2;\n}\n\nfunction clamp(niceTickExtent, idx, extent) {\n  niceTickExtent[idx] = Math.max(Math.min(niceTickExtent[idx], extent[1]), extent[0]);\n} // In some cases (e.g., splitNumber is 1), niceTickExtent may be out of extent.\n\n\nexport function fixExtent(niceTickExtent, extent) {\n  !isFinite(niceTickExtent[0]) && (niceTickExtent[0] = extent[0]);\n  !isFinite(niceTickExtent[1]) && (niceTickExtent[1] = extent[1]);\n  clamp(niceTickExtent, 0, extent);\n  clamp(niceTickExtent, 1, extent);\n\n  if (niceTickExtent[0] > niceTickExtent[1]) {\n    niceTickExtent[0] = niceTickExtent[1];\n  }\n}\nexport function contain(val, extent) {\n  return val >= extent[0] && val <= extent[1];\n}\nexport function normalize(val, extent) {\n  if (extent[1] === extent[0]) {\n    return 0.5;\n  }\n\n  return (val - extent[0]) / (extent[1] - extent[0]);\n}\nexport function scale(val, extent) {\n  return val * (extent[1] - extent[0]) + extent[0];\n}"]},"metadata":{},"sourceType":"module"}