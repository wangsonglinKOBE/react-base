{"ast":null,"code":"/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport BoundingRect from 'zrender/lib/core/BoundingRect';\nimport View from '../View';\nimport geoSourceManager from './geoSourceManager';\nimport { SINGLE_REFERRING } from '../../util/model';\nvar GEO_DEFAULT_PARAMS = {\n  'geoJSON': {\n    aspectScale: 0.75,\n    invertLongitute: true\n  },\n  'geoSVG': {\n    aspectScale: 1,\n    invertLongitute: false\n  }\n};\nexport var geo2DDimensions = ['lng', 'lat'];\n\nvar Geo =\n/** @class */\nfunction (_super) {\n  __extends(Geo, _super);\n\n  function Geo(name, map, opt) {\n    var _this = _super.call(this, name) || this;\n\n    _this.dimensions = geo2DDimensions;\n    _this.type = 'geo'; // Only store specified name coord via `addGeoCoord`.\n\n    _this._nameCoordMap = zrUtil.createHashMap();\n    _this.map = map;\n    var source = geoSourceManager.load(map, opt.nameMap, opt.nameProperty);\n    var resource = geoSourceManager.getGeoResource(map);\n    _this.resourceType = resource ? resource.type : null;\n    var defaultParmas = GEO_DEFAULT_PARAMS[resource.type];\n    _this._regionsMap = source.regionsMap;\n    _this._invertLongitute = defaultParmas.invertLongitute;\n    _this.regions = source.regions;\n    _this.aspectScale = zrUtil.retrieve2(opt.aspectScale, defaultParmas.aspectScale);\n    var boundingRect = source.boundingRect;\n\n    _this.setBoundingRect(boundingRect.x, boundingRect.y, boundingRect.width, boundingRect.height);\n\n    return _this;\n  }\n  /**\n   * Whether contain the given [lng, lat] coord.\n   */\n  // Never used yet.\n  // containCoord(coord: number[]) {\n  //     const regions = this.regions;\n  //     for (let i = 0; i < regions.length; i++) {\n  //         const region = regions[i];\n  //         if (region.type === 'geoJSON' && (region as GeoJSONRegion).contain(coord)) {\n  //             return true;\n  //         }\n  //     }\n  //     return false;\n  // }\n\n\n  Geo.prototype._transformTo = function (x, y, width, height) {\n    var rect = this.getBoundingRect();\n    var invertLongitute = this._invertLongitute;\n    rect = rect.clone();\n\n    if (invertLongitute) {\n      // Longitute is inverted\n      rect.y = -rect.y - rect.height;\n    }\n\n    var rawTransformable = this._rawTransformable;\n    rawTransformable.transform = rect.calculateTransform(new BoundingRect(x, y, width, height));\n    var rawParent = rawTransformable.parent;\n    rawTransformable.parent = null;\n    rawTransformable.decomposeTransform();\n    rawTransformable.parent = rawParent;\n\n    if (invertLongitute) {\n      rawTransformable.scaleY = -rawTransformable.scaleY;\n    }\n\n    this._updateTransform();\n  };\n\n  Geo.prototype.getRegion = function (name) {\n    return this._regionsMap.get(name);\n  };\n\n  Geo.prototype.getRegionByCoord = function (coord) {\n    var regions = this.regions;\n\n    for (var i = 0; i < regions.length; i++) {\n      var region = regions[i];\n\n      if (region.type === 'geoJSON' && region.contain(coord)) {\n        return regions[i];\n      }\n    }\n  };\n  /**\n   * Add geoCoord for indexing by name\n   */\n\n\n  Geo.prototype.addGeoCoord = function (name, geoCoord) {\n    this._nameCoordMap.set(name, geoCoord);\n  };\n  /**\n   * Get geoCoord by name\n   */\n\n\n  Geo.prototype.getGeoCoord = function (name) {\n    var region = this._regionsMap.get(name); // calcualte center only on demand.\n\n\n    return this._nameCoordMap.get(name) || region && region.getCenter();\n  };\n\n  Geo.prototype.dataToPoint = function (data, noRoam, out) {\n    if (typeof data === 'string') {\n      // Map area name to geoCoord\n      data = this.getGeoCoord(data);\n    }\n\n    if (data) {\n      return View.prototype.dataToPoint.call(this, data, noRoam, out);\n    }\n  };\n\n  Geo.prototype.convertToPixel = function (ecModel, finder, value) {\n    var coordSys = getCoordSys(finder);\n    return coordSys === this ? coordSys.dataToPoint(value) : null;\n  };\n\n  Geo.prototype.convertFromPixel = function (ecModel, finder, pixel) {\n    var coordSys = getCoordSys(finder);\n    return coordSys === this ? coordSys.pointToData(pixel) : null;\n  };\n\n  return Geo;\n}(View);\n\n;\nzrUtil.mixin(Geo, View);\n\nfunction getCoordSys(finder) {\n  var geoModel = finder.geoModel;\n  var seriesModel = finder.seriesModel;\n  return geoModel ? geoModel.coordinateSystem : seriesModel ? seriesModel.coordinateSystem // For map series.\n  || (seriesModel.getReferringComponents('geo', SINGLE_REFERRING).models[0] || {}).coordinateSystem : null;\n}\n\nexport default Geo;","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_extension/node_modules/echarts/lib/coord/geo/Geo.js"],"names":["__extends","zrUtil","BoundingRect","View","geoSourceManager","SINGLE_REFERRING","GEO_DEFAULT_PARAMS","aspectScale","invertLongitute","geo2DDimensions","Geo","_super","name","map","opt","_this","call","dimensions","type","_nameCoordMap","createHashMap","source","load","nameMap","nameProperty","resource","getGeoResource","resourceType","defaultParmas","_regionsMap","regionsMap","_invertLongitute","regions","retrieve2","boundingRect","setBoundingRect","x","y","width","height","prototype","_transformTo","rect","getBoundingRect","clone","rawTransformable","_rawTransformable","transform","calculateTransform","rawParent","parent","decomposeTransform","scaleY","_updateTransform","getRegion","get","getRegionByCoord","coord","i","length","region","contain","addGeoCoord","geoCoord","set","getGeoCoord","getCenter","dataToPoint","data","noRoam","out","convertToPixel","ecModel","finder","value","coordSys","getCoordSys","convertFromPixel","pixel","pointToData","mixin","geoModel","seriesModel","coordinateSystem","getReferringComponents","models"],"mappings":"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","sourcesContent":["\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\n\n\n/**\n * AUTO-GENERATED FILE. DO NOT MODIFY.\n */\n\n/*\n* Licensed to the Apache Software Foundation (ASF) under one\n* or more contributor license agreements.  See the NOTICE file\n* distributed with this work for additional information\n* regarding copyright ownership.  The ASF licenses this file\n* to you under the Apache License, Version 2.0 (the\n* \"License\"); you may not use this file except in compliance\n* with the License.  You may obtain a copy of the License at\n*\n*   http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing,\n* software distributed under the License is distributed on an\n* \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n* KIND, either express or implied.  See the License for the\n* specific language governing permissions and limitations\n* under the License.\n*/\nimport { __extends } from \"tslib\";\nimport * as zrUtil from 'zrender/lib/core/util';\nimport BoundingRect from 'zrender/lib/core/BoundingRect';\nimport View from '../View';\nimport geoSourceManager from './geoSourceManager';\nimport { SINGLE_REFERRING } from '../../util/model';\nvar GEO_DEFAULT_PARAMS = {\n  'geoJSON': {\n    aspectScale: 0.75,\n    invertLongitute: true\n  },\n  'geoSVG': {\n    aspectScale: 1,\n    invertLongitute: false\n  }\n};\nexport var geo2DDimensions = ['lng', 'lat'];\n\nvar Geo =\n/** @class */\nfunction (_super) {\n  __extends(Geo, _super);\n\n  function Geo(name, map, opt) {\n    var _this = _super.call(this, name) || this;\n\n    _this.dimensions = geo2DDimensions;\n    _this.type = 'geo'; // Only store specified name coord via `addGeoCoord`.\n\n    _this._nameCoordMap = zrUtil.createHashMap();\n    _this.map = map;\n    var source = geoSourceManager.load(map, opt.nameMap, opt.nameProperty);\n    var resource = geoSourceManager.getGeoResource(map);\n    _this.resourceType = resource ? resource.type : null;\n    var defaultParmas = GEO_DEFAULT_PARAMS[resource.type];\n    _this._regionsMap = source.regionsMap;\n    _this._invertLongitute = defaultParmas.invertLongitute;\n    _this.regions = source.regions;\n    _this.aspectScale = zrUtil.retrieve2(opt.aspectScale, defaultParmas.aspectScale);\n    var boundingRect = source.boundingRect;\n\n    _this.setBoundingRect(boundingRect.x, boundingRect.y, boundingRect.width, boundingRect.height);\n\n    return _this;\n  }\n  /**\n   * Whether contain the given [lng, lat] coord.\n   */\n  // Never used yet.\n  // containCoord(coord: number[]) {\n  //     const regions = this.regions;\n  //     for (let i = 0; i < regions.length; i++) {\n  //         const region = regions[i];\n  //         if (region.type === 'geoJSON' && (region as GeoJSONRegion).contain(coord)) {\n  //             return true;\n  //         }\n  //     }\n  //     return false;\n  // }\n\n\n  Geo.prototype._transformTo = function (x, y, width, height) {\n    var rect = this.getBoundingRect();\n    var invertLongitute = this._invertLongitute;\n    rect = rect.clone();\n\n    if (invertLongitute) {\n      // Longitute is inverted\n      rect.y = -rect.y - rect.height;\n    }\n\n    var rawTransformable = this._rawTransformable;\n    rawTransformable.transform = rect.calculateTransform(new BoundingRect(x, y, width, height));\n    var rawParent = rawTransformable.parent;\n    rawTransformable.parent = null;\n    rawTransformable.decomposeTransform();\n    rawTransformable.parent = rawParent;\n\n    if (invertLongitute) {\n      rawTransformable.scaleY = -rawTransformable.scaleY;\n    }\n\n    this._updateTransform();\n  };\n\n  Geo.prototype.getRegion = function (name) {\n    return this._regionsMap.get(name);\n  };\n\n  Geo.prototype.getRegionByCoord = function (coord) {\n    var regions = this.regions;\n\n    for (var i = 0; i < regions.length; i++) {\n      var region = regions[i];\n\n      if (region.type === 'geoJSON' && region.contain(coord)) {\n        return regions[i];\n      }\n    }\n  };\n  /**\n   * Add geoCoord for indexing by name\n   */\n\n\n  Geo.prototype.addGeoCoord = function (name, geoCoord) {\n    this._nameCoordMap.set(name, geoCoord);\n  };\n  /**\n   * Get geoCoord by name\n   */\n\n\n  Geo.prototype.getGeoCoord = function (name) {\n    var region = this._regionsMap.get(name); // calcualte center only on demand.\n\n\n    return this._nameCoordMap.get(name) || region && region.getCenter();\n  };\n\n  Geo.prototype.dataToPoint = function (data, noRoam, out) {\n    if (typeof data === 'string') {\n      // Map area name to geoCoord\n      data = this.getGeoCoord(data);\n    }\n\n    if (data) {\n      return View.prototype.dataToPoint.call(this, data, noRoam, out);\n    }\n  };\n\n  Geo.prototype.convertToPixel = function (ecModel, finder, value) {\n    var coordSys = getCoordSys(finder);\n    return coordSys === this ? coordSys.dataToPoint(value) : null;\n  };\n\n  Geo.prototype.convertFromPixel = function (ecModel, finder, pixel) {\n    var coordSys = getCoordSys(finder);\n    return coordSys === this ? coordSys.pointToData(pixel) : null;\n  };\n\n  return Geo;\n}(View);\n\n;\nzrUtil.mixin(Geo, View);\n\nfunction getCoordSys(finder) {\n  var geoModel = finder.geoModel;\n  var seriesModel = finder.seriesModel;\n  return geoModel ? geoModel.coordinateSystem : seriesModel ? seriesModel.coordinateSystem // For map series.\n  || (seriesModel.getReferringComponents('geo', SINGLE_REFERRING).models[0] || {}).coordinateSystem : null;\n}\n\nexport default Geo;"]},"metadata":{},"sourceType":"module"}