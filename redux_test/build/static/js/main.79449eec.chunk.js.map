{"version":3,"sources":["redux/constant.js","redux/actions/count.js","containers/Count/index.jsx","containers/Person/index.jsx","redux/actions/person.js","App.jsx","redux/reducers/person.js","redux/reducers/index.js","redux/reducers/count.js","redux/store.js","index.js"],"names":["INCREMENT","DECREMENT","ADD_PERSON","increment","data","type","Count","state","carName","value","selectNumber","props","decrement","incrementIfOdd","count","incrementAsync","console","log","this","personCount","ref","c","onClick","Component","connect","persons","length","time","dispatch","setTimeout","Person","addPerson","name","nameNode","age","ageNode","personObj","id","nanoid","placeholder","map","p","App","initState","combineReducers","preState","action","createStore","reducer","composeWithDevTools","applyMiddleware","thunk","ReactDom","render","store","document","getElementById"],"mappings":"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","file":"static/js/main.79449eec.chunk.js","sourcesContent":["/**\r\n * 常量模块，该模块是用于定义action对象中type类型的常量值，\r\n * 目的只有一个：便于管理的同时防止1程序员单词写错\r\n */\r\n\r\nexport const INCREMENT = 'increment'\r\nexport const DECREMENT = 'decrement'\r\nexport const ADD_PERSON = 'add_person'","/**\r\n * 该文件专门为Count组件生成action对象\r\n */\r\n\r\nimport {INCREMENT, DECREMENT} from '../constant'\r\n\r\n//  创建action对象：通过函数返回一个对象来作为action对象，同步action\r\n export const increment = data => ({ type: INCREMENT, data })\r\n export const decrement = data => ({ type: DECREMENT, data })\r\n \r\n//  异步action,就是指action的值为函数,异步action中一般都会调用同步action\r\n export const incrementAsync = (data, time) => {\r\n    return (dispatch) => {\r\n        setTimeout(() => {\r\n            dispatch(increment(data))\r\n        }, time)\r\n    }\r\n }\r\n\r\n//  注意这里不用引入store了，也不用storestore.dispatch，而是通过函数参数获取dispatch\r\n\r\n//  ({ type: 'increment', data }):返回一个对象的写法\r\n\r\n\r\n","import React, { Component } from 'react'\r\n// 引入action\r\nimport {\r\n    increment,\r\n    decrement,\r\n    incrementAsync\r\n} from '../../redux/actions/count'\r\n\r\nimport { connect } from 'react-redux'\r\n\r\n// 定义UI组件\r\nclass Count extends Component {\r\n\r\n    state = { carName: '奔驰c63' }\r\n\r\n    // 加法\r\n    increment = () => {\r\n        const { value } = this.selectNumber\r\n        this.props.increment(value * 1)\r\n    }\r\n\r\n    // 减法\r\n    decrement = () => {\r\n        const { value } = this.selectNumber\r\n        this.props.decrement(value * 1)\r\n    }\r\n\r\n    // 奇数再加\r\n    incrementIfOdd = () => {\r\n        const { value } = this.selectNumber\r\n        if (this.props.count % 2 !== 0)\r\n            this.props.increment(value * 1)\r\n    }\r\n\r\n    // 异步加\r\n    incrementAsync = () => {\r\n        const { value } = this.selectNumber\r\n        this.props.incrementAsync(value * 1, 500)\r\n    }\r\n\r\n    render() {\r\n        console.log('UI组件接收到的props是：', this.props)\r\n        return (\r\n            <div>\r\n                <h2>我是Count组件</h2>\r\n                <h3>当前求和为：{this.props.count}</h3>\r\n                <h3>下方总人数为：{this.props.personCount}</h3>\r\n                <select ref={c => this.selectNumber = c}>\r\n                    <option value=\"1\">1</option>\r\n                    <option value=\"2\">2</option>\r\n                    <option value=\"3\">3</option>\r\n                </select>&nbsp;\r\n                <button onClick={this.increment}>+</button>&nbsp;\r\n                <button onClick={this.decrement}>-</button>&nbsp;\r\n                <button onClick={this.incrementIfOdd}>当前求和为奇数再加</button>&nbsp;\r\n                <button onClick={this.incrementAsync}>异步加</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n// 创建并暴露一个Count的容器组件\r\nexport default connect(\r\n    state => ({ count: state.count,\r\n        personCount: state.persons.length\r\n    }),\r\n    {\r\n        increment,\r\n        decrement,\r\n        incrementAsync\r\n    }\r\n\r\n)(Count)","import React, { Component } from 'react'\r\nimport {nanoid} from 'nanoid'\r\nimport {connect} from 'react-redux'\r\nimport {addPerson} from '../../redux/actions/person'\r\n\r\nclass Person extends Component {\r\n\r\n    addPerson = () => {\r\n        const name = this.nameNode.value\r\n        const age = this.ageNode.value*1\r\n        const personObj = {id: nanoid(), name, age}\r\n        console.log(personObj);\r\n        this.props.addPerson(personObj)\r\n        this.nameNode.value = ''\r\n        this.ageNode.value = ''\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <h2>我是Person组件</h2>\r\n                <h3>上方求和为：{this.props.count}</h3>\r\n               <input ref={c => this.nameNode = c} type=\"text\" placeholder=\"输入名字\"/>\r\n               <input ref={c => this.ageNode = c} type=\"text\" placeholder=\"输入年龄\"/>\r\n               <button onClick={this.addPerson}>添加</button>\r\n               <ul>\r\n                   {\r\n                       this.props.persons.map(p => {\r\n                           return <li key={p.id}>{p.name} -- {p.age}</li>\r\n                       })\r\n                   }\r\n               </ul>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default connect(\r\n    state => ({\r\n        persons: state.persons,\r\n        count: state.count\r\n    }), // 映射状态\r\n    {addPerson} //映射操作状态的方法\r\n)(Person)\r\n","import {ADD_PERSON} from '../constant'\r\n\r\n// 创建增加一个人的action动作对象\r\nexport const addPerson = personObj => ({type:ADD_PERSON, data:personObj})","import React, { Component } from 'react'\r\nimport Count from './containers/Count' //引入Count的容器组件\r\nimport Person from './containers/Person' //引入Person的容器组件\r\n\r\nexport default class App extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Count/>\r\n                <hr/>\r\n                <Person/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import { ADD_PERSON } from '../constant'\r\n\r\n// 初始化人的列表\r\nconst initState = [{ id: '001', name: 'kobe', age: 18 }]\r\n\r\nexport default function personReducer(preState = initState, action) {\r\n    const { type, data } = action\r\n    switch (type) {\r\n        case ADD_PERSON: //若是添加一个人\r\n            // 此处不能这样写，这样写会导致preState被改写了，unshift是改变原数组的方法\r\n            // preState.unshift(data) \r\n            return [data, ...preState]\r\n        default:\r\n            return preState\r\n    }\r\n}","/**\r\n * 该文件用于汇总所有的reducer为一个总得reducer\r\n */\r\n\r\n// 引入combineReducers，用于汇总多个reducers\r\nimport {combineReducers} from 'redux'\r\n\r\n// 引入为Count组件服务的reducer\r\nimport count from './count'\r\n\r\n// 引入为Person服务的reducer\r\nimport persons from './person'\r\n\r\n// 汇总所有的reducer变为一个总的reducer\r\nexport default combineReducers({\r\n    count,\r\n    persons\r\n})\r\n","/**\r\n * 1.该文件是用于创建一个为Count组件服务的reducer,reducer的本质就是一个函数\r\n * 2.reducer函数会接收到两个参数，分别为：之前的状态(preState), 动作对象(action)\r\n */\r\n\r\nimport {INCREMENT, DECREMENT} from '../constant'\r\n\r\nconst initState = 0 //初始化状态\r\nexport default function countReducer(preState=initState, action) {\r\n    console.log(preState,action);\r\n    // 从action对象中获取：type、data\r\n    const { type, data } = action\r\n\r\n    // 根据type决定如何加工数据\r\n    switch (type) {\r\n        case INCREMENT: //如果是加\r\n            return preState + data\r\n\r\n        case DECREMENT: //如果是减\r\n            return preState - data\r\n\r\n        default:\r\n            return preState\r\n    }\r\n\r\n}","/**\r\n * 该文件专门用于暴露一个store对象，整个应用只用一个store对象\r\n */\r\n\r\n\r\n// 引入createStore方法,专门用于创建redux中最为核心的store对象\r\nimport {createStore, applyMiddleware} from 'redux'\r\n\r\n// applyMiddleware函数：执行中间件redux-thunk\r\n\r\n// 引入redux-thunk，用于支持异步action\r\nimport thunk from 'redux-thunk'\r\n\r\n// 引入redux-devtools-extension\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\n// 引入汇总之后的reducer\r\nimport reducer from './reducers'\r\n\r\n\r\n// 创建一个store对象并导出 \r\nexport default createStore(reducer, composeWithDevTools(applyMiddleware(thunk)))\r\n\r\n","import React from 'react'\r\nimport ReactDom from 'react-dom'\r\nimport App from './App'\r\nimport store from './redux/store'\r\nimport { Provider } from 'react-redux'\r\n\r\nReactDom.render(\r\n    // 此处需要用Provider包裹App,目的是让App所有的后代容器组件都能接收到store\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>,\r\n    document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}