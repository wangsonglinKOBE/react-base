{"ast":null,"code":"var _jsxFileName = \"D:\\\\\\u684C\\u9762\\\\react\\u57FA\\u7840\\u539F\\u7406\\u5206\\u6790\\\\react_scaffolding\\\\src\\\\components\\\\Search\\\\index.jsx\";\nimport React, { Component } from 'react'; // import axios from 'axios'\n// 引入pubsub-js消息订阅与发布js库\n\nimport PubSub from 'pubsub-js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Search extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.search = () => {\n      console.log('Search组件发布消息了'); // 获取用户的输入\n      // 连续解构赋值并重命名\n\n      let {\n        keyWordElement: {\n          value: keyWord\n        }\n      } = this;\n      console.log(keyWord); // 发送请求前通知List更新状态\n\n      PubSub.publish('getData', {\n        isFirst: false,\n        isLoading: true\n      }); //#region \n      // 向github发送请求---使用axios发送\n      // axios.get(`https://api.github.com/search/users?q=${keyWord}`).then(\n      //     response => {\n      //         // 请求成功后通知List更新状态\n      //         PubSub.publish('getData', {isLoading:false, users:response.data.items})\n      //     },\n      //     error => {\n      //         console.log('请求失败', error);\n      //         // 请求失败后通知List更新状态 ,这里注意 err: '请求出错'+ error.message\n      //         PubSub.publish('getData', {isLoading:false, err: '请求出错'+ error.message})\n      //     },\n      // )\n      //#endregion\n      // 向github发送请求---使用fetch发送 （关注分离模式）\n      // fetch(`https://api.github.com/search/users?q=${keyWord}`)为一个promise实例\n\n      fetch(`https://api.github.com/search/users?q=${keyWord}`).then( // 与服务器建立连接 就算 404也是走 '联系服务器成功了'，除非断网了，\n      // 服务器没有返回任何状态码，才会走 '联系服务器失败了'\n      response => {\n        console.log('联系服务器成功了'); // console.log('联系服务器成功了', response.json())//联系服务器成功了 Promise {<pending>} 注意这里response.json()only one\n\n        return response.json(); //#region \n        // 这里是.then所指定的成功的回调有返回值，并且返回值是一个Promise实例对象\n        // 如果.then所指定的成功的回调的返回值是一个Promise实例对象，\n        // 那么就把该实例对象，作为整个.then方法的返回值了\n        //#endregion\n      }, error => {\n        console.log('联系服务器失败了', error);\n        return new Promise(() => {});\n      } //#region \n      // .json()是response对象原型上的方法 返回值是一个Promise实例对象 {<pending>}\n      // 注意这里的{<pending>}实例对象表示的不是一个pending状态的Promise实例\n      // 那么我们需要获取的数据就隐藏在这个response.json()返回的这个{<pending>}实例对象里\n      // 如果联系服务器成功了，并且获取数据也成功了，那么这个Promise实例({<pending>}) 的状态就变为成功的状态\n      // 而且里面保存这我们需要获取的数据\n      // 如果联系服务器成功了，但是获取数据却失败了，那么这个Promise实例({<pending>})的状态就是失败的状态\n      // 而且里面保存着失败的原因\n      //#endregion\n      ).then( // 这里是链接服务器成功之后的获取数据\n      response => {\n        console.log('获取数据成功了', response);\n      }, error => {\n        console.log('获取数据失败了', error);\n      } //#region \n\n      /*\r\n      接下来做个有趣的试验，如果我把控制台的NetWork条是为Offline状态，也就是断网状态\r\n      那肯定是执行'联系服务器失败了'，但是这个获取数据的.then方法中的两个回调，走还是不走呢？\r\n      走的话走哪个回调？这就是Promise功底了，上一级返回一个失败的回调中返回值为undefined\r\n      undefined属于非Promise值，如果失败的回调返回的是非Promise值，那么这个.then返回的就是\r\n      一个成功的Promise，值为undefined\r\n      打印结果为：获取数据成功了 undefined\r\n      所以说连服务器都链接失败了，就别谈什么获取数据成功和失败了，\r\n      所以如果链接服务器失败了的话，到这儿就打住，别忘下走了\r\n      中断Promise链 返回一个初始化状态的Promise实例: return new Promise(()=>{})\r\n      */\n      //#endregion\n      ); // fetch网络请求优化版本 => 传透调用：统一处理错误\n\n      fetch(`https://api.github.com/search/users?q=${keyWord}`).then(response => {\n        return response.json();\n      }).then(response => {\n        console.log('获取数据成功了', response);\n      }).catch(err);\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"section\", {\n      className: \"jumbotron\",\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"jumbotron-heading\",\n        children: \"\\u641C\\u7D22github\\u7528\\u6237\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          ref: c => this.keyWordElement = c,\n          type: \"text\",\n          placeholder: \"\\u8F93\\u5165\\u5173\\u952E\\u8BCD\\u70B9\\u51FB\\u641C\\u7D22\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 21\n        }, this), \"\\xA0\", /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: this.search,\n          children: \"\\u641C\\u7D22\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 96,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 13\n    }, this);\n  }\n\n}","map":{"version":3,"sources":["D:/桌面/react基础原理分析/react_scaffolding/src/components/Search/index.jsx"],"names":["React","Component","PubSub","Search","search","console","log","keyWordElement","value","keyWord","publish","isFirst","isLoading","fetch","then","response","json","error","Promise","catch","err","render","c"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC,C,CACA;AACA;;AACA,OAAOC,MAAP,MAAmB,WAAnB;;AAEA,eAAe,MAAMC,MAAN,SAAqBF,SAArB,CAA+B;AAAA;AAAA;;AAAA,SAG1CG,MAH0C,GAGjC,MAAM;AACXC,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EADW,CAGX;AACA;;AACA,UAAI;AAAEC,QAAAA,cAAc,EAAE;AAACC,UAAAA,KAAK,EAACC;AAAP;AAAlB,UAAsC,IAA1C;AACAJ,MAAAA,OAAO,CAACC,GAAR,CAAYG,OAAZ,EANW,CAQX;;AACAP,MAAAA,MAAM,CAACQ,OAAP,CAAe,SAAf,EAA0B;AAACC,QAAAA,OAAO,EAAC,KAAT;AAAgBC,QAAAA,SAAS,EAAC;AAA1B,OAA1B,EATW,CAWX;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACAC,MAAAA,KAAK,CAAE,yCAAwCJ,OAAQ,EAAlD,CAAL,CAA0DK,IAA1D,EACI;AACA;AACAC,MAAAA,QAAQ,IAAI;AACRV,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EADQ,CAER;;AACA,eAAOS,QAAQ,CAACC,IAAT,EAAP,CAHQ,CAIR;AACA;AACA;AACA;AACA;AACH,OAZL,EAaIC,KAAK,IAAI;AACLZ,QAAAA,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBW,KAAxB;AACA,eAAO,IAAIC,OAAJ,CAAY,MAAI,CAAE,CAAlB,CAAP;AACH,OAhBL,CAiBI;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAzBJ,QA0BEJ,IA1BF,EA2BI;AACAC,MAAAA,QAAQ,IAAI;AAACV,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBS,QAAvB;AAAiC,OA5BlD,EA6BIE,KAAK,IAAI;AAACZ,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBW,KAAvB;AAA8B,OA7B5C,CA8BI;;AACI;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACY;AA1CJ,QA5BW,CAyEX;;AACAJ,MAAAA,KAAK,CAAE,yCAAwCJ,OAAQ,EAAlD,CAAL,CAA0DK,IAA1D,CACIC,QAAQ,IAAI;AAAC,eAAOA,QAAQ,CAACC,IAAT,EAAP;AAAuB,OADxC,EAEEF,IAFF,CAGIC,QAAQ,IAAI;AAACV,QAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ,EAAuBS,QAAvB;AAAiC,OAHlD,EAIEI,KAJF,CAIQC,GAJR;AAKH,KAlFyC;AAAA;;AAoF1CC,EAAAA,MAAM,GAAG;AACL,wBACI;AAAS,MAAA,SAAS,EAAC,WAAnB;AAAA,8BACI;AAAI,QAAA,SAAS,EAAC,mBAAd;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,gCACI;AAAO,UAAA,GAAG,EAAEC,CAAC,IAAI,KAAKf,cAAL,GAAsBe,CAAvC;AAA0C,UAAA,IAAI,EAAC,MAA/C;AAAsD,UAAA,WAAW,EAAC;AAAlE;AAAA;AAAA;AAAA;AAAA,gBADJ,uBAEI;AAAQ,UAAA,OAAO,EAAE,KAAKlB,MAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AASH;;AA9FyC","sourcesContent":["import React, { Component } from 'react'\r\n// import axios from 'axios'\r\n// 引入pubsub-js消息订阅与发布js库\r\nimport PubSub from 'pubsub-js'\r\n\r\nexport default class Search extends Component {\r\n\r\n\r\n    search = () => {\r\n        console.log('Search组件发布消息了')\r\n        \r\n        // 获取用户的输入\r\n        // 连续解构赋值并重命名\r\n        let { keyWordElement: {value:keyWord} } = this\r\n        console.log(keyWord)\r\n\r\n        // 发送请求前通知List更新状态\r\n        PubSub.publish('getData', {isFirst:false, isLoading:true})\r\n\r\n        //#region \r\n        // 向github发送请求---使用axios发送\r\n        // axios.get(`https://api.github.com/search/users?q=${keyWord}`).then(\r\n        //     response => {\r\n        //         // 请求成功后通知List更新状态\r\n        //         PubSub.publish('getData', {isLoading:false, users:response.data.items})\r\n        //     },\r\n        //     error => {\r\n        //         console.log('请求失败', error);\r\n        //         // 请求失败后通知List更新状态 ,这里注意 err: '请求出错'+ error.message\r\n        //         PubSub.publish('getData', {isLoading:false, err: '请求出错'+ error.message})\r\n        //     },\r\n        // )\r\n        //#endregion\r\n\r\n        // 向github发送请求---使用fetch发送 （关注分离模式）\r\n        // fetch(`https://api.github.com/search/users?q=${keyWord}`)为一个promise实例\r\n        fetch(`https://api.github.com/search/users?q=${keyWord}`).then(\r\n            // 与服务器建立连接 就算 404也是走 '联系服务器成功了'，除非断网了，\r\n            // 服务器没有返回任何状态码，才会走 '联系服务器失败了'\r\n            response => {\r\n                console.log('联系服务器成功了')\r\n                // console.log('联系服务器成功了', response.json())//联系服务器成功了 Promise {<pending>} 注意这里response.json()only one\r\n                return response.json()\r\n                //#region \r\n                // 这里是.then所指定的成功的回调有返回值，并且返回值是一个Promise实例对象\r\n                // 如果.then所指定的成功的回调的返回值是一个Promise实例对象，\r\n                // 那么就把该实例对象，作为整个.then方法的返回值了\r\n                //#endregion\r\n            },  \r\n            error => {\r\n                console.log('联系服务器失败了', error)\r\n                return new Promise(()=>{})\r\n            }\r\n            //#region \r\n            // .json()是response对象原型上的方法 返回值是一个Promise实例对象 {<pending>}\r\n            // 注意这里的{<pending>}实例对象表示的不是一个pending状态的Promise实例\r\n            // 那么我们需要获取的数据就隐藏在这个response.json()返回的这个{<pending>}实例对象里\r\n            // 如果联系服务器成功了，并且获取数据也成功了，那么这个Promise实例({<pending>}) 的状态就变为成功的状态\r\n            // 而且里面保存这我们需要获取的数据\r\n            // 如果联系服务器成功了，但是获取数据却失败了，那么这个Promise实例({<pending>})的状态就是失败的状态\r\n            // 而且里面保存着失败的原因\r\n            //#endregion\r\n        ).then(\r\n            // 这里是链接服务器成功之后的获取数据\r\n            response => {console.log('获取数据成功了', response)},\r\n            error => {console.log('获取数据失败了', error)}\r\n            //#region \r\n                /*\r\n                接下来做个有趣的试验，如果我把控制台的NetWork条是为Offline状态，也就是断网状态\r\n                那肯定是执行'联系服务器失败了'，但是这个获取数据的.then方法中的两个回调，走还是不走呢？\r\n                走的话走哪个回调？这就是Promise功底了，上一级返回一个失败的回调中返回值为undefined\r\n                undefined属于非Promise值，如果失败的回调返回的是非Promise值，那么这个.then返回的就是\r\n                一个成功的Promise，值为undefined\r\n                打印结果为：获取数据成功了 undefined\r\n                所以说连服务器都链接失败了，就别谈什么获取数据成功和失败了，\r\n                所以如果链接服务器失败了的话，到这儿就打住，别忘下走了\r\n                中断Promise链 返回一个初始化状态的Promise实例: return new Promise(()=>{})\r\n                */\r\n            //#endregion\r\n        )\r\n\r\n        // fetch网络请求优化版本 => 传透调用：统一处理错误\r\n        fetch(`https://api.github.com/search/users?q=${keyWord}`).then(\r\n            response => {return response.json()}\r\n        ).then(\r\n            response => {console.log('获取数据成功了', response)},\r\n        ).catch(err)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <section className=\"jumbotron\">\r\n                <h3 className=\"jumbotron-heading\">搜索github用户</h3>\r\n                <div>\r\n                    <input ref={c => this.keyWordElement = c} type=\"text\" placeholder=\"输入关键词点击搜索\"/>&nbsp;\r\n                    <button onClick={this.search}>搜索</button>\r\n                </div>\r\n            </section>\r\n        )\r\n    }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}